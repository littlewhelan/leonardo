function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,a){return{request:function(t){return t.headers=t.headers||{},a.isAuthed()&&(t.headers.Authorization="Bearer "+a.getToken()),t},response:function(a){return 401===a.status&&e.path("/"),a||t.when(a)},responseError:function(a){return 401===a.status?e.path("/"):console.log(a.status),t.reject(a)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var a=e.split(".")[1],n=a.replace("-","+").replace("_","/");return JSON.parse(t.atob(n))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),a=Math.round((new Date).getTime()/1e3)<=e.exp;return a||this.logout(),a}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,e,a,n,o,i){t.validateInput=i.validateInput,t.companies=n.companies,t.corp={contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.open=function(n,i){return console.log("corp call",i),o({method:"GET",url:"../corporation",params:{id:i}}).then(function(o){t.company=o.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:n,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?(console.log("insert corp",t.corp),o({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Put corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}})):o({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Posted corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}})},t.addDonation=function(){console.log("added donation",t.newDonation,t.corp.donations),t.corp.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData",function(t,e,a,n){t.type={},t.age={},t.zip={},t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&a.makeDataCall("zip",t.zip.data).then(function(e){t.emailList=e,t.totalResults=e.length,console.log(t.emailList)}),"ageCk"==t.type){var e=a.makeDataCall("age",t.age.data);e.then(function(e){console.log(e),t.emailList=e,t.totalResults=e.length})}if("fam"==t.type){var n=a.makeDataCall("family","");n.then(function(e){t.emailList=e,t.totalResults=e.length,console.log(e)})}if("corp"==t.type){var o=a.makeDataCall("company","");o.then(function(e){t.emailList=e,t.totalResults=e.length,console.log(e)})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.includedEmails),n.popList(t.includedEmails)},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(e){var a=angular.element(e.target);t.includedEmails.length==t.totalResults?(t.includedEmails=[],$('#createResults input[type="checkbox"]').attr("checked",!1),a.val("Check All")):(t.includedEmails=angular.copy(t.emailList),a.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,e){function a(a,n){var o=e.defer();return console.log("this is in the make data call",a,n),t({method:"GET",url:"../createMailList",params:{type:a,search:n}}).then(function(t){data=t.data,o.resolve(t.data)}),o.promise}return{data:[],makeDataCall:a}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,e,a,n,o,i){t.validateInput=i.validateInput,t.adults=n.adults,t.kids=n.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(){t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={}},t.animationsEnabled=!0,t.open=function(n,i){return console.log("family call",i),o({method:"GET",url:"../family",params:{id:i}}).then(function(o){t.family=o.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:n,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){alert("this is the save button "),console.log("Save submitted",t.family),t.family.id?(console.log("insert family",t.family),alert("this is the save else button "),o({method:"PUT",url:"/family",data:{family:t.family}}).then(function(e){console.log("Put family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]})):o({method:"POST",url:"/family",data:{family:t.family}}).then(function(e){console.log("Posted family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]})},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1):t.family.children.push(t.newChild),t.newChild={}},t.editChild=function(e){t.editingChild=e,t.newChild=t.family.children[e]},t.removeChild=function(e){console.log("in remove child index",e," edit ",t.editingChild),t.family.children.splice(e,1),e==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){t.family.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,a,n,o){t.submit=function(){e.post("/login",t.form).then(function(t){a.saveToken(t.data),o.user=a.getUser(),n.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,a){t.formInput={},t.searchBtn=function(){a.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],a=[],n=[],o=[],i=function(a){return t({method:"GET",url:"../search",params:{search:a}}).then(function(t){e=t.data,l(e),s(e),c(e)})},l=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"company"==t.type&&n.push(t)})};return e(t),console.log("this is getElement1",n),n},c=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),console.log("this is in getElement2",a),a},s=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"child"==t.type&&o.push(t)})};return e(t),console.log("this is getElements3",o),o},r={getKids:s,getAdults:c,getCompanies:l,makeDataCall:i,results:e,companies:n,adults:a,kids:o};return r}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,a,n){a.user=t.getUser(),a.user&&a.user.username&&n.path("/home"),e.logout=function(){t.logout(),a.user=t.getUser(),n.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope",function(t,e){e.listname={},e.createList=function(){console.log("create list: "+e.listname.input),t.postList(e.listname.input),console.log("list #",t.listNum),e.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,e){var a="",n=[];this.postList=function(t){return console.log("did the name make it to the service? "+t),e.post("/newContactList",{name:t}).then(function(t){console.log(t.data),a=t.data,console.log("Id? ",a)},function(t){console.log(t)})},this.popList=function(t){this.dataObject={importDataArray:n,listNum:a},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),o(t),e.post("/populateContactList",this.dataObject).then(function(t,e,a,n){console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray)})};var o=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email],first_name:t.firstName,last_name:t.lastName,company_name:t.company,addresses:[{city:t.city}]},console.log(this.contactObject),n.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,e,a){e.listName={},e.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),e.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.service("validService",[function(){var t=function(t,e){var a,n=e?$("#"+e):!1;switch(console.log("object is ",n,t,e),t){case"name":case"city":case"state":a=/^[a-zA-z\s,.'-]+$/;break;case"corpName":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]+$/;break;case"address":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]+$/;break;case"zip":a=/^[0-9]{5}$/;break;case"phone":a=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":a=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]+$/;break;case"ext":a=/^[a-zA-Z0-9\s:-]+$/;break;case"date":a=/^20[0-9]{2}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"birthdate":a=/^(199[0-9]|20[0-9]{2})[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"amount":a=/^[\$]?[\d]+([.][\d]{2})?$/;break;default:return console.log("invalid class search"),!1}(n.attr("required")||n.val().trim().length>0)&&(a.test(n.val().trim())?(n.removeClass("invalid").attr("placeholder",n.data("placeholder")),console.log(t," passed test",a)):(n.addClass("invalid").attr("placeholder",n.data("invalid")).val(""),console.log(t," failed test",a)))};return{validateInput:t}}]);
//# sourceMappingURL=data:application/json;base64,
