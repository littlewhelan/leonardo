var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html"}).when("/addcorp",{templateUrl:"private/addcorp.html"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.service("contactListData",function(){var t=[],e=0;return{newContactList:t,listNum:e}}),app.controller("newContactListController",["contactListData","$scope","$http",function(t,e,n){e.listname={},e.config={headers:{Authorization:"Bearer ef5d5df2-a808-4c70-a5d9-eb71163cbeb9","Content-Type":"application/json"}},e.postList=function(){e.listReq={name:e.listname.input,status:"ACTIVE"},console.log("posting list . . . "),console.log(e.listReq),console.log(e.config),n.post("https://api.constantcontact.com/v2/lists?api_key=yg5p2qf549qacmbqayk5rn23",e.listReq,e.config).then(function(e){console.log("res"+e),e.id=t.listNum})}}]),app.controller("contactListController",["contactListData","$scope","$http",function(t,e,n){var o=[],a=JSON.stringify("list: ["+t.listNum+'],column_names:["EMAIL","FIRST NAME", "LAST NAME", "CITY","COMPANY NAME"]');e.contactChecked=function(t){e.checked.push([t])},e.sendPost=function(){var e=$.param({json:JSON.stringify({importData:o+", "+a})}),i={headers:{Authorization:"Bearer ef5d5df2-a808-4c70-a5d9-eb71163cbeb9"}};n.post("https://api.constantcontact.com/v2/activities/addcontacts?api_key=u8w59ztxe3294adczfvn7k9e",e,i).success(function(e,n,o,a){res.id=t.listNum}).error(function(t,e,n,o){})}}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,n){return{request:function(t){return t.headers=t.headers||{},n.isAuthed()&&(t.headers.Authorization="Bearer "+n.getToken()),t},response:function(n){return 401===n.status&&e.path("/"),n||t.when(n)},responseError:function(n){return 401===n.status?e.path("/"):console.log(n.status),t.reject(n)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var n=e.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),n=Math.round((new Date).getTime()/1e3)<=e.exp;return n||this.logout(),n}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService",function(t,e,n,o){t.companies=o.companies,t.animationsEnabled=!0,t.openCorp=function(o){return console.log("corp call"),$http({method:"GET",url:"../search",params:{id:passedData}}).then(function(a){results=this.response.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,resolve:{items:function(){return t.items}}});i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.openCorp=function(t){},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("createListSearch",["$scope","ContactListDataService",function(t,e){t.listForm={},t.searchListBtn=function(){e.makeDataCall(t.listForm.data),t.listForm={}}}]),app.factory("ContactListDataService",["$http",function(t){var e=[],n=[],o=[],a=[],i=function(t){return http({method:"GET",URL:"../createMailList",params:{search:t}}).then(function(t){e=t.data,s(e),r(e),c(e)})},r=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),a},s=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"company"==t.type&&n.push(t)})};return e(t),n},c=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"child"==t.type&&kids.push(t)})};return e(t),o},l={makeDataCall:i,getCompanies:s,getKids:c,getAdults:r,results:e,allKids:o,allAdults:a,allCompanies:n};return l}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,e,n,o,a){t.adults=o.adults,t.kids=o.kids,t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),console.log("size",o),a({method:"GET",url:"../family",params:{id:i}}).then(function(a){results=a.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o});console.log("this works???"),i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,n,o,a){t.submit=function(){e.post("/login",t.form).then(function(t){n.saveToken(t.data),a.user=n.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,n){t.formInput={},t.searchBtn=function(){n.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],n=[],o=[],a=[],i=function(n){return t({method:"GET",url:"../search",params:{search:n}}).then(function(t){e=t.data,r(e),c(e),s(e)})},r=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},s=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"adult"==t.type&&n.push(t)})};return e(t),console.log("this is in getElement2",n),n},c=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"child"==t.type&&a.push(t)})};return e(t),console.log("this is getElements3",a),a},l={getKids:c,getAdults:s,getCompanies:r,makeDataCall:i,results:e,companies:o,adults:n,kids:a};return l}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,n,o){n.user=t.getUser(),n.user&&n.user.username&&o.path("/home"),e.logout=function(){t.logout(),n.user=t.getUser(),o.path("/")}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),n.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),n.path("/index")})}}]);
//# sourceMappingURL=data:application/json;base64,
