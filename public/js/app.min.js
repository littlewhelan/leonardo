function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,a,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&a.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?a.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(a){if(a){var e=a.split(".")[1],n=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(n))}return{}},this.saveToken=function(a){t.localStorage.jwtToken=a},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var a=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=a.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,a,e,n,o,i){t.validateInput=i.validateInput,t.companies=n.companies,t.corp={contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.open=function(n,i){return console.log("corp call",i),o({method:"GET",url:"../corporation",params:{id:i}}).then(function(o){t.company=o.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:n,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?(console.log("insert corp",t.corp),o({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Put corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})):o({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Posted corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})},t.addDonation=function(){console.log("added donation",t.newDonation,t.corp.donations),t.corp.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData",function(t,a,e,n){t.type={},t.age={},t.zip={},t.emailList=[],t.searchListBtn=function(){if("zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(a){t.emailList=a,console.log(t.emailList)}),"ageCk"==t.type){var a=e.makeDataCall("age",t.age.data);a.then(function(a){console.log(a),t.emailList=a})}if("fam"==t.type){var n=e.makeDataCall("family","");n.then(function(a){t.emailList=a,console.log(a)})}if("corp"==t.type){var o=e.makeDataCall("company","");o.then(function(a){t.emailList=a,console.log(a)})}t.type={},t.age={},t.zip={}},t.populateList=function(){alert("working"),n.popList(t.emailList).then(function(){$(".search").hide(),$(".endMessage").append("<h2>sent</h2>")})}}]),app.factory("ContactListDataService",["$http","$q",function(t,a){function e(e,n){var o=a.defer();return console.log("this is in the make data call",e,n),t({method:"GET",url:"../createMailList",params:{type:e,search:n}}).then(function(t){data=t.data,o.resolve(t.data)}),o.promise}return{data:[],makeDataCall:e}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,a,e,n,o,i){t.validateInput=i.validateInput,t.adults=n.adults,t.kids=n.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.animationsEnabled=!0,t.open=function(n,i){return console.log("family call",i),o({method:"GET",url:"../family",params:{id:i}}).then(function(o){t.family=o.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:n,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.id?(console.log("insert family",t.family),o({method:"PUT",url:"/family",data:{family:t.family}}).then(function(a){console.log("Put family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})):o({method:"POST",url:"/family",data:{family:t.family}}).then(function(a){console.log("Posted family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1):t.family.children.push(t.newChild),t.newChild={}},t.editChild=function(a){t.editingChild=a,t.newChild=t.family.children[a]},t.removeChild=function(a){console.log("in remove child index",a," edit ",t.editingChild),t.family.children.splice(a,1),a==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){t.family.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,a,e,n,o){t.submit=function(){a.post("/login",t.form).then(function(t){e.saveToken(t.data),o.user=e.getUser(),n.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,a,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var a=[],e=[],n=[],o=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){a=t.data,l(a),s(a),r(a)})},l=function(t){var a=function(t){n.splice(0,n.length),t.forEach(function(t){"company"==t.type&&n.push(t)})};return a(t),console.log("this is getElement1",n),n},r=function(t){var a=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return a(t),console.log("this is in getElement2",e),e},s=function(t){var a=function(t){o.splice(0,o.length),t.forEach(function(t){"child"==t.type&&o.push(t)})};return a(t),console.log("this is getElements3",o),o},c={getKids:s,getAdults:r,getCompanies:l,makeDataCall:i,results:a,companies:n,adults:e,kids:o};return c}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,a){t.ok=function(){a.close(t.selected.item)},t.cancel=function(){a.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,a,e,n){e.user=t.getUser(),e.user&&e.user.username&&n.path("/home"),a.logout=function(){t.logout(),e.user=t.getUser(),n.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope",function(t,a){a.listname={},a.createList=function(){console.log("create list: "+a.listname.input),t.postList(a.listname.input),console.log("list #",t.listNum),a.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,a){this.newContactList=[],this.listNum="2006066267",this.importDataArray=[{email_addresses:["user1@example.com"],first_name:"John",last_name:"Smith",company_name:"Company X",addresses:[{city:"anytown"}]},{email_addresses:["user2@example.com"],first_name:"Jane",last_name:"Smithy",company_name:"Company Y",addresses:[{city:"sometown"}]}],this.postList=function(t){return console.log("did the name make it to the service? "+t),a.post("/newContactList",{name:t}).then(function(t){console.log(t.data),listNum=t.data,console.log("Id? ",listNum)},function(t){console.log(t)})},this.popList=function(t){this.dataObject={importDataArray:this.importDataArray,listNum:this.listNum},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),e(t),a.post("/populateContactList",this.dataObject).then(function(t,a,e,n){console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray)})};var e=function(t){$(":checked").each(function(){if(id==t.email){var a={email_addresses:[$(this).email],first_name:$(this).firstName,last_name:$(this).lastName,company_name:$(this).company,addresses:[{city:$(this).city}]};importDataArray.push(a)}})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,a,e){a.listName={},a.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),a.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,a,e){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),a.post("/register",t.form).then(function(t){console.log(t),e.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,a,e){t.submit=function(){console.log("edit password:",t.form),a.put("/admin",t.form).then(function(t){console.log(t),e.path("/index")})}}]),app.service("validService",[function(){var t=function(t,a){var e,n=a?$("#"+a):!1;switch(console.log("object is ",n,t,a),t){case"name":case"city":case"state":e=/^[a-zA-z\s,.'-]+$/;break;case"corpName":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]+$/;break;case"address":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]+$/;break;case"zip":e=/^[0-9]{5}$/;break;case"phone":e=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]+$/;break;case"ext":e=/^[a-zA-Z0-9\s:-]+$/;break;case"date":e=/^20[0-9]{2}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"birthdate":e=/^(199[0-9]|20[0-9]{2})[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"amount":e=/^[\$]?[\d]+([.][\d]{2})?$/;break;default:return console.log("invalid class search"),!1}(n.attr("required")||n.val().trim().length>0)&&(e.test(n.val().trim())?(n.removeClass("invalid").attr("placeholder",n.data("placeholder")),console.log(t," passed test",e)):(n.addClass("invalid").attr("placeholder",n.data("invalid")).val(""),console.log(t," failed test",e)))};return{validateInput:t}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udG9sbGVyLmpzIiwiY3JlYXRlTGlzdFNlcnZpY2UuanMiLCJmYW1pbHlDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwibWFpblNlYXJjaENvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoU2VydmljZS5qcyIsIm1vZGFsSW5zdGFuY2VDb250cm9sbGVyLmpzIiwibmF2Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0U2VydmljZS5qcyIsInBvcExpc3RDb250cm9sbGVyLmpzIiwicmVnaXN0ZXJDb250cm9sbGVyLmpzIiwicmVzZXRDb250cm9sbGVyLmpzIiwidmFsaWRTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImZvcm1hdERhdGVzIiwiZGF0ZSIsImZ1bGwiLCJtb21lbnQiLCJmb3JtYXQiLCJmdWxsRGF0ZSIsInByZXR0eSIsInByZXR0eURhdGUiLCJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImZhY3RvcnkiLCIkcSIsIiRsb2NhdGlvbiIsImF1dGhTZXJ2aWNlIiwicmVxdWVzdCIsImhlYWRlcnMiLCJpc0F1dGhlZCIsIkF1dGhvcml6YXRpb24iLCJnZXRUb2tlbiIsInJlc3BvbnNlIiwic3RhdHVzIiwicGF0aCIsInJlc3BvbnNlRXJyb3IiLCJjb25zb2xlIiwibG9nIiwicmVqZWN0Iiwic2VydmljZSIsIiR3aW5kb3ciLCJ0aGlzIiwicGFyc2VKd3QiLCJ0b2tlbiIsImJhc2U2NFVybCIsInNwbGl0IiwiYmFzZTY0IiwicmVwbGFjZSIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJzYXZlVG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJqd3RUb2tlbiIsInBhcmFtcyIsIm5vdEV4cGlyZWQiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsImV4cCIsImxvZ291dCIsImdldFVzZXIiLCIkc2NvcGUiLCIkdWliTW9kYWwiLCIkbG9nIiwiUmVzdWx0U2VydmljZSIsIiRodHRwIiwidmFsaWRTZXJ2aWNlIiwidmFsaWRhdGVJbnB1dCIsImNvbXBhbmllcyIsImNvcnAiLCJjb250YWN0IiwiZG9uYXRpb25zIiwibmV3RG9uYXRpb24iLCJhbmltYXRpb25zRW5hYmxlZCIsIm9wZW4iLCJzaXplIiwiaWQiLCJtZXRob2QiLCJ1cmwiLCJ0aGVuIiwiY29tcGFueSIsImRhdGEiLCJtb2RhbEluc3RhbmNlIiwiYW5pbWF0aW9uIiwic2NvcGUiLCJyZXNvbHZlIiwiaXRlbXMiLCJyZXN1bHQiLCJzZWxlY3RlZEl0ZW0iLCJzZWxlY3RlZCIsImluZm8iLCJ0b2dnbGVBbmltYXRpb24iLCJzYXZlIiwicmVzIiwibGVuZ3RoIiwiYWRkRG9uYXRpb24iLCJwdXNoIiwiQ29udGFjdExpc3REYXRhU2VydmljZSIsIm5ld0NvbnRhY3RMaXN0RGF0YSIsInR5cGUiLCJhZ2UiLCJ6aXAiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsImFsZXJ0IiwicG9wTGlzdCIsIiQiLCJoaWRlIiwiYXBwZW5kIiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwiYWR1bHRzIiwia2lkcyIsImZhbWlseSIsImFkdWx0T25lIiwiYWR1bHRUd28iLCJlbWVyZ2VuY3kiLCJjaGlsZHJlbiIsIm5ld0NoaWxkIiwiYWRkQ2hpbGQiLCJlZGl0aW5nQ2hpbGQiLCJlZGl0Q2hpbGQiLCJpbmRleCIsInJlbW92ZUNoaWxkIiwic3BsaWNlIiwiY2xlYXJDaGlsZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiYmlydGhkYXRlIiwic2Nob29sIiwibm90ZXMiLCIkcm9vdFNjb3BlIiwic3VibWl0IiwicG9zdCIsImZvcm0iLCJ1c2VyIiwiZm9ybUlucHV0Iiwic2VhcmNoQnRuIiwicmVzdWx0cyIsImdldENvbXBhbmllcyIsImdldEtpZHMiLCJnZXRBZHVsdHMiLCJhcnJheSIsImdldEVsZW1lbnQxIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJnZXRFbGVtZW50MiIsImdldEVsZW1lbnQzIiwicHVibGljQXBpIiwiJG1vZGFsSW5zdGFuY2UiLCJvayIsImNsb3NlIiwiaXRlbSIsImNhbmNlbCIsImRpc21pc3MiLCJ1c2VybmFtZSIsImxpc3RuYW1lIiwiY3JlYXRlTGlzdCIsImlucHV0IiwicG9zdExpc3QiLCJsaXN0TnVtIiwibmV3Q29udGFjdExpc3QiLCJpbXBvcnREYXRhQXJyYXkiLCJlbWFpbF9hZGRyZXNzZXMiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiY29tcGFueV9uYW1lIiwiYWRkcmVzc2VzIiwiY2l0eSIsIm5hbWUiLCJsaXN0IiwiZGF0YU9iamVjdCIsImdldENoZWNrZWQiLCJsIiwiZWFjaCIsImVtYWlsIiwiY29udGFjdE9iamVjdCIsImxpc3ROYW1lIiwicHV0IiwicGF0dGVybiIsIiRvYmoiLCJhdHRyIiwidmFsIiwidHJpbSIsInRlc3QiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIl0sIm1hcHBpbmdzIjoiQUFLQSxRQUFBQSxhQUFBQyxHQUNBLE9BQ0FDLEtBQUFDLE9BQUFGLEdBQUFHLE9BQUFDLFVBQ0FDLE9BQUFILE9BQUFGLEdBQUFHLE9BQUFHLGFBUkEsR0FBQUMsS0FBQUMsUUFBQUMsT0FBQSxPQUFBLFVBQUEsWUFBQSxlQUFBLG9CQUVBSCxXQUFBLGNBQ0FGLFNBQUEsc0JBU0FHLEtBQUFHLFFBQUEsaUJBQ0EsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUNBQyxZQUFBLHNCQUVBRCxLQUFBLFdBQ0FDLFlBQUEsd0JBRUFELEtBQUEsYUFDQUMsWUFBQSx5QkFFQUQsS0FBQSxnQkFDQUMsWUFBQSw2QkFFQUQsS0FBQSxjQUNBQyxZQUFBLHlCQUNBQyxXQUFBLG1CQUVBRixLQUFBLFlBQ0FDLFlBQUEsdUJBQ0FDLFdBQUEsaUJBRUFGLEtBQUEsZ0JBQ0FDLFlBQUEsNkJBRUFFLFdBQ0FDLFdBQUEsZUN2Q0FULElBQUFVLFFBQUEsbUJBQUEsS0FBQSxZQUFBLGNBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUNBQyxRQUFBLFNBQUFYLEdBS0EsTUFKQUEsR0FBQVksUUFBQVosRUFBQVksWUFDQUYsRUFBQUcsYUFDQWIsRUFBQVksUUFBQUUsY0FBQSxVQUFBSixFQUFBSyxZQUVBZixHQUVBZ0IsU0FBQSxTQUFBQSxHQU9BLE1BTEEsT0FBQUEsRUFBQUMsUUFHQVIsRUFBQVMsS0FBQSxLQUVBRixHQUFBUixFQUFBTixLQUFBYyxJQUNBRyxjQUFBLFNBQUFILEdBU0EsTUFSQSxPQUFBQSxFQUFBQyxPQUdBUixFQUFBUyxLQUFBLEtBR0FFLFFBQUFDLElBQUFMLEVBQUFDLFFBRUFULEVBQUFjLE9BQUFOLFFDMUJBbkIsSUFBQTBCLFFBQUEsZUFBQSxVQUFBLFNBQUFDLEdBRUFDLEtBQUFDLFNBQUEsU0FBQUMsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FBQUMsR0FBQUQsRUFBQUUsTUFBQSxLQUFBLEdBQ0FDLEVBQUFGLEVBQUFHLFFBQUEsSUFBQSxLQUFBQSxRQUFBLElBQUEsSUFDQSxPQUFBQyxNQUFBQyxNQUFBVCxFQUFBVSxLQUFBSixJQUNBLFVBR0FMLEtBQUFVLFVBQUEsU0FBQVIsR0FDQUgsRUFBQVksYUFBQUMsU0FBQVYsR0FJQUYsS0FBQVYsU0FBQSxXQUNBLE1BQUFTLEdBQUFZLGFBQUFDLFVBR0FaLEtBQUFaLFNBQUEsV0FDQSxHQUFBYyxHQUFBRixLQUFBVixVQUNBLElBQUFZLEVBQUEsQ0FDQSxHQUFBVyxHQUFBYixLQUFBQyxTQUFBQyxHQUNBWSxFQUFBQyxLQUFBQyxPQUFBLEdBQUFDLE9BQUFDLFVBQUEsTUFBQUwsRUFBQU0sR0FJQSxPQUhBTCxJQUNBZCxLQUFBb0IsU0FFQU4sRUFFQSxPQUFBLEdBSUFkLEtBQUFvQixPQUFBLGlCQUNBckIsR0FBQVksYUFBQUMsVUFJQVosS0FBQXFCLFFBQUEsV0FDQSxNQUFBckIsTUFBQUMsU0FBQUQsS0FBQVYsZ0JDdENBbEIsSUFBQU8sV0FBQSxnQkFBQSxTQUFBLFlBQUEsT0FBQSxnQkFBQSxRQUFBLGVBQUEsU0FBQTJDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0FMLEVBQUFNLGNBQUFELEVBQUFDLGNBRUFOLEVBQUFPLFVBQUFKLEVBQUFJLFVBQ0FQLEVBQUFRLE1BQ0FDLFdBQ0FDLGNBRUFWLEVBQUFXLGVBQ0FYLEVBQUFZLG1CQUFBLEVBRUFaLEVBQUFhLEtBQUEsU0FBQUMsRUFBQUMsR0FFQSxNQURBMUMsU0FBQUMsSUFBQSxZQUFBeUMsR0FDQVgsR0FDQVksT0FBQSxNQUNBQyxJQUFBLGlCQUNBMUIsUUFBQXdCLEdBQUFBLEtBQ0FHLEtBQUEsU0FBQWpELEdBRUErQixFQUFBbUIsUUFBQWxELEVBQUFtRCxJQUNBLElBQUFDLEdBQUFwQixFQUFBWSxNQUNBUyxVQUFBdEIsRUFBQVksa0JBQ0F4RCxZQUFBLHdCQUNBQyxXQUFBLG9CQUNBeUQsS0FBQUEsRUFDQVMsTUFBQXZCLEVBQ0F3QixTQUNBQyxNQUFBLFdBQ0EsTUFBQXpCLEdBQUFtQixXQUtBRSxHQUFBSyxPQUFBUixLQUFBLFNBQUFTLEdBQ0EzQixFQUFBNEIsU0FBQUQsR0FDQSxXQUNBekIsRUFBQTJCLEtBQUEsdUJBQUEsR0FBQWxDLFlBS0FLLEVBQUE4QixnQkFBQSxXQUNBOUIsRUFBQVksbUJBQUFaLEVBQUFZLG1CQUlBWixFQUFBK0IsS0FBQSxXQUNBMUQsUUFBQUMsSUFBQSxpQkFBQTBCLEVBQUFRLE1BR0FSLEVBQUFRLEtBQUFPLElBa0JBMUMsUUFBQUMsSUFBQSxjQUFBMEIsRUFBQVEsTUFDQUosR0FDQVksT0FBQSxNQUNBQyxJQUFBLGVBQ0FHLE1BQUFaLEtBQUFSLEVBQUFRLFFBQ0FVLEtBQUEsU0FBQWMsR0FDQTNELFFBQUFDLElBQUEsb0JBQUEwRCxFQUFBWixNQUVBcEIsRUFBQVEsS0FBQU8sR0FBQWlCLEVBQUFaLEtBQUFMLEdBQ0FmLEVBQUFRLEtBQUFxQixLQUFBRyxFQUFBWixLQUFBLEtBQUFZLEVBQUFaLEtBQUFTLFFBQ0E3QixFQUFBUyxRQUFBdUIsRUFBQVosS0FBQSxRQUFBWSxFQUFBWixLQUFBWCxXQUVBVCxFQUFBUSxLQUFBRSxVQUFBdUIsU0FDQWpDLEVBQUFRLEtBQUFFLGNBRUFWLEVBQUFVLFVBQUFzQixFQUFBWixLQUFBLFVBQUFZLEVBQUFaLEtBQUFWLGdCQWhDQU4sR0FDQVksT0FBQSxPQUNBQyxJQUFBLGVBQ0FHLE1BQUFaLEtBQUFSLEVBQUFRLFFBQ0FVLEtBQUEsU0FBQWMsR0FDQTNELFFBQUFDLElBQUEsdUJBQUEwRCxFQUFBWixNQUNBcEIsRUFBQVEsS0FBQU8sR0FBQWlCLEVBQUFaLEtBQUFMLEdBQ0FmLEVBQUFRLEtBQUFxQixLQUFBRyxFQUFBWixLQUFBLEtBQUFZLEVBQUFaLEtBQUFTLFFBQ0E3QixFQUFBUyxRQUFBdUIsRUFBQVosS0FBQSxRQUFBWSxFQUFBWixLQUFBWCxXQUVBVCxFQUFBUSxLQUFBRSxVQUFBdUIsU0FDQWpDLEVBQUFRLEtBQUFFLGNBRUFWLEVBQUFVLFVBQUFzQixFQUFBWixLQUFBLFVBQUFZLEVBQUFaLEtBQUFWLGdCQXlCQVYsRUFBQWtDLFlBQUEsV0FDQTdELFFBQUFDLElBQUEsaUJBQUEwQixFQUFBVyxZQUFBWCxFQUFBUSxLQUFBRSxXQUNBVixFQUFBUSxLQUFBRSxVQUFBeUIsS0FBQW5DLEVBQUFXLGFBQ0FYLEVBQUFXLG1CQy9GQTdELElBQUFPLFdBQUEsb0JBQUEsU0FBQSxRQUFBLHlCQUFBLHFCQUFBLFNBQUEyQyxFQUFBSSxFQUFBZ0MsRUFBQUMsR0FDQXJDLEVBQUFzQyxRQUNBdEMsRUFBQXVDLE9BQ0F2QyxFQUFBd0MsT0FHQXhDLEVBQUF5QyxhQUVBekMsRUFBQTBDLGNBQUEsV0FlQSxHQVhBLFNBQUExQyxFQUFBc0MsTUFFQUYsRUFBQU8sYUFBQSxNQUFBM0MsRUFBQXdDLElBQUFwQixNQUNBRixLQUFBLFNBQUFFLEdBQ0FwQixFQUFBeUMsVUFBQXJCLEVBQ0EvQyxRQUFBQyxJQUFBMEIsRUFBQXlDLGFBTUEsU0FBQXpDLEVBQUFzQyxLQUFBLENBQ0EsR0FBQUMsR0FBQUgsRUFBQU8sYUFBQSxNQUFBM0MsRUFBQXVDLElBQUFuQixLQUNBbUIsR0FBQXJCLEtBQUEsU0FBQUUsR0FDQS9DLFFBQUFDLElBQUE4QyxHQUNBcEIsRUFBQXlDLFVBQUFyQixJQUtBLEdBQUEsT0FBQXBCLEVBQUFzQyxLQUFBLENBQ0EsR0FBQU0sR0FBQVIsRUFBQU8sYUFBQSxTQUFBLEdBQ0FDLEdBQUExQixLQUFBLFNBQUFFLEdBQ0FwQixFQUFBeUMsVUFBQXJCLEVBQ0EvQyxRQUFBQyxJQUFBOEMsS0FLQSxHQUFBLFFBQUFwQixFQUFBc0MsS0FBQSxDQUNBLEdBQUFPLEdBQUFULEVBQUFPLGFBQUEsVUFBQSxHQUNBRSxHQUFBM0IsS0FBQSxTQUFBRSxHQUNBcEIsRUFBQXlDLFVBQUFyQixFQUNBL0MsUUFBQUMsSUFBQThDLEtBS0FwQixFQUFBc0MsUUFDQXRDLEVBQUF1QyxPQUNBdkMsRUFBQXdDLFFBR0F4QyxFQUFBOEMsYUFBQSxXQUNBQyxNQUFBLFdBQ0FWLEVBQUFXLFFBQUFoRCxFQUFBeUMsV0FDQXZCLEtBQUEsV0FDQStCLEVBQUEsV0FBQUMsT0FDQUQsRUFBQSxlQUFBRSxPQUFBLHVCQzVEQXJHLElBQUFVLFFBQUEsMEJBQUEsUUFBQSxLQUFBLFNBQUE0QyxFQUFBM0MsR0FFQSxRQUFBa0YsR0FBQUwsRUFBQWMsR0FDQSxHQUFBQyxHQUFBNUYsRUFBQTZGLE9BVUEsT0FUQWpGLFNBQUFDLElBQUEsZ0NBQUFnRSxFQUFBYyxHQUNBaEQsR0FDQVksT0FBQSxNQUNBQyxJQUFBLG9CQUNBMUIsUUFBQStDLEtBQUFBLEVBQUFpQixPQUFBSCxLQUNBbEMsS0FBQSxTQUFBakQsR0FDQW1ELEtBQUFuRCxFQUFBbUQsS0FDQWlDLEVBQUE3QixRQUFBdkQsRUFBQW1ELFFBRUFpQyxFQUFBRyxRQUdBLE9BQ0FwQyxRQUNBdUIsYUFBQUEsTUNqQkE3RixJQUFBTyxXQUFBLGtCQUFBLFNBQUEsWUFBQSxPQUFBLGdCQUFBLFFBQUEsZUFBQSxTQUFBMkMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQUwsRUFBQU0sY0FBQUQsRUFBQUMsY0FFQU4sRUFBQXlELE9BQUF0RCxFQUFBc0QsT0FDQXpELEVBQUEwRCxLQUFBdkQsRUFBQXVELEtBQ0ExRCxFQUFBMkQsUUFDQUMsWUFDQUMsWUFDQUMsYUFDQUMsWUFDQXJELGNBRUFWLEVBQUFnRSxZQUNBaEUsRUFBQVcsZUFFQVgsRUFBQVksbUJBQUEsRUFDQVosRUFBQWEsS0FBQSxTQUFBQyxFQUFBQyxHQUVBLE1BREExQyxTQUFBQyxJQUFBLGNBQUF5QyxHQUNBWCxHQUNBWSxPQUFBLE1BQ0FDLElBQUEsWUFDQTFCLFFBQUF3QixHQUFBQSxLQUNBRyxLQUFBLFNBQUFqRCxHQUVBK0IsRUFBQTJELE9BQUExRixFQUFBbUQsSUFDQSxJQUFBQyxHQUFBcEIsRUFBQVksTUFDQVMsVUFBQXRCLEVBQUFZLGtCQUNBeEQsWUFBQSwwQkFDQUMsV0FBQSxvQkFDQXlELEtBQUFBLEVBQ0FTLE1BQUF2QixFQUNBd0IsU0FDQUMsTUFBQSxXQUNBLE1BQUF6QixHQUFBMkQsVUFJQXRDLEdBQUFLLE9BQUFSLEtBQUEsU0FBQVMsR0FDQTNCLEVBQUE0QixTQUFBRCxHQUNBLFdBQ0F6QixFQUFBMkIsS0FBQSx1QkFBQSxHQUFBbEMsWUFLQUssRUFBQThCLGdCQUFBLFdBQ0E5QixFQUFBWSxtQkFBQVosRUFBQVksbUJBSUFaLEVBQUErQixLQUFBLFdBQ0ExRCxRQUFBQyxJQUFBLGlCQUFBMEIsRUFBQTJELFFBR0EzRCxFQUFBMkQsT0FBQTVDLElBc0JBMUMsUUFBQUMsSUFBQSxnQkFBQTBCLEVBQUEyRCxRQUNBdkQsR0FDQVksT0FBQSxNQUNBQyxJQUFBLFVBQ0FHLE1BQUF1QyxPQUFBM0QsRUFBQTJELFVBQ0F6QyxLQUFBLFNBQUFjLEdBQ0EzRCxRQUFBQyxJQUFBLHNCQUFBMEQsRUFBQVosTUFDQXBCLEVBQUEyRCxPQUFBNUMsR0FBQWlCLEVBQUFaLEtBQUFMLEdBQ0FmLEVBQUEyRCxPQUFBQyxTQUFBNUIsRUFBQVosS0FBQSxTQUFBWSxFQUFBWixLQUFBd0MsWUFDQTVELEVBQUEyRCxPQUFBRSxTQUFBN0IsRUFBQVosS0FBQSxTQUFBWSxFQUFBWixLQUFBeUMsWUFDQTdELEVBQUEyRCxPQUFBRyxVQUFBOUIsRUFBQVosS0FBQSxVQUFBWSxFQUFBWixLQUFBMEMsYUFDQTlELEVBQUEyRCxPQUFBSSxTQUFBOUIsU0FDQWpDLEVBQUEyRCxPQUFBSSxhQUVBL0QsRUFBQTJELE9BQUFJLFNBQUEvQixFQUFBWixLQUFBLFNBQUFZLEVBQUFaLEtBQUEyQyxZQUNBL0QsRUFBQTJELE9BQUFqRCxVQUFBdUIsU0FDQWpDLEVBQUEyRCxPQUFBakQsY0FFQVYsRUFBQTJELE9BQUFqRCxVQUFBc0IsRUFBQVosS0FBQSxVQUFBWSxFQUFBWixLQUFBVixnQkF2Q0FOLEdBQ0FZLE9BQUEsT0FDQUMsSUFBQSxVQUNBRyxNQUFBdUMsT0FBQTNELEVBQUEyRCxVQUNBekMsS0FBQSxTQUFBYyxHQUNBM0QsUUFBQUMsSUFBQSx5QkFBQTBELEVBQUFaLE1BQ0FwQixFQUFBMkQsT0FBQTVDLEdBQUFpQixFQUFBWixLQUFBTCxHQUNBZixFQUFBMkQsT0FBQUMsU0FBQTVCLEVBQUFaLEtBQUEsU0FBQVksRUFBQVosS0FBQXdDLFlBQ0E1RCxFQUFBMkQsT0FBQUUsU0FBQTdCLEVBQUFaLEtBQUEsU0FBQVksRUFBQVosS0FBQXlDLFlBQ0E3RCxFQUFBMkQsT0FBQUcsVUFBQTlCLEVBQUFaLEtBQUEsVUFBQVksRUFBQVosS0FBQTBDLGFBQ0E5RCxFQUFBMkQsT0FBQUksU0FBQTlCLFNBQ0FqQyxFQUFBMkQsT0FBQUksYUFFQS9ELEVBQUEyRCxPQUFBSSxTQUFBL0IsRUFBQVosS0FBQSxTQUFBWSxFQUFBWixLQUFBMkMsWUFDQS9ELEVBQUEyRCxPQUFBakQsVUFBQXVCLFNBQ0FqQyxFQUFBMkQsT0FBQWpELGNBRUFWLEVBQUEyRCxPQUFBakQsVUFBQXNCLEVBQUFaLEtBQUEsVUFBQVksRUFBQVosS0FBQVYsZ0JBNEJBVixFQUFBaUUsU0FBQSxXQUNBNUYsUUFBQUMsSUFBQSxjQUFBMEIsRUFBQWdFLFNBQUFoRSxFQUFBMkQsT0FBQUksVUFFQS9ELEVBQUFrRSxjQUNBbEUsRUFBQTJELE9BQUFJLFNBQUEvRCxFQUFBa0UsY0FBQWxFLEVBQUFnRSxTQUNBaEUsRUFBQWtFLGNBQUEsR0FHQWxFLEVBQUEyRCxPQUFBSSxTQUFBNUIsS0FBQW5DLEVBQUFnRSxVQUVBaEUsRUFBQWdFLGFBSUFoRSxFQUFBbUUsVUFBQSxTQUFBQyxHQUVBcEUsRUFBQWtFLGFBQUFFLEVBQ0FwRSxFQUFBZ0UsU0FBQWhFLEVBQUEyRCxPQUFBSSxTQUFBSyxJQUdBcEUsRUFBQXFFLFlBQUEsU0FBQUQsR0FDQS9GLFFBQUFDLElBQUEsd0JBQUE4RixFQUFBLFNBQUFwRSxFQUFBa0UsY0FDQWxFLEVBQUEyRCxPQUFBSSxTQUFBTyxPQUFBRixFQUFBLEdBQ0FBLEdBQUFwRSxFQUFBa0UsY0FDQTdGLFFBQUFDLElBQUEsY0FDQTBCLEVBQUF1RSxjQUVBbEcsUUFBQUMsSUFBQSxrQkFLQTBCLEVBQUF1RSxXQUFBLFdBQ0FsRyxRQUFBQyxJQUFBLGtCQUNBMEIsRUFBQWdFLFVBQ0FRLFVBQUEsR0FDQUMsU0FBQSxHQUNBQyxVQUFBLEdBQ0FDLE9BQUEsR0FDQUMsTUFBQSxJQUVBNUUsRUFBQWtFLGNBQUEsR0FJQWxFLEVBQUFrQyxZQUFBLFdBQ0FsQyxFQUFBMkQsT0FBQWpELFVBQUF5QixLQUFBbkMsRUFBQVcsYUFDQVgsRUFBQVcsbUJDcEpBN0QsSUFBQU8sV0FBQSxhQUFBLFNBQUEsUUFBQSxjQUFBLFlBQUEsYUFBQSxTQUFBMkMsRUFBQUksRUFBQXpDLEVBQUFELEVBQUFtSCxHQUNBN0UsRUFBQThFLE9BQUEsV0FDQTFFLEVBQUEyRSxLQUFBLFNBQUEvRSxFQUFBZ0YsTUFDQTlELEtBQUEsU0FBQWpELEdBQ0FOLEVBQUF5QixVQUFBbkIsRUFBQW1ELE1BQ0F5RCxFQUFBSSxLQUFBdEgsRUFBQW9DLFVBQ0FyQyxFQUFBUyxLQUFBLGlCQ0xBckIsSUFBQU8sV0FBQSxrQkFBQSxTQUFBLFFBQUEsZ0JBQUEsU0FBQTJDLEVBQUFJLEVBQUFELEdBQ0FILEVBQUFrRixhQUVBbEYsRUFBQW1GLFVBQUEsV0FFQWhGLEVBQUF3QyxhQUFBM0MsRUFBQWtGLFVBQUE5RCxNQUNBL0MsUUFBQUMsSUFBQSx5QkFBQTBCLEVBQUFrRixXQUVBbEYsRUFBQWtGLGlCQ1RBcEksSUFBQVUsUUFBQSxpQkFBQSxRQUFBLFNBQUE0QyxHQUNBLEdBQUFnRixNQUNBM0IsS0FDQWxELEtBQ0FtRCxLQUVBZixFQUFBLFNBQUFTLEdBQ0EsTUFBQWhELElBQ0FZLE9BQUEsTUFDQUMsSUFBQSxZQUNBMUIsUUFBQWdFLE9BQUFILEtBQ0FsQyxLQUFBLFNBQUFqRCxHQUNBbUgsRUFBQW5ILEVBQUFtRCxLQUNBaUUsRUFBQUQsR0FDQUUsRUFBQUYsR0FDQUcsRUFBQUgsTUFHQUMsRUFBQSxTQUFBRyxHQUNBLEdBQUFDLEdBQUEsU0FBQUQsR0FDQWpGLEVBQUErRCxPQUFBLEVBQUEvRCxFQUFBMEIsUUFDQXVELEVBQUFFLFFBQUEsU0FBQUMsR0FDQSxXQUFBQSxFQUFBckQsTUFDQS9CLEVBQUE0QixLQUFBd0QsS0FNQSxPQUZBRixHQUFBRCxHQUNBbkgsUUFBQUMsSUFBQSxzQkFBQWlDLEdBQ0FBLEdBR0FnRixFQUFBLFNBQUFDLEdBQ0EsR0FBQUksR0FBQSxTQUFBSixHQUNBL0IsRUFBQWEsT0FBQSxFQUFBYixFQUFBeEIsUUFDQXVELEVBQUFFLFFBQUEsU0FBQUMsR0FDQSxTQUFBQSxFQUFBckQsTUFDQW1CLEVBQUF0QixLQUFBd0QsS0FLQSxPQUZBQyxHQUFBSixHQUNBbkgsUUFBQUMsSUFBQSx5QkFBQW1GLEdBQ0FBLEdBR0E2QixFQUFBLFNBQUFFLEdBQ0EsR0FBQUssR0FBQSxTQUFBTCxHQUNBOUIsRUFBQVksT0FBQSxFQUFBWixFQUFBekIsUUFDQXVELEVBQUFFLFFBQUEsU0FBQUMsR0FDQSxTQUFBQSxFQUFBckQsTUFDQW9CLEVBQUF2QixLQUFBd0QsS0FLQSxPQUZBRSxHQUFBTCxHQUNBbkgsUUFBQUMsSUFBQSx1QkFBQW9GLEdBQ0FBLEdBSUFvQyxHQUNBUixRQUFBQSxFQUNBQyxVQUFBQSxFQUNBRixhQUFBQSxFQUNBMUMsYUFBQUEsRUFDQXlDLFFBQUFBLEVBQ0E3RSxVQUFBQSxFQUNBa0QsT0FBQUEsRUFDQUMsS0FBQUEsRUFFQSxPQUFBb0MsTUNsRUFoSixJQUFBTyxXQUFBLHFCQUFBLFNBQUEsaUJBQUEsU0FBQTJDLEVBQUErRixHQUVBL0YsRUFBQWdHLEdBQUEsV0FDQUQsRUFBQUUsTUFBQWpHLEVBQUE0QixTQUFBc0UsT0FHQWxHLEVBQUFtRyxPQUFBLFdBQ0FKLEVBQUFLLFFBQUEsY0NYQXRKLElBQUFPLFdBQUEsV0FBQSxjQUFBLFNBQUEsYUFBQSxZQUFBLFNBQUFNLEVBQUFxQyxFQUFBNkUsRUFBQW5ILEdBQ0FtSCxFQUFBSSxLQUFBdEgsRUFBQW9DLFVBRUE4RSxFQUFBSSxNQUFBSixFQUFBSSxLQUFBb0IsVUFDQTNJLEVBQUFTLEtBQUEsU0FHQTZCLEVBQUFGLE9BQUEsV0FDQW5DLEVBQUFtQyxTQUNBK0UsRUFBQUksS0FBQXRILEVBQUFvQyxVQUNBckMsRUFBQVMsS0FBQSxTQ1RBckIsSUFBQU8sV0FBQSw0QkFBQSxxQkFBQSxTQUFBLFNBQUFnRixFQUFBckMsR0FJQUEsRUFBQXNHLFlBRUF0RyxFQUFBdUcsV0FBQSxXQUNBbEksUUFBQUMsSUFBQSxnQkFBQTBCLEVBQUFzRyxTQUFBRSxPQUVBbkUsRUFBQW9FLFNBQUF6RyxFQUFBc0csU0FBQUUsT0FFQW5JLFFBQUFDLElBQUEsU0FBQStELEVBQUFxRSxTQUVBMUcsRUFBQXNHLGdCQ2JBeEosSUFBQTBCLFFBQUEsc0JBQUEseUJBQUEsUUFDQSxTQUFBNEQsRUFBQWhDLEdBQ0ExQixLQUFBaUksa0JBQ0FqSSxLQUFBZ0ksUUFBQSxhQUNBaEksS0FBQWtJLGtCQUVBQyxpQkFDQSxxQkFFQUMsV0FBQSxPQUNBQyxVQUFBLFFBQ0FDLGFBQUEsWUFDQUMsWUFDQUMsS0FBQSxjQUlBTCxpQkFDQSxxQkFFQUMsV0FBQSxPQUNBQyxVQUFBLFNBQ0FDLGFBQUEsWUFDQUMsWUFDQUMsS0FBQSxlQUlBeEksS0FBQStILFNBQUEsU0FBQVUsR0FFQSxNQURBOUksU0FBQUMsSUFBQSx3Q0FBQTZJLEdBQ0EvRyxFQUFBMkUsS0FBQSxtQkFBQW9DLEtBQUFBLElBQUFqRyxLQUFBLFNBQUFqRCxHQUNBSSxRQUFBQyxJQUFBTCxFQUFBbUQsTUFDQXNGLFFBQUF6SSxFQUFBbUQsS0FDQS9DLFFBQUFDLElBQUEsT0FBQW9JLFVBQ0EsU0FBQXRGLEdBQ0EvQyxRQUFBQyxJQUFBOEMsTUFHQTFDLEtBQUFzRSxRQUFBLFNBQUFvRSxHQUNBMUksS0FBQTJJLFlBQ0FULGdCQUFBbEksS0FBQWtJLGdCQUNBRixRQUFBaEksS0FBQWdJLFNBRUFySSxRQUFBQyxJQUFBLGtCQUNBRCxRQUFBQyxJQUFBLG9CQUFBSSxLQUFBa0ksZ0JBQUEsaUJBQUFsSSxNQUFBa0ksaUJBQ0FVLEVBQUFGLEdBQ0FoSCxFQUFBMkUsS0FBQSx1QkFBQXJHLEtBQUEySSxZQUFBbkcsS0FBQSxTQUFBRSxFQUFBbEQsRUFBQUwsRUFBQVosR0FDQW9CLFFBQUFDLElBQUEsVUFDQUQsUUFBQUMsSUFBQThDLEdBQ0EvQyxRQUFBQyxJQUFBLG9CQUFBSSxLQUFBa0ksZ0JBQUEsaUJBQUFsSSxNQUFBa0ksbUJBSUEsSUFBQVUsR0FBQSxTQUFBQyxHQUNBdEUsRUFBQSxZQUFBdUUsS0FDQSxXQUNBLEdBQUF6RyxJQUFBd0csRUFBQUUsTUFBQSxDQUNBLEdBQUFDLElBRUFiLGlCQUNBNUQsRUFBQXZFLE1BQUErSSxPQUVBWCxXQUFBN0QsRUFBQXZFLE1BQUE4RixVQUNBdUMsVUFBQTlELEVBQUF2RSxNQUFBK0YsU0FDQXVDLGFBQUEvRCxFQUFBdkUsTUFBQXlDLFFBQ0E4RixZQUNBQyxLQUFBakUsRUFBQXZFLE1BQUF3SSxPQUdBTixpQkFBQXpFLEtBQUF1RixVQ3RFQTVLLElBQUFPLFdBQUEscUJBQUEscUJBQUEsU0FBQSxRQUFBLFNBQUFnRixFQUFBckMsRUFBQUksR0FJQUosRUFBQTJILFlBRUEzSCxFQUFBOEMsYUFBQSxXQUNBekUsUUFBQUMsSUFBQSxnQkFBQWlELE1BQUFvRyxTQUFBbkIsT0FFQW5FLEVBQUFXLFVBWUFoRCxFQUFBMkgsZ0JDbkJBN0ssSUFBQU8sV0FBQSxnQkFBQSxTQUFBLFFBQUEsWUFBQSxTQUFBMkMsRUFBQUksRUFBQTFDLEdBQ0FzQyxFQUFBOEUsT0FBQSxXQUNBekcsUUFBQUMsSUFBQSxnQkFDQUQsUUFBQUMsSUFBQSw2QkFBQTBCLEVBQUFnRixNQUNBNUUsRUFBQTJFLEtBQUEsWUFBQS9FLEVBQUFnRixNQUNBOUQsS0FBQSxTQUFBakQsR0FDQUksUUFBQUMsSUFBQUwsR0FDQVAsRUFBQVMsS0FBQSxnQkNUQXJCLElBQUFPLFdBQUEsYUFBQSxTQUFBLFFBQUEsWUFBQSxTQUFBMkMsRUFBQUksRUFBQTFDLEdBQ0FzQyxFQUFBOEUsT0FBQSxXQUNBekcsUUFBQUMsSUFBQSxpQkFBQTBCLEVBQUFnRixNQUNBNUUsRUFBQXdILElBQUEsU0FBQTVILEVBQUFnRixNQUNBOUQsS0FBQSxTQUFBakQsR0FDQUksUUFBQUMsSUFBQUwsR0FDQVAsRUFBQVMsS0FBQSxnQkNOQXJCLElBQUEwQixRQUFBLGdCQUFBLFdBRUEsR0FBQThCLEdBQUEsU0FBQWdDLEVBQUF2QixHQUdBLEdBQUE4RyxHQUNBQyxFQUFBLEVBQUE3RSxFQUFBLElBQUFsQyxJQUFBLENBRUEsUUFEQTFDLFFBQUFDLElBQUEsYUFBQXdKLEVBQUF4RixFQUFBdkIsR0FDQXVCLEdBQ0EsSUFBQSxPQUNBLElBQUEsT0FDQSxJQUFBLFFBRUF1RixFQUFBLG1CQUNBLE1BQ0EsS0FBQSxXQUNBQSxFQUFBLCtCQUNBLE1BQ0EsS0FBQSxVQUNBQSxFQUFBLG9DQUNBLE1BQ0EsS0FBQSxNQUNBQSxFQUFBLFlBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEsNkRBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEsa0RBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEscURBQ0EsTUFDQSxLQUFBLE1BQ0FBLEVBQUEsb0JBQ0EsTUFDQSxLQUFBLE9BQ0FBLEVBQUEsNERBQ0EsTUFDQSxLQUFBLFlBQ0FBLEVBQUEsdUVBQ0EsTUFDQSxLQUFBLFNBQ0FBLEVBQUEsMkJBQ0EsTUFDQSxTQUVBLE1BREF4SixTQUFBQyxJQUFBLHlCQUNBLEdBS0F3SixFQUFBQyxLQUFBLGFBQUFELEVBQUFFLE1BQUFDLE9BQUFoRyxPQUFBLEtBRUE0RixFQUFBSyxLQUFBSixFQUFBRSxNQUFBQyxTQU1BSCxFQUFBSyxZQUFBLFdBQUFKLEtBQUEsY0FBQUQsRUFBQTFHLEtBQUEsZ0JBQ0EvQyxRQUFBQyxJQUFBZ0UsRUFBQSxlQUFBdUYsS0FMQUMsRUFBQU0sU0FBQSxXQUFBTCxLQUFBLGNBQUFELEVBQUExRyxLQUFBLFlBQUE0RyxJQUFBLElBQ0EzSixRQUFBQyxJQUFBZ0UsRUFBQSxlQUFBdUYsS0FTQSxRQUNBdkgsY0FBQUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbGVvJywgWyduZ1JvdXRlJywgJ25nQW5pbWF0ZScsICd1aS5ib290c3RyYXAnLCBcImNoZWNrbGlzdC1tb2RlbFwiXSk7XG5cbnZhciBwcmV0dHlEYXRlID0gXCJNTS9ERC9ZWWdZWVwiO1xudmFyIGZ1bGxEYXRlID0gXCJNTS9ERC9ZWVlZIGg6bW06c3MgYVwiO1xuXG5mdW5jdGlvbiBmb3JtYXREYXRlcyAoZGF0ZSkge1xuXHRyZXR1cm4ge1xuXHRcdGZ1bGw6IG1vbWVudChkYXRlKS5mb3JtYXQoZnVsbERhdGUpLFxuXHRcdHByZXR0eTogbW9tZW50KGRhdGUpLmZvcm1hdChwcmV0dHlEYXRlKVxuXHR9O1xufVxuXG5hcHAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLFxuICAgIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyLlxuICAgICAgICAgICAgd2hlbignLycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9sb2dpbi5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvc2VhcmNoJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9zZWFyY2guaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9jb250YWN0TGlzdCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvY29udGFjdExpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2FkZGZhbWlseScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvYWRkZmFtaWx5Lmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnZWRpdEZhbWlseUN0cmwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9hZGRjb3JwJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9hZGRjb3JwLmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnZWRpdENvcnBDdHJsJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvY29udGFjdGxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2NvbnRhY3RsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIG90aGVyd2lzZSh7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogJy9zZWFyY2gnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSk7XG5cblxuXG5cbiIsImFwcC5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLCBbJyRxJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZWQoKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyBhdXRoU2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pIiwiYXBwLnNlcnZpY2UoJ2F1dGhTZXJ2aWNlJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpIHtcblxuICAgIHRoaXMucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmF0b2IoYmFzZTY0KSk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4ge307XG4gICAgfTtcblxuICAgIHRoaXMuc2F2ZVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuID0gdG9rZW47XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1NhdmVkIHRva2VuOicsJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4pO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIHRoaXMuaXNBdXRoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUp3dCh0b2tlbik7XG4gICAgICAgICAgICB2YXIgbm90RXhwaXJlZCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8PSBwYXJhbXMuZXhwO1xuICAgICAgICAgICAgaWYgKCFub3RFeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub3RFeHBpcmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIC8vIGV4cG9zZSB1c2VyIGFzIGFuIG9iamVjdFxuICAgIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VKd3QodGhpcy5nZXRUb2tlbigpKVxuICAgIH07XG59XSk7IiwiLy9lZGl0IGNvcnBvcmF0aW9uIG1vZGFsIHRlbXBsYXRlXG5hcHAuY29udHJvbGxlcignZWRpdENvcnBDdHJsJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsJywgJyRsb2cnLCAnUmVzdWx0U2VydmljZScsICckaHR0cCcsICd2YWxpZFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwLCB2YWxpZFNlcnZpY2UpIHtcblxuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcblx0JHNjb3BlLnZhbGlkYXRlSW5wdXQgPSB2YWxpZFNlcnZpY2UudmFsaWRhdGVJbnB1dDtcblx0Ly9zZW5kcyB0aGUgY29tcGFuaWVzIGFmdGVyIHRoZSByZXN1bHRzIGhhdmUgYmVlbiBvcmdhbml6ZWRcblx0JHNjb3BlLmNvbXBhbmllcyA9IFJlc3VsdFNlcnZpY2UuY29tcGFuaWVzO1xuXHQkc2NvcGUuY29ycCA9IHtcblx0XHRjb250YWN0OiB7fSxcblx0XHRkb25hdGlvbnM6IFtdXG5cdH07XG5cdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuXG5cdCRzY29wZS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIGlkKSB7XG5cdFx0Y29uc29sZS5sb2coJ2NvcnAgY2FsbCcsIGlkKTtcblx0XHRyZXR1cm4gJGh0dHAoe1xuXHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdHVybDogJy4uL2NvcnBvcmF0aW9uJyxcblx0XHRcdHBhcmFtczoge2lkOiBpZH1cblx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG5cdFx0XHQkc2NvcGUuY29tcGFueSA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0XHRcdFx0YW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9lZGl0Y29ycC5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsSW5zdGFuY2VDdHJsJyxcblx0XHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdFx0c2NvcGU6ICRzY29wZSxcblx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdGl0ZW1zOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJHNjb3BlLmNvbXBhbnk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XG5cdFx0XHRcdCRzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkSXRlbTtcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdCRzY29wZS50b2dnbGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gISRzY29wZS5hbmltYXRpb25zRW5hYmxlZDtcblx0fTtcblxuXHQvLyBzYXZlIGNvcnBcblx0JHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJTYXZlIHN1Ym1pdHRlZFwiLCAkc2NvcGUuY29ycCk7XG5cdFx0Ly9hbGVydChcIlN1Ym1pdHRlZFwiKTtcblx0XHQvLyBpZiBoYXMgaWQsIHRoZW4gcHV0XG5cdFx0aWYoISRzY29wZS5jb3JwLmlkKSB7XG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR1cmw6ICcvY29ycG9yYXRpb24nLFxuXHRcdFx0XHRkYXRhOiB7Y29ycDogJHNjb3BlLmNvcnB9XG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJQb3N0ZWQgY29ycCwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdCRzY29wZS5jb3JwLmluZm8gPSAocmVzLmRhdGEuaW5mbykgPyByZXMuZGF0YS5pbmZvIDoge307XG5cdFx0XHRcdCRzY29wZS5jb250YWN0ID0gKHJlcy5kYXRhLmNvbnRhY3QpID8gcmVzLmRhdGEuY29udGFjdCA6IHt9O1xuXHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XG5cdFx0XHRcdGlmKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vIGluc2VydCBjb3JwIC0gaGFzIG5vIGlkXG5cdFx0XHRjb25zb2xlLmxvZyhcImluc2VydCBjb3JwXCIsICRzY29wZS5jb3JwKTtcblx0XHRcdCRodHRwKHtcblx0XHRcdFx0bWV0aG9kOiAnUFVUJyxcblx0XHRcdFx0dXJsOiAnL2NvcnBvcmF0aW9uJyxcblx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGNvcnAsIGdvdCBpZCBcIiwgcmVzLmRhdGEpO1xuXG5cdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdCRzY29wZS5jb3JwLmluZm8gPSAocmVzLmRhdGEuaW5mbykgPyByZXMuZGF0YS5pbmZvIDoge307XG5cdFx0XHRcdCRzY29wZS5jb250YWN0ID0gKHJlcy5kYXRhLmNvbnRhY3QpID8gcmVzLmRhdGEuY29udGFjdCA6IHt9O1xuXHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XG5cdFx0XHRcdGlmKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQvLyBhZGRzIGRvbmF0aW9uIHRvIGZhbWlseSBvYmplY3Rcblx0JHNjb3BlLmFkZERvbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiYWRkZWQgZG9uYXRpb25cIiwgJHNjb3BlLm5ld0RvbmF0aW9uLCAkc2NvcGUuY29ycC5kb25hdGlvbnMpO1xuXHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucy5wdXNoKCRzY29wZS5uZXdEb25hdGlvbik7XG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdH07XG5cbn1dKTsiLCJhcHAuY29udHJvbGxlcignY3JlYXRlTGlzdFNlYXJjaCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnbmV3Q29udGFjdExpc3REYXRhJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsbmV3Q29udGFjdExpc3REYXRhKSB7XG4gICAgJHNjb3BlLnR5cGUgPXt9O1xuICAgICRzY29wZS5hZ2U9e307XG4gICAgJHNjb3BlLnppcD17fTtcblxuXG4gICAgJHNjb3BlLmVtYWlsTGlzdCA9IFsgXTtcblxuICAgICRzY29wZS5zZWFyY2hMaXN0QnRuID0gZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgLy9USElTIFdPUktTICAtLSB3aWxsIHNlYXJjaCBieSB6aXBcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICd6aXBDaycpIHtcblxuICAgICAgICAgICAgQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ3ppcCcsICRzY29wZS56aXAuZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmVtYWlsTGlzdCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy9USElTIFdPUktTIC0gd2lsbCBzZWFyY2ggYnkgYWdlXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnYWdlQ2snKSB7XG4gICAgICAgICAgICB2YXIgYWdlID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2FnZScsICRzY29wZS5hZ2UuZGF0YSk7XG4gICAgICAgICAgICBhZ2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL1RISVMgV09SS1MgLS1nZXQgYWxsIGZhbWlsaWVzIGlmIGZhbSBpcyB0cnVlXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnZmFtJykge1xuICAgICAgICAgICAgdmFyIGZhbSA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdmYW1pbHknLCAnJyk7XG4gICAgICAgICAgICBmYW0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCBhbGwgY29ycCBpZiBjb3JwIGlzIHRydWVcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdjb3JwJykge1xuICAgICAgICAgICAgdmFyIGNvbXAgPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnY29tcGFueScsICcnKTtcbiAgICAgICAgICAgIGNvbXAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2VtcHR5IHRoZSBzZWFyY2ggYm94XG4gICAgICAgJHNjb3BlLnR5cGU9e307XG4gICAgICAgICRzY29wZS5hZ2U9e307XG4gICAgICAgICRzY29wZS56aXA9e307XG5cbiAgICB9O1xuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBhbGVydCgnd29ya2luZycpO1xuICAgICAgICBuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgkc2NvcGUuZW1haWxMaXN0KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJChcIi5zZWFyY2hcIikuaGlkZSgpO1xuICAgICAgICAgICAgICAgICQoXCIuZW5kTWVzc2FnZVwiKS5hcHBlbmQoXCI8aDI+c2VudDwvaDI+XCIpO1xuICAgICAgICAgICAgfSk7XG4gIH07XG5cbn1dKTtcblxuXG4iLCJhcHAuZmFjdG9yeSgnQ29udGFjdExpc3REYXRhU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG5cbiAgICBmdW5jdGlvbiBtYWtlRGF0YUNhbGwodHlwZSwgcGFzc2VkRGF0YSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiB0aGUgbWFrZSBkYXRhIGNhbGwnLCB0eXBlLCBwYXNzZWREYXRhKTtcbiAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy4uL2NyZWF0ZU1haWxMaXN0JyxcbiAgICAgICAgICAgIHBhcmFtczoge3R5cGU6IHR5cGUsIHNlYXJjaDogcGFzc2VkRGF0YX1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBtYWtlRGF0YUNhbGw6IG1ha2VEYXRhQ2FsbFxuICAgIH07XG5cblxufV0pOyIsIi8vZWRpdCBmYW1pbHkgbW9kYWwgdGVtcGxhdGVcbmFwcC5jb250cm9sbGVyKCdlZGl0RmFtaWx5Q3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCAndmFsaWRTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsLCAkbG9nLCBSZXN1bHRTZXJ2aWNlLCAkaHR0cCwgdmFsaWRTZXJ2aWNlKSB7XG5cdC8vIHNldHMgdmFsaWRhdGlvbiBmcm9tIHNlcnZpY2UgZm9yIGRvbSBjYWxsc1xuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xuXHQvL3NlbmRzIHRoZSBhZHVsdHMgYW5kIGtpZHMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxuXHQkc2NvcGUuYWR1bHRzID0gUmVzdWx0U2VydmljZS5hZHVsdHM7XG5cdCRzY29wZS5raWRzID0gUmVzdWx0U2VydmljZS5raWRzO1xuXHQkc2NvcGUuZmFtaWx5ID0ge1xuXHRcdGFkdWx0T25lOiB7fSxcblx0XHRhZHVsdFR3bzoge30sXG5cdFx0ZW1lcmdlbmN5OiB7fSxcblx0XHRjaGlsZHJlbjogW10sXG5cdFx0ZG9uYXRpb25zOiBbXVxuXHR9O1xuXHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcblx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cblx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcblx0JHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2l6ZSwgaWQpIHtcblx0XHRjb25zb2xlLmxvZygnZmFtaWx5IGNhbGwnLCBpZCk7XG5cdFx0cmV0dXJuICRodHRwKHtcblx0XHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0XHR1cmw6ICcuLi9mYW1pbHknLFxuXHRcdFx0cGFyYW1zOiB7aWQ6IGlkfVxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cblx0XHRcdCRzY29wZS5mYW1pbHkgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG5cdFx0XHRcdGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvZWRpdGZhbWlseS5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsSW5zdGFuY2VDdHJsJyxcblx0XHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdFx0c2NvcGU6ICRzY29wZSxcblx0XHRcdFx0cmVzb2x2ZToge1xuXHRcdFx0XHRcdGl0ZW1zOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJHNjb3BlLmZhbWlseTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XG5cdFx0XHRcdCRzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkSXRlbTtcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdCRzY29wZS50b2dnbGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gISRzY29wZS5hbmltYXRpb25zRW5hYmxlZDtcblx0fTtcblxuXHQvLyBzYXZlIGZhbWlseVxuXHQkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcIlNhdmUgc3VibWl0dGVkXCIsICRzY29wZS5mYW1pbHkpO1xuXHRcdC8vYWxlcnQoXCJTdWJtaXR0ZWRcIik7XG5cdFx0Ly8gaWYgaGFzIGlkLCB0aGVuIHB1dFxuXHRcdGlmKCEkc2NvcGUuZmFtaWx5LmlkKSB7XG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR1cmw6ICcvZmFtaWx5Jyxcblx0XHRcdFx0ZGF0YToge2ZhbWlseTogJHNjb3BlLmZhbWlseX1cblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlBvc3RlZCBmYW1pbHksIGdvdCBpZCBcIiwgcmVzLmRhdGEpO1xuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcblx0XHRcdFx0JHNjb3BlLmZhbWlseS5hZHVsdFR3byA9IChyZXMuZGF0YS5hZHVsdFR3bykgPyByZXMuZGF0YS5hZHVsdFR3byA6IHt9O1xuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmVtZXJnZW5jeSA9IChyZXMuZGF0YS5lbWVyZ2VuY3kpID8gcmVzLmRhdGEuZW1lcmdlbmN5IDoge307XG5cdFx0XHRcdGlmKCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4gPSAocmVzLmRhdGEuY2hpbGRyZW4pID8gcmVzLmRhdGEuY2hpbGRyZW4gOiBbXTtcblx0XHRcdFx0aWYoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDogW107XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHQvLyBpbnNlcnQgZmFtaWx5IC0gaGFzIG5vIGlkXG5cdFx0XHRjb25zb2xlLmxvZyhcImluc2VydCBmYW1pbHlcIiwgJHNjb3BlLmZhbWlseSk7XG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BVVCcsXG5cdFx0XHRcdHVybDogJy9mYW1pbHknLFxuXHRcdFx0XHRkYXRhOiB7ZmFtaWx5OiAkc2NvcGUuZmFtaWx5fVxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuaWQgPSByZXMuZGF0YS5pZDtcblx0XHRcdFx0JHNjb3BlLmZhbWlseS5hZHVsdE9uZSA9IChyZXMuZGF0YS5hZHVsdE9uZSkgPyByZXMuZGF0YS5hZHVsdE9uZSA6IHt9O1xuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuZW1lcmdlbmN5ID0gKHJlcy5kYXRhLmVtZXJnZW5jeSkgPyByZXMuZGF0YS5lbWVyZ2VuY3kgOiB7fTtcblx0XHRcdFx0aWYoJHNjb3BlLmZhbWlseS5jaGlsZHJlbi5sZW5ndGgpIHtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IChyZXMuZGF0YS5jaGlsZHJlbikgPyByZXMuZGF0YS5jaGlsZHJlbiA6IFtdO1xuXHRcdFx0XHRpZigkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiBbXTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQvLyBmb3IgYXBwZW5kaW5nIGNoaWxkcmVuIHRvIG1vZGVsIGJlZm9yZSBzYXZpbmcgbmV3IGZhbWlseVxuXHQkc2NvcGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJjaGlsZCBhZGRlZFwiLCAkc2NvcGUubmV3Q2hpbGQsICRzY29wZS5mYW1pbHkuY2hpbGRyZW4pO1xuXHRcdC8vIGlmIHRydWUsIHRoZW4gdXBkYXRlIHRoYXQgaW5kZXhcblx0XHRpZigkc2NvcGUuZWRpdGluZ0NoaWxkKSB7XG5cdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuWyRzY29wZS5lZGl0aW5nQ2hpbGRdID0gJHNjb3BlLm5ld0NoaWxkO1xuXHRcdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vIGVsc2UgcHVzaCB0byBhcnJheVxuXHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5wdXNoKCRzY29wZS5uZXdDaGlsZCk7XG5cdFx0fVxuXHRcdCRzY29wZS5uZXdDaGlsZCA9IHt9O1xuXHR9O1xuXG5cdC8vIGVkaXQgY2hpbGQgb24gdGhlIGFkZCBjaGlsZHJlbiB0YWIgb2YgYWRkIGZhbWlseVxuXHQkc2NvcGUuZWRpdENoaWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0Ly8gc2F2ZSBpbmRleCBvZiBjaGlsZCBlZGl0aW5nXG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGluZGV4O1xuXHRcdCRzY29wZS5uZXdDaGlsZCA9ICRzY29wZS5mYW1pbHkuY2hpbGRyZW5baW5kZXhdO1xuXHR9O1xuXG5cdCRzY29wZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdGNvbnNvbGUubG9nKFwiaW4gcmVtb3ZlIGNoaWxkIGluZGV4XCIsIGluZGV4LCBcIiBlZGl0IFwiLCAkc2NvcGUuZWRpdGluZ0NoaWxkKTtcblx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG5cdFx0aWYoaW5kZXggPT0gJHNjb3BlLmVkaXRpbmdDaGlsZCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJlZGl0IG1hdGNoXCIpO1xuXHRcdFx0JHNjb3BlLmNsZWFyQ2hpbGQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIm5vIGVkaXQgbWF0Y2hcIik7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGNsZWFycyB0ZXh0IGJveGVzIGluIGFkZCBmYW1pbHktPmNoaWxkcmVuIHRhYlxuXHQkc2NvcGUuY2xlYXJDaGlsZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcImluIGNsZWFyIGNoaWxkXCIpO1xuXHRcdCRzY29wZS5uZXdDaGlsZCA9IHtcblx0XHRcdGZpcnN0TmFtZTogJycsXG5cdFx0XHRsYXN0TmFtZTogJycsXG5cdFx0XHRiaXJ0aGRhdGU6ICcnLFxuXHRcdFx0c2Nob29sOiAnJyxcblx0XHRcdG5vdGVzOiAnJ1xuXHRcdH07XG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGZhbHNlO1xuXHR9O1xuXG5cdC8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxuXHQkc2NvcGUuYWRkRG9uYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMucHVzaCgkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHR9O1xuXG5cdC8vLy8gcHJldmVudCBhY2NpZGVudGFsIGJhY2tzXG5cdC8vJHNjb3BlLiRvbignJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKCBldmVudCwgb2xkVXJsICkge1xuXHQvL1x0Y29uc29sZS5sb2coXCJvbGQgdXJsOiBcIiwgb2xkVXJsKTtcblx0Ly9cdGlmKC8oYWRkZmFtaWx5KS8udGVzdChvbGRVcmwpKSB7XG5cdC8vXHRcdHZhciBhbnN3ZXIgPSBjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxlYXZlIHRoaXMgcGFnZT9cIik7XG5cdC8vXHRcdGlmICghYW5zd2VyKSB7XG5cdC8vXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0Ly9cdFx0fVxuXHQvL1x0fVxuXHQvL30pO1xuXG59XSk7IiwiLy9jb250cm9sbGVycyBmb3IgbG9naW5cbmFwcC5jb250cm9sbGVyKCdsb2dpbkN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsICdhdXRoU2VydmljZScsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIGF1dGhTZXJ2aWNlLCAkbG9jYXRpb24sICRyb290U2NvcGUpe1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAkaHR0cC5wb3N0KCcvbG9naW4nLCAkc2NvcGUuZm9ybSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLnNhdmVUb2tlbihyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvc2VhcmNoXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbn1dKTtcbiIsIlxuLy9UaGlzIHNob3VsZCBnZXQgdGhlIHNlYXJjaCBpdGVtXG5hcHAuY29udHJvbGxlcignc2VhcmNoRnVuY3Rpb24nLCBbJyRzY29wZScsICckaHR0cCcsICdSZXN1bHRTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFJlc3VsdFNlcnZpY2UpIHtcbiAgICAkc2NvcGUuZm9ybUlucHV0PXt9O1xuXG4gICAgJHNjb3BlLnNlYXJjaEJ0biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9wYXNzZXMgaW4gc2VhcmNoIHRleHQgdG8gc2VydmljZVxuICAgICAgIFJlc3VsdFNlcnZpY2UubWFrZURhdGFDYWxsKCRzY29wZS5mb3JtSW5wdXQuZGF0YSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIHRoZSBpbnB1dCB0ZXh0JywgJHNjb3BlLmZvcm1JbnB1dCk7XG4gICAgICAgIC8vZW1wdHlzIHRoZSBzZWFyY2ggYm94XG4gICAgICAgICRzY29wZS5mb3JtSW5wdXQ9e307XG4gICAgfTtcblxufV0pO1xuIiwiLy9UaGlzIHNlcnZpY2Ugc2hvdWxkIHBhc3MgZGF0YSBiZXR3ZWVuIGNvbnRyb2xsZXJzXG5hcHAuZmFjdG9yeSgnUmVzdWx0U2VydmljZScsIFsnJGh0dHAnLGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgYWR1bHRzID0gW107XG4gICAgdmFyIGNvbXBhbmllcyA9IFtdO1xuICAgIHZhciBraWRzID0gW107XG5cbiAgICB2YXIgbWFrZURhdGFDYWxsID0gZnVuY3Rpb24ocGFzc2VkRGF0YSkge1xuICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy4uL3NlYXJjaCcsXG4gICAgICAgICAgICBwYXJhbXM6e3NlYXJjaDpwYXNzZWREYXRhfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICBnZXRDb21wYW5pZXMocmVzdWx0cyk7XG4gICAgICAgICAgICBnZXRLaWRzKHJlc3VsdHMpO1xuICAgICAgICAgICAgZ2V0QWR1bHRzKHJlc3VsdHMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHZhciBnZXRDb21wYW5pZXMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICB2YXIgZ2V0RWxlbWVudDEgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAgY29tcGFuaWVzLnNwbGljZSgwLGNvbXBhbmllcy5sZW5ndGgpO1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdjb21wYW55JylcbiAgICAgICAgICAgICAgICBjb21wYW5pZXMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0RWxlbWVudDEoYXJyYXkpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBnZXRFbGVtZW50MScsY29tcGFuaWVzKTtcbiAgICAgICAgcmV0dXJuIGNvbXBhbmllc1xuICAgIH07XG5cbiAgICB2YXIgZ2V0QWR1bHRzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgdmFyIGdldEVsZW1lbnQyID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgICAgIGFkdWx0cy5zcGxpY2UoMCxhZHVsdHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnYWR1bHQnKVxuICAgICAgICAgICAgICAgICAgICBhZHVsdHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIGdldEVsZW1lbnQyKGFycmF5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgaW4gZ2V0RWxlbWVudDInLCBhZHVsdHMpO1xuICAgICAgICByZXR1cm4gYWR1bHRzXG4gICAgfTtcblxuICAgIHZhciBnZXRLaWRzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgdmFyIGdldEVsZW1lbnQzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgICAgIGtpZHMuc3BsaWNlKDAsa2lkcy5sZW5ndGgpO1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdjaGlsZCcpXG4gICAgICAgICAgICAgICAgICAgIGtpZHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIGdldEVsZW1lbnQzKGFycmF5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgZ2V0RWxlbWVudHMzJywga2lkcyk7XG4gICAgICAgIHJldHVybiBraWRzXG4gICAgfTtcblxuICAgIC8vcHVibGljXG4gICAgdmFyIHB1YmxpY0FwaSA9IHtcbiAgICAgICAgZ2V0S2lkczogZ2V0S2lkcyxcbiAgICAgICAgZ2V0QWR1bHRzOiBnZXRBZHVsdHMsXG4gICAgICAgIGdldENvbXBhbmllczogZ2V0Q29tcGFuaWVzLFxuICAgICAgICBtYWtlRGF0YUNhbGw6IG1ha2VEYXRhQ2FsbCxcbiAgICAgICAgcmVzdWx0czogcmVzdWx0cyxcbiAgICAgICAgY29tcGFuaWVzOiBjb21wYW5pZXMsXG4gICAgICAgIGFkdWx0czogYWR1bHRzLFxuICAgICAgICBraWRzOiBraWRzXG4gICAgfTtcbiAgICByZXR1cm4gcHVibGljQXBpO1xufV0pOyIsIi8vIFBsZWFzZSBub3RlIHRoYXQgJG1vZGFsSW5zdGFuY2UgcmVwcmVzZW50cyBhIG1vZGFsIHdpbmRvdyAoaW5zdGFuY2UpIGRlcGVuZGVuY3kuXG4vLyBJdCBpcyBub3QgdGhlIHNhbWUgYXMgdGhlICR1aWJNb2RhbCBzZXJ2aWNlIHVzZWQgYWJvdmUuXG5cbi8vbmVlZGVkIGZvciBtb2RhbD8/IHByZXR0eSBzdXJlXG5hcHAuY29udHJvbGxlcignTW9kYWxJbnN0YW5jZUN0cmwnLFsnJHNjb3BlJywnJG1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSkge1xuXG4gICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUuc2VsZWN0ZWQuaXRlbSk7XG4gICAgfTtcblxuICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuICAgIH07XG59XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBbJ2F1dGhTZXJ2aWNlJywnJHNjb3BlJywnJHJvb3RTY29wZScsJyRsb2NhdGlvbicsIGZ1bmN0aW9uKGF1dGhTZXJ2aWNlLCAkc2NvcGUsICRyb290U2NvcGUsICRsb2NhdGlvbil7XG4gICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuXG4gICAgaWYoJHJvb3RTY29wZS51c2VyICYmICRyb290U2NvcGUudXNlci51c2VybmFtZSl7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvaG9tZScpO1xuICAgIH1cblxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG4gICAgfVxufV0pO1xuIiwiLy8gQWpheCBmb3IgY3JlYXRpbmcgdGhlIGNvbnRhY3QgbGlzdCBpbiBjb25zdGFudCBjb250YWN0XG5hcHAuY29udHJvbGxlcignbmV3Q29udGFjdExpc3RDb250cm9sbGVyJyxbJ25ld0NvbnRhY3RMaXN0RGF0YScsJyRzY29wZScsIGZ1bmN0aW9uKG5ld0NvbnRhY3RMaXN0RGF0YSwgJHNjb3BlKSB7XG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcblxuXG4gICAgJHNjb3BlLmxpc3RuYW1lID0ge307XG5cbiAgICAkc2NvcGUuY3JlYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIGxpc3Q6IFwiICsgJHNjb3BlLmxpc3RuYW1lLmlucHV0KTtcbiAgICAgICAgLy9wYXNzZXMgbGlzdCBuYW1lIHNlcnZpY2VcbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvc3RMaXN0KCRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2xpc3QgIycsbmV3Q29udGFjdExpc3REYXRhLmxpc3ROdW0pO1xuXG4gICAgICAgICRzY29wZS5saXN0bmFtZT17fTtcbiAgICB9O1xufV0pO1xuXG5cbiIsIlxuYXBwLnNlcnZpY2UoJ25ld0NvbnRhY3RMaXN0RGF0YScsIFsnQ29udGFjdExpc3REYXRhU2VydmljZScsICckaHR0cCcsXG4gICAgZnVuY3Rpb24gKENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsICRodHRwKSB7XG4gICAgICAgIHRoaXMubmV3Q29udGFjdExpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5saXN0TnVtID0gXCIyMDA2MDY2MjY3XCI7XG4gICAgICAgIHRoaXMuaW1wb3J0RGF0YUFycmF5ID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiZW1haWxfYWRkcmVzc2VzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgXCJ1c2VyMUBleGFtcGxlLmNvbVwiXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImZpcnN0X25hbWVcIjogXCJKb2huXCIsXG4gICAgICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogXCJTbWl0aFwiLFxuICAgICAgICAgICAgICAgIFwiY29tcGFueV9uYW1lXCI6IFwiQ29tcGFueSBYXCIsXG4gICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogXCJhbnl0b3duXCJcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgIFwidXNlcjJAZXhhbXBsZS5jb21cIlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJmaXJzdF9uYW1lXCI6IFwiSmFuZVwiLFxuICAgICAgICAgICAgICAgIFwibGFzdF9uYW1lXCI6IFwiU21pdGh5XCIsXG4gICAgICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogXCJDb21wYW55IFlcIixcbiAgICAgICAgICAgICAgICBcImFkZHJlc3Nlc1wiOiBbe1xuICAgICAgICAgICAgICAgICAgICBjaXR5OiBcInNvbWV0b3duXCJcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnBvc3RMaXN0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlkIHRoZSBuYW1lIG1ha2UgaXQgdG8gdGhlIHNlcnZpY2U/IFwiICsgbmFtZSApO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9uZXdDb250YWN0TGlzdCcsIHtuYW1lOiBuYW1lfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBsaXN0TnVtID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklkPyBcIiwgbGlzdE51bSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsgLy9lcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucG9wTGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFPYmplY3QgPSB7XG4gICAgICAgICAgICAgICAgXCJpbXBvcnREYXRhQXJyYXlcIjogdGhpcy5pbXBvcnREYXRhQXJyYXksXG4gICAgICAgICAgICAgICAgXCJsaXN0TnVtXCI6IHRoaXMubGlzdE51bVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb3QgdG8gcG9wTGlzdCcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ltcG9ydERhdGFBcnJheTogJyx0aGlzLmltcG9ydERhdGFBcnJheSwgJ1xcbnR5cGU6ICcsIHR5cGVvZiB0aGlzLmltcG9ydERhdGFBcnJheSk7XG4gICAgICAgICAgICBnZXRDaGVja2VkKGxpc3QpO1xuICAgICAgICAgICAgJGh0dHAucG9zdCgnL3BvcHVsYXRlQ29udGFjdExpc3QnLCB0aGlzLmRhdGFPYmplY3QpLnRoZW4oZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Bvc3RlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXBvcnREYXRhQXJyYXk6ICcsdGhpcy5pbXBvcnREYXRhQXJyYXksICdcXG50eXBlOiAnLCB0eXBlb2YgdGhpcy5pbXBvcnREYXRhQXJyYXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vZ2V0IGFsbCB0aGUgY2hlY2tlZCBlbGVtZW50cyBhbmQgc3R1ZmYgdGhlbSBpbiBhbiBhcnJheVxuICAgICAgICB2YXIgZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAkKFwiOmNoZWNrZWRcIikuZWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PSBsLmVtYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFjdE9iamVjdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZpcnN0X25hbWVcIjogJCh0aGlzKS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogJCh0aGlzKS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiAkKHRoaXMpLmNvbXBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eTogJCh0aGlzKS5jaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnREYXRhQXJyYXkucHVzaChjb250YWN0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cblxuLy9hcHAuc2VydmljZSgnbmV3Q29udGFjdExpc3REYXRhJywgWydDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgJyRodHRwJyxcbi8vICAgIGZ1bmN0aW9uIChDb250YWN0TGlzdERhdGFTZXJ2aWNlLCAkaHR0cCkge1xuLy8gICAgICAgIHRoaXMubmV3Q29udGFjdExpc3QgPSBbXTtcbi8vICAgICAgICB0aGlzLmxpc3ROdW0gPSBcIjBcIjtcbi8vICAgICAgICB0aGlzLnBvc3RMaXN0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbi8vICAgICAgICAgICAgY29uc29sZS5sb2coXCJkaWQgdGhlIG5hbWUgbWFrZSBpdCB0byB0aGUgc2VydmljZT8gXCIgKyBuYW1lICk7XG4vLyAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvbmV3Q29udGFjdExpc3QnLCB7bmFtZTogbmFtZX0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4vLyAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbi8vICAgICAgICAgICAgICAgIGxpc3ROdW0gPSByZXNwb25zZS5kYXRhO1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJZD8gXCIsIGxpc3ROdW0pO1xuLy8gICAgICAgICAgICB9LCBmdW5jdGlvbihkYXRhKXtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpOyAvL2Vycm9yXG4vLyAgICAgICAgICAgIH0pO1xuLy8gICAgICAgIH07XG4vLyAgICAgICAgdGhpcy5pbXBvcnREYXRhQXJyYXkgPSBbXG4vLyAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgIFwiZW1haWxfYWRkcmVzc2VzXCI6IFtcbi8vICAgICAgICAgICAgICAgICAgICBcInVzZXIxQGV4YW1wbGUuY29tXCJcbi8vICAgICAgICAgICAgICAgIF0sXG4vLyAgICAgICAgICAgICAgICBcImZpcnN0X25hbWVcIjogXCJKb2huXCIsXG4vLyAgICAgICAgICAgICAgICBcImxhc3RfbmFtZVwiOiBcIlNtaXRoXCIsXG4vLyAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiBcIkNvbXBhbnkgWFwiLFxuLy8gICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbi8vICAgICAgICAgICAgICAgICAgICBjaXR5OiBcImFueXRvd25cIlxuLy8gICAgICAgICAgICAgICAgfV1cbi8vICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuLy8gICAgICAgICAgICAgICAgICAgIFwidXNlcjJAZXhhbXBsZS5jb21cIlxuLy8gICAgICAgICAgICAgICAgXSxcbi8vICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiBcIkphbmVcIixcbi8vICAgICAgICAgICAgICAgIFwibGFzdF9uYW1lXCI6IFwiU21pdGh5XCIsXG4vLyAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiBcIkNvbXBhbnkgWVwiLFxuLy8gICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbi8vICAgICAgICAgICAgICAgICAgICBjaXR5OiBcInNvbWV0b3duXCJcbi8vICAgICAgICAgICAgICAgIH1dXG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICBdO1xuLy8gICAgICAgIHRoaXMucG9wTGlzdCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgZ2V0Q2hlY2tlZCgpO1xuLy8gICAgICAgICAgICAkaHR0cC5wb3N0KCcvcG9wdWxhdGVDb250YWN0TGlzdC5qcycsIGltcG9ydERhdGFBcnJheSwgbGlzdE51bSkudGhlbihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuLy8gICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4vLyAgICAgICAgfTtcbi8vICAgICAgICAvL2dldCBhbGwgdGhlIGNoZWNrZWQgZWxlbWVudHMgYW5kIHN0dWZmIHRoZW0gaW4gYW4gYXJyYXlcbi8vICAgICAgICB2YXIgZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgJChcIjpjaGVja2VkLnR5cGUtZWxlbWVudFwiKS5lYWNoKFxuLy8gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLnJlc3VsdHMuaWQpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3RPYmplY3QgPVxuLy8gICAgICAgICAgICAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5lbWFpbFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiAkKHRoaXMpLmZpcnN0TmFtZSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdF9uYW1lXCI6ICQodGhpcykubGFzdE5hbWUsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiAkKHRoaXMpLmNvbXBhbnksXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZHJlc3Nlc1wiOiBbe1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHk6ICQodGhpcykuY2l0eVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgfTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0RGF0YUFycmF5LnB1c2goY29udGFjdE9iamVjdCk7XG4vLyAgICAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICApO1xuLy8gICAgICAgIH1cbi8vICAgIH1dKTtcbi8vIHNlcnZpY2UgZm9yIGFqYXggY2FsbHMgdG8gY29uc3RhbnQgY29udGFjdFxuLy9cbi8vYXBwLnNlcnZpY2UoJ25ld0NvbnRhY3RMaXN0RGF0YScsIFsnQ29udGFjdExpc3REYXRhU2VydmljZScsICckaHR0cCcsXG4vLyAgICBmdW5jdGlvbiAoQ29udGFjdExpc3REYXRhU2VydmljZSwgJGh0dHApIHtcbi8vXG4vLyAgICB2YXIgbmV3Q29udGFjdExpc3QgPSBbXTtcbi8vICAgIHZhciBsaXN0TnVtID0gXCIxNDk5NTIzNjEwXCI7XG4vL1xuLy8gICAgdGhpcy5wb3N0TGlzdCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAkaHR0cC5wb3N0KCcvbmV3Q29udGFjdExpc3QnKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuLy8gICAgICAgICAgICBsaXN0TnVtID0gZGF0YS5pZFxuLy9cbi8vICAgICAgICB9LCBmdW5jdGlvbihkYXRhKXtcbi8vICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7IC8vZXJyb3Jcbi8vICAgICAgICB9KTtcbi8vICAgICAgICBjb25zb2xlLmxvZyhvcHRpb25zKVxuLy8gICAgfTtcbi8vXG4vLyAgICB2YXIgaW1wb3J0RGF0YUFycmF5ID0gW1xuLy8gICAgICAgIHtcbi8vICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuLy8gICAgICAgICAgICAgICAgXCJ1c2VyMUBleGFtcGxlLmNvbVwiXG4vLyAgICAgICAgICAgIF0sXG4vLyAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiBcIkpvaG5cIixcbi8vICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogXCJTbWl0aFwiLFxuLy8gICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiBcIkNvbXBhbnkgWFwiLFxuLy8gICAgICAgICAgICBcImFkZHJlc3Nlc1wiOiBbe1xuLy8gICAgICAgICAgICAgICAgY2l0eTogXCJhbnl0b3duXCJcbi8vICAgICAgICAgICAgfV1cbi8vICAgICAgICB9LFxuLy8gICAgICAgIHtcbi8vICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuLy8gICAgICAgICAgICAgICAgXCJ1c2VyMkBleGFtcGxlLmNvbVwiXG4vLyAgICAgICAgICAgIF0sXG4vLyAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiBcIkphbmVcIixcbi8vICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogXCJTbWl0aHlcIixcbi8vICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogXCJDb21wYW55IFlcIixcbi8vICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbi8vICAgICAgICAgICAgICAgIGNpdHk6IFwic29tZXRvd25cIlxuLy8gICAgICAgICAgICB9XVxuLy8gICAgICAgIH1cbi8vICAgIF07XG4vL1xuLy8gICAgLy92YXIgY29udGFjdExpc3RPYmplY3QgPSh7XG4vLyAgICAvLyAgICBcIkltcG9ydCBEYXRhXCIgOiBpbXBvcnREYXRhQXJyYXksXG4vLyAgICAvLyAgICBcImxpc3RcIjogW2xpc3ROdW1dLFxuLy8gICAgLy8gICAgXCJjb2x1bW5fbmFtZXNcIjpbXCJFTUFJTFwiLFwiRklSU1QgTkFNRVwiLCBcIkxBU1QgTkFNRVwiLCBcIkNJVFlcIixcIkNPTVBBTlkgTkFNRVwiXX0pO1xuLy9cbi8vXG4vLyAgICB0aGlzLnBvcExpc3QgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgZ2V0Q2hlY2tlZCgpO1xuLy8gICAgICAgICRodHRwLnBvc3QoJy9wb3B1bGF0ZUNvbnRhY3RMaXN0LmpzJywgaW1wb3J0RGF0YUFycmF5LCBsaXN0TnVtKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbi8vICAgICAgICB9KTtcbi8vICAgICAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcbi8vXG4vLyAgICB9O1xuLy9cbi8vICAgIC8vZ2V0IGFsbCB0aGUgY2hlY2tlZCBlbGVtZW50cyBhbmQgc3R1ZmYgdGhlbSBpbiBhbiBhcnJheVxuLy8gICAgdmFyIGdldENoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICAgICQoXCI6Y2hlY2tlZC50eXBlLWVsZW1lbnRcIikuZWFjaChcbi8vICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT0gQ29udGFjdExpc3REYXRhU2VydmljZS5yZXN1bHRzLmlkKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0T2JqZWN0ID1cbi8vICAgICAgICAgICAgICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZW1haWxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZpcnN0X25hbWVcIjogJCh0aGlzKS5maXJzdE5hbWUsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhc3RfbmFtZVwiOiAkKHRoaXMpLmxhc3ROYW1lLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogJCh0aGlzKS5jb21wYW55LFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiAkKHRoaXMpLmNpdHlcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH07XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydERhdGFBcnJheS5wdXNoKGNvbnRhY3RPYmplY3QpO1xuLy8gICAgICAgICAgICAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICk7XG4vLyAgICAgICAgfVxuLy99XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ3BvcExpc3RDb250cm9sbGVyJyxbJ25ld0NvbnRhY3RMaXN0RGF0YScsJyRzY29wZScsJyRodHRwJywgZnVuY3Rpb24obmV3Q29udGFjdExpc3REYXRhLCAkc2NvcGUsICRodHRwKSB7XG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcblxuXG4gICAgJHNjb3BlLmxpc3ROYW1lID0ge307XG5cbiAgICAkc2NvcGUucG9wdWxhdGVMaXN0ICA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGUgbGlzdDogXCIgKyBzY29wZS5saXN0TmFtZS5pbnB1dCk7XG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvcExpc3QoKTtcbiAgICAgICAgLy92YXIgbGlzdEVuZCA9IHtcbiAgICAgICAgLy8gICAgXCJsaXN0c1wiOiBbbGlzdE51bV0sXG4gICAgICAgIC8vICAgIFwiY29sdW1uX25hbWVzXCI6IFtcbiAgICAgICAgLy8gICAgXCJFTUFJTFwiLFxuICAgICAgICAvLyAgICBcIkZJUlNUIE5BTUVcIixcbiAgICAgICAgLy8gICAgXCJMQVNUIE5BTUVcIixcbiAgICAgICAgLy8gICAgXCJDSVRZXCIsXG4gICAgICAgIC8vICAgIFwiQ09NUEFOWSBOQU1FXCJcbiAgICAgICAgLy9dfVxuXG5cbiAgICAgICAgJHNjb3BlLmxpc3ROYW1lPXt9O1xuICAgIH07XG59XSk7XG5cbiIsIlxuLy9yZWdpc3RlciBjb250cm9sbGVyXG5hcHAuY29udHJvbGxlcigncmVnaXN0ZXJDdHJsJywgWyAnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWdpc3RlckN0cmxcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlckNvbnRyb2xsZXIgc3VibWl0OicsICRzY29wZS5mb3JtKTtcbiAgICAgICAgJGh0dHAucG9zdCgnL3JlZ2lzdGVyJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1dKTtcbiIsImFwcC5jb250cm9sbGVyKCdyZXNldEN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9jYXRpb24pIHtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZWRpdCBwYXNzd29yZDonLCAkc2NvcGUuZm9ybSk7XG4gICAgICAgICRodHRwLnB1dCgnL2FkbWluJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1dKTtcbiIsImFwcC5zZXJ2aWNlKCd2YWxpZFNlcnZpY2UnLCBbZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHZhbGlkYXRlSW5wdXQgPSBmdW5jdGlvbiAodHlwZSwgaWQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInZhbGlkYXRlSW5wdXQoKVwiKTtcbiAgICAgICAgLy8gc3RvcmVzIHRoZSBmb3JtIGJlaW5nIGNhbGxlZCBvblxuICAgICAgICB2YXIgcGF0dGVybjtcbiAgICAgICAgdmFyICRvYmogPSAoaWQpID8gJCgnIycrIGlkKSA6IGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9iamVjdCBpcyBcIiwgJG9iaiwgdHlwZSwgaWQpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICBjYXNlIFwiY2l0eVwiOlxuICAgICAgICAgICAgY2FzZSBcInN0YXRlXCI6XG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIGFuZCBhbHBoYSBjaGFycywgYXMgd2VsbCBhcyB3aGl0ZSBzcGFjZSBhbmQgYSBmZXcgZXh0cmEgY2hhcnNcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS16XFxzLC4nLV0rJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29ycE5hbWVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrLV0rJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYWRkcmVzc1wiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOys6KCklJi1dKyQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInppcFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlswLTldezV9JC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oWyhdWzAtOV17M31bKV18WzAtOV17M30pW1xcc1xcLS5dP1swLTldezN9W1xcc1xcLS5dP1swLTldezR9JC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZW1haWxcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05Ll8lKy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfSQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm5vdGVzXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOVxccywuP0AhIyd+Kl87KzooKSUmPD5cXFtcXF17fVxcLT1cInxgXFxcXFxcL10rJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZXh0XCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOVxcczotXSskLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eMjBbMC05XXsyfVstXSgwWzEtOV18MVswLTJdKVstXSgwWzEtOV18WzEtMl1bMC05XXwzWzAxXSkkLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJiaXJ0aGRhdGVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oMTk5WzAtOV18MjBbMC05XXsyfSlbLV0oMFsxLTldfDFbMC0yXSlbLV0oMFsxLTldfFsxLTJdWzAtOV18M1swMV0pJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYW1vdW50XCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW1xcJF0/W1xcZF0rKFsuXVtcXGRdezJ9KT8kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIGNsYXNzIHNlYXJjaFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiByZXF1aXJlZCBvciB0cmltbWVkIGxlbmd0aCBpcyBub3QgMCwgdGhlbiB2YWxpZGF0ZSBpbmZvXG4gICAgICAgIGlmKCRvYmouYXR0cigncmVxdWlyZWQnKSB8fCAkb2JqLnZhbCgpLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgaWYgdmFsdWUgbWF0Y2hlcyByZWdleCBmb3IgZmllbGQgdHlwZVxuICAgICAgICAgICAgaWYoIXBhdHRlcm4udGVzdCgkb2JqLnZhbCgpLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBmYWlscywgYWRkcyBpbnZhbGlkIGNsYXNzIChoaWdobGlnaHRpbmcpLCBjaGFuZ2VzIHBsYWNlaG9sZGVyIHRvIHdoYXQgc2hvdWxkIGJlIGVudGVyZWRcbiAgICAgICAgICAgICAgICAkb2JqLmFkZENsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkb2JqLmRhdGEoJ2ludmFsaWQnKSkudmFsKCcnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0eXBlLCAnIGZhaWxlZCB0ZXN0JywgcGF0dGVybik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIHBhc3NlcywgcmVtb3ZlcyBpbnZhbGlkIGNsYXNzLCByZXNldHMgcGxhY2Vob2xkZXIgdG8gZGVmYXVsdFxuICAgICAgICAgICAgICAgICRvYmoucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICRvYmouZGF0YSgncGxhY2Vob2xkZXInKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codHlwZSwgJyBwYXNzZWQgdGVzdCcsIHBhdHRlcm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXQ6IHZhbGlkYXRlSW5wdXRcbiAgICB9O1xufV0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
