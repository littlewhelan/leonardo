var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,a,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&a.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?a.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(a){if(a){var e=a.split(".")[1],o=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(a){t.localStorage.jwtToken=a},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var a=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=a.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService","toastr",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(a){r.error("Cancelled"),t.corp={info:{},contact:{},donations:[]},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){n.data.donations.forEach(function(t,a,e){e[a].date=l.fromDB(t.date)}),t.corp=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.donations.length&&t.corp.donations.forEach(function(t,a,e){e[a].date=l.toDB(t.date)}),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Put corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Posted corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{},r.success("Corporation added!")},function(){r.error("Failed to add corporation")}):(r.error("Unauthorized character"),console.log("Add corp input tests failed"))},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("donation",t.newDonation),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.corp.donations))}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,a,e,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var a=e.makeDataCall("age",t.age.data);a.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=e.makeDataCall("family","");o.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=e.makeDataCall("company","");i.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(a){var e=angular.element(a.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],e.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),e.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,a){function e(e,o){var n=a.defer();return console.log("this is in the make data call",e,o),t({method:"GET",url:"../createMailList",params:{type:e,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:e}}]),app.service("dateService",["MomentJS",function(t){var a="YYYY-MM-DD",e="M/D/YYYY",o=function(e){return t(e).format(a)},n=function(a){return t(a).format(e)};return{toDB:o,fromDB:n}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","toastr","dateService",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(a){l.error("Cancelled"),t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){console.log(n.data),n.data.children.forEach(function(t,a,e){console.log("reformatted",r.fromDB(e[a].birthdate)),e[a].birthdate=r.fromDB(t.birthdate)}),n.data.donations.forEach(function(t,a,e){e[a].date=r.fromDB(t.date)}),t.family=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.children.length&&t.family.children.forEach(function(t,a,e){e[a].birthdate=r.toDB(t.birthdate)}),t.family.donations.length&&t.family.donations.forEach(function(t,a,e){e[a].date=r.toDB(t.date)}),console.log("Saving family, after toDB birthdates",t.family),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("update family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(a){console.log("Put family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/family",data:{family:t.family}}).then(function(a){console.log("Posted family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[],l.success("Family saved!")},function(){l.error("Failed to add family")}):(l.error("Unauthorized character"),console.log("Add family failed input tests"))},t.addChild=function(){t.newChild.firstName&&(console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1,l.success("Child updated!")):(t.family.children.push(t.newChild),l.success("Child added!")),t.newChild={})},t.editChild=function(a){t.editingChild=a,t.newChild=t.family.children[a]},t.removeChild=function(a){console.log("in remove child index",a," edit ",t.editingChild),t.family.children.splice(a,1),a==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("add donation",t.newDonation),t.family.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.family.donations))}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope","toastr",function(t,a,e,o,n,i){t.submit=function(){console.log("login submitted",t.form),a.post("/login",t.form).then(function(t){e.saveToken(t.data),n.user=e.getUser(),o.path("/search")},function(){i.error("incorrect username or password")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,a,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var a=[],e=[],o=[],n=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){a=t.data,l(a),c(a),r(a)})},l=function(t){var a=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return a(t),console.log("this is getElement1",o),o},r=function(t){var a=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return a(t),console.log("this is in getElement2",e),e},c=function(t){var a=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return a(t),console.log("this is getElements3",n),n},s={getKids:c,getAdults:r,getCompanies:l,makeDataCall:i,results:a,companies:o,adults:e,kids:n};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,a){t.ok=function(){a.close(t.selected.item)},t.cancel=function(){a.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,a,e,o){e.user=t.getUser(),e.user&&e.user.username&&o.path("/home"),a.logout=function(){t.logout(),e.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope","toastr",function(t,a,e,o){a.hide=function(){console.log("hide"),e.hide=!0},a.listname={},a.createList=function(){console.log("create list: "+a.listname.input),t.postList(a.listname.input,function(t){t===!0?(a.listname={},o.success("Successfully created list"),a.hide()):(console.log("failed to create list"),o.error("Failed to create list"))})}}]),app.service("newContactListData",["ContactListDataService","$http","$timeout",function(t,a,e){var o="",n=[];this.postList=function(t,e){console.log("did the name make it to the service? "+t),a.post("/newContactList",{name:t}).then(function(t){console.log(t.data),o=t.data,console.log("Id? ",o),e(!0)},function(t){console.log("failed to create",t),e(!1)})},this.popList=function(t){this.dataObject={importDataArray:n,listNum:o},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),i(t),a.post("/populateContactList",this.dataObject).then(function(t,a,e,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0},function(){return!1})};var i=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email||""],first_name:t.firstName||"",last_name:t.lastName||"",company_name:t.company||"",addresses:[{city:t.city||""}]},console.log(this.contactObject),n.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,a,e){a.listName={},a.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),a.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location","toastr","validService",function(t,a,e,o,n){t.validateInput=n.validateInput,t.submit=function(){a.post("/register",t.form).then(function(t){e.path("/index"),o.success("admin created")},function(){o.error("failed to add admin")})}}]),app.controller("resetCtrl",["$scope","$http","$location","authService","toastr",function(t,a,e,o,n){t.submit=function(){console.log("edit password:",t.form);var i=o.getUser();console.log("auth user",i);var l=t.form;l.id=i.id,l.username=i.username,console.log("prepared",l),a.put("/admin",l).then(function(t){console.log(t),n.success("password changed"),e.path("/index")},function(){n.error("failed to update password")})}}]),app.service("validService",[function(){var t=function(t,a){var e,o=a?$("#"+a):!1;switch(t){case"name":case"city":case"state":e=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":e=/^[0-9]{5}$/;break;case"phone":e=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":e=/^[a-zA-Z0-9\s:-]{0,15}$/;break;case"date":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/20[0-9]{2}$/;break;case"birthdate":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/((199[0-9]|20)[0-9]{2})$/;break;case"amount":e=/^([\$]?[\d]+([.][\d]{2})?){1,10}$/;break;case"username":e=/^(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d_\-]{8,20}$/;break;case"password":e=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,20}$/;break;case"search":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}$/;break;case"age":e=/^[0-9]{1,2}$/;break;default:return!1}return o.attr("required")||o.val()?!e.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),!0):void 0},a=function(a){var e=!0;return a.forEach(function(a,o,n){$("#"+a+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(e=!1)})}),e};return{validateInput:t,validateForm:a}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udHJvbGxlci5qcyIsImNyZWF0ZUxpc3RTZXJ2aWNlLmpzIiwiZGF0ZVNlcnZpY2UuanMiLCJmYW1pbHlDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwibWFpblNlYXJjaENvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoU2VydmljZS5qcyIsIm1vZGFsSW5zdGFuY2VDb250cm9sbGVyLmpzIiwibmF2Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0U2VydmljZS5qcyIsInBvcExpc3RDb250cm9sbGVyLmpzIiwicmVnaXN0ZXJDb250cm9sbGVyLmpzIiwicmVzZXRDb250cm9sbGVyLmpzIiwidmFsaWRTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsIiRzY29wZSIsIiR1aWJNb2RhbCIsIiRsb2ciLCJSZXN1bHRTZXJ2aWNlIiwiJGh0dHAiLCJ2YWxpZFNlcnZpY2UiLCJkYXRlU2VydmljZSIsInRvYXN0ciIsInZhbGlkYXRlSW5wdXQiLCJjb21wYW5pZXMiLCJjb3JwIiwiaW5mbyIsImNvbnRhY3QiLCJkb25hdGlvbnMiLCJuZXdEb25hdGlvbiIsImFuaW1hdGlvbnNFbmFibGVkIiwiY2xlYXJDb3JwIiwiZm9ybXNBcnJheSIsImVycm9yIiwiZm9yRWFjaCIsInYiLCIkIiwiZWFjaCIsInJlbW92ZUNsYXNzIiwiYXR0ciIsImRhdGEiLCJvcGVuIiwic2l6ZSIsImlkIiwibWV0aG9kIiwidXJsIiwidGhlbiIsImkiLCJhIiwiZGF0ZSIsImZyb21EQiIsIm1vZGFsSW5zdGFuY2UiLCJhbmltYXRpb24iLCJzY29wZSIsInJlc29sdmUiLCJpdGVtcyIsInJlc3VsdCIsInNlbGVjdGVkSXRlbSIsInNlbGVjdGVkIiwidG9nZ2xlQW5pbWF0aW9uIiwic2F2ZSIsImxlbmd0aCIsInRvREIiLCJ2YWxpZGF0ZUZvcm0iLCJyZXMiLCJzdWNjZXNzIiwiYWRkRG9uYXRpb24iLCJ0ZXN0IiwiYW1vdW50IiwicHVzaCIsIkNvbnRhY3RMaXN0RGF0YVNlcnZpY2UiLCJuZXdDb250YWN0TGlzdERhdGEiLCIkcm9vdFNjb3BlIiwidHlwZSIsImFnZSIsInppcCIsImVtYWlscyIsImluY2x1ZGVkRW1haWxzIiwidG90YWxEaXNwbGF5ZWQiLCJ0b3RhbFJlc3VsdHMiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsInBvcExpc3QiLCJsb2FkTW9yZSIsInNob3dBbGwiLCJjaGVja0FsbCIsImV2ZW50IiwiJGJ1dHRvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJ2YWwiLCJjb3B5IiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwibW9tZW50IiwiZGJGb3JtYXQiLCJ1aUZvcm1hdCIsInRvRGJGb3JtYXQiLCJmb3JtYXQiLCJmcm9tRGJGb3JtYXQiLCJhZHVsdHMiLCJraWRzIiwiZmFtaWx5IiwiYWR1bHRPbmUiLCJhZHVsdFR3byIsImVtZXJnZW5jeSIsImNoaWxkcmVuIiwibmV3Q2hpbGQiLCJjbGVhckZhbWlseSIsImJpcnRoZGF0ZSIsImFkZENoaWxkIiwiZmlyc3ROYW1lIiwiZWRpdGluZ0NoaWxkIiwiZWRpdENoaWxkIiwiaW5kZXgiLCJyZW1vdmVDaGlsZCIsInNwbGljZSIsImNsZWFyQ2hpbGQiLCJsYXN0TmFtZSIsInNjaG9vbCIsIm5vdGVzIiwic3VibWl0IiwiZm9ybSIsInBvc3QiLCJ1c2VyIiwiZm9ybUlucHV0Iiwic2VhcmNoQnRuIiwicmVzdWx0cyIsImdldENvbXBhbmllcyIsImdldEtpZHMiLCJnZXRBZHVsdHMiLCJhcnJheSIsImdldEVsZW1lbnQxIiwiZ2V0RWxlbWVudDIiLCJnZXRFbGVtZW50MyIsInB1YmxpY0FwaSIsIiRtb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwidXNlcm5hbWUiLCJoaWRlIiwibGlzdG5hbWUiLCJjcmVhdGVMaXN0IiwiaW5wdXQiLCJwb3N0TGlzdCIsIiR0aW1lb3V0IiwibGlzdE51bSIsImltcG9ydERhdGFBcnJheSIsIm5hbWUiLCJjYiIsImxpc3QiLCJkYXRhT2JqZWN0IiwiZ2V0Q2hlY2tlZCIsImwiLCJvYmplY3QiLCJjb250YWN0T2JqZWN0IiwiZW1haWxfYWRkcmVzc2VzIiwiZW1haWwiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiY29tcGFueV9uYW1lIiwiY29tcGFueSIsImFkZHJlc3NlcyIsImNpdHkiLCJsaXN0TmFtZSIsInRlbXBVc2VyIiwicHV0IiwicGF0dGVybiIsIiRvYmoiLCJ0cmltIiwiYWRkQ2xhc3MiLCJmb3JtcyIsInBhc3Mi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QXBGLE9BRUFtRixFQUFBOUcsS0FBQStHLEVBQUFwRixNQUFBcUYsU0FBQSxHQUFBRCxFQUFBcEYsTUFBQXFGLE9BQUF0SCxRQUFBcUgsRUFBQTNJLEtBQUEsYUFFQTJJLEVBQUFFLFNBQUEsV0FBQTdJLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLFlBQUFzRCxJQUFBLEtBRUEsSUFHQW9GLEVBQUE1SSxZQUFBLFdBQUFDLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLGlCQUVBLEdBWEEsUUFnQkF1QixFQUFBLFNBQUFzSCxHQUNBLEdBQUFDLElBQUEsQ0FTQSxPQVJBRCxHQUFBbkosUUFBQSxTQUFBQyxFQUFBWSxFQUFBQyxHQUNBWixFQUFBLElBQUFELEVBQUEsaUJBQUFFLEtBQUEsV0FDQSxHQUFBZCxFQUFBYSxFQUFBM0MsTUFBQStDLEtBQUEsUUFBQUosRUFBQTNDLE1BQUE4QyxLQUFBLFNBRUErSSxHQUFBLE9BSUFBLEVBR0EsUUFDQS9KLGNBQUFBLEVBQ0F3QyxhQUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdsZW8nLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCcsICdjaGVja2xpc3QtbW9kZWwnLCAndG9hc3RyJywgJ2FuZ3VsYXItbW9tZW50anMnXSk7XG5cblxuYXBwLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJyxcbiAgICBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlci5cbiAgICAgICAgICAgIHdoZW4oJy8nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvbG9naW4uaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL3NlYXJjaCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvc2VhcmNoLmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9yZWdpc3RlcicsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9yZWdpc3Rlci5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvY29udGFjdExpc3QnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2NvbnRhY3RMaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9hZGRmYW1pbHknLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2FkZGZhbWlseS5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ2VkaXRGYW1pbHlDdHJsJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvYWRkY29ycCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvYWRkY29ycC5odG1sJyxcblx0XHRcdFx0Y29udHJvbGxlcjogJ2VkaXRDb3JwQ3RybCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2NvbnRhY3RsaXN0Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9jb250YWN0bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBvdGhlcndpc2Uoe1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvc2VhcmNoJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pO1xuXG5cblxuXG4iLCJhcHAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgWyckcScsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKGF1dGhTZXJ2aWNlLmlzQXV0aGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgYXV0aFNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7XG4gICAgICAgIH0sIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKSIsImFwcC5zZXJ2aWNlKCdhdXRoU2VydmljZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uICgkd2luZG93KSB7XG5cbiAgICB0aGlzLnBhcnNlSnd0ID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgICAgICB2YXIgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIHt9O1xuICAgIH07XG5cbiAgICB0aGlzLnNhdmVUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbiA9IHRva2VuO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdTYXZlZCB0b2tlbjonLCR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICB0aGlzLmlzQXV0aGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VKd3QodG9rZW4pO1xuICAgICAgICAgICAgdmFyIG5vdEV4cGlyZWQgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgPD0gcGFyYW1zLmV4cDtcbiAgICAgICAgICAgIGlmICghbm90RXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm90RXhwaXJlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsZXRlICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICAvLyBleHBvc2UgdXNlciBhcyBhbiBvYmplY3RcbiAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnd0KHRoaXMuZ2V0VG9rZW4oKSlcbiAgICB9O1xufV0pOyIsIi8vZWRpdCBjb3Jwb3JhdGlvbiBtb2RhbCB0ZW1wbGF0ZVxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRDb3JwQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCAndmFsaWRTZXJ2aWNlJywgJ2RhdGVTZXJ2aWNlJywgJ3RvYXN0cicsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbCwgJGxvZywgUmVzdWx0U2VydmljZSwgJGh0dHAsIHZhbGlkU2VydmljZSwgZGF0ZVNlcnZpY2UsIHRvYXN0cikge1xuXG5cdC8vIHNldHMgdmFsaWRhdGlvbiBmcm9tIHNlcnZpY2UgZm9yIGRvbSBjYWxsc1xuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xuXHQvL3NlbmRzIHRoZSBjb21wYW5pZXMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxuXHQkc2NvcGUuY29tcGFuaWVzID0gUmVzdWx0U2VydmljZS5jb21wYW5pZXM7XG5cdCRzY29wZS5jb3JwID0ge1xuXHRcdGluZm86IHt9LFxuXHRcdGNvbnRhY3Q6IHt9LFxuXHRcdGRvbmF0aW9uczogW11cblx0fTtcblx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9IHRydWU7XG5cblx0JHNjb3BlLmNsZWFyQ29ycCA9IGZ1bmN0aW9uIChmb3Jtc0FycmF5KSB7XG5cdFx0dG9hc3RyLmVycm9yKCdDYW5jZWxsZWQnKTtcblx0XHQkc2NvcGUuY29ycCA9IHtcblx0XHRcdGluZm86e30sXG5cdFx0XHRjb250YWN0Ont9LFxuXHRcdFx0ZG9uYXRpb25zOltdXG5cdFx0fTtcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0XHRmb3Jtc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHtcblx0XHRcdCQoJyMnKyB2ICsnIC5qcy12YWxpZGF0ZScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkKHRoaXMpLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2l6ZSwgaWQpIHtcblx0XHRjb25zb2xlLmxvZygnY29ycCBjYWxsJywgaWQpO1xuXHRcdHJldHVybiAkaHR0cCh7XG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0dXJsOiAnLi4vY29ycG9yYXRpb24nLFxuXHRcdFx0cGFyYW1zOiB7aWQ6IGlkfVxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cblx0XHRcdHJlc3BvbnNlLmRhdGEuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcblx0XHRcdFx0YVtpXS5kYXRlID0gZGF0ZVNlcnZpY2UuZnJvbURCKHYuZGF0ZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0JHNjb3BlLmNvcnAgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG5cdFx0XHRcdGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvZWRpdGNvcnAuaHRtbCcsXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXG5cdFx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRcdHNjb3BlOiAkc2NvcGUsXG5cdFx0XHRcdHJlc29sdmU6IHtcblx0XHRcdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5jb3JwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW07XG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcblxuXHQkc2NvcGUudG9nZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9ICEkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQ7XG5cdH07XG5cblx0Ly8gc2F2ZSBjb3JwXG5cdCRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiU2F2ZSBzdWJtaXR0ZWRcIiwgJHNjb3BlLmNvcnApO1xuXHRcdC8vYWxlcnQoXCJTdWJtaXR0ZWRcIik7XG5cblx0XHQvLyBjaGVjayBmb3IgZG9uYXRpb24sIHJ1biB0b0RCIGZvcm1hdHRpbmcgYmVmb3JlIHNlbmRpbmdcblx0XHRpZigkc2NvcGUuY29ycC5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHYuZGF0ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBpZiBoYXMgaWQsIHRoZW4gcHV0XG5cdFx0aWYoISRzY29wZS5jb3JwLmlkKSB7XG5cdFx0XHRpZih2YWxpZFNlcnZpY2UudmFsaWRhdGVGb3JtKFtcIkFkZENvcnBJbmZvRm9ybVwiLCBcIkFkZENvcnBDb250YWN0Rm9ybVwiXSkpIHtcblx0XHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRcdHVybDogJy9jb3Jwb3JhdGlvbicsXG5cdFx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlBvc3RlZCBjb3JwLCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmluZm8gPSAocmVzLmRhdGEuaW5mbykgPyByZXMuZGF0YS5pbmZvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmNvbnRhY3QgPSAocmVzLmRhdGEuY29udGFjdCkgPyByZXMuZGF0YS5jb250YWN0IDoge307XG5cdFx0XHRcdFx0Ly8gaW5pdGlhbGl6ZSBkb25hdGlvbnMgaWYgdGhlcmUgYXJlIGFueVxuXHRcdFx0XHRcdGlmICgkc2NvcGUuY29ycC5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDoge307XG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NvcnBvcmF0aW9uIGFkZGVkIScpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gYWRkIGNvcnBvcmF0aW9uJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ1VuYXV0aG9yaXplZCBjaGFyYWN0ZXInKTtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJBZGQgY29ycCBpbnB1dCB0ZXN0cyBmYWlsZWRcIik7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJFZGl0Q29ycEluZm9Gb3JtXCIsIFwiRWRpdENvcnBDb250YWN0Rm9ybVwiXSkpIHtcblx0XHRcdFx0Ly8gaW5zZXJ0IGNvcnAgLSBoYXMgbm8gaWRcblx0XHRcdFx0Y29uc29sZS5sb2coXCJ1cGRhdGUgY29ycFwiLCAkc2NvcGUuY29ycCk7XG5cdFx0XHRcdCRodHRwKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxuXHRcdFx0XHRcdHVybDogJy9jb3Jwb3JhdGlvbicsXG5cdFx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlB1dCBjb3JwLCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcblxuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaW5mbyA9IChyZXMuZGF0YS5pbmZvKSA/IHJlcy5kYXRhLmluZm8gOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuY29udGFjdCA9IChyZXMuZGF0YS5jb250YWN0KSA/IHJlcy5kYXRhLmNvbnRhY3QgOiB7fTtcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiRWRpdCBjb3JwIGlucHV0IHRlc3RzIGZhaWxlZFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gYWRkcyBkb25hdGlvbiB0byBmYW1pbHkgb2JqZWN0XG5cdCRzY29wZS5hZGREb25hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyByZWdleCBjaGVjayBuZWVkZWQgZm9yIGF1dG8gYWRkIGlmIGNsaWNrIHNhdmUgaW5zdGVhZCBvZiBhZGQgZmlyc3Rcblx0XHRpZigvXlswLTldKyguWzAtOV17MCwyfSk/JC8udGVzdCgkc2NvcGUubmV3RG9uYXRpb24uYW1vdW50KSkge1xuXHRcdFx0Ly92YXIgdGVtcCA9ICRzY29wZS5uZXdEb25hdGlvbjtcblx0XHRcdC8vdGVtcC5kYXRlID0gZGF0ZVNlcnZpY2UudG9EQih0ZW1wLmRhdGUpO1xuXHRcdFx0Y29uc29sZS5sb2coXCJkb25hdGlvblwiLCAkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdFx0JHNjb3BlLmNvcnAuZG9uYXRpb25zLnB1c2goJHNjb3BlLm5ld0RvbmF0aW9uKTtcblx0XHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHRcdFx0Y29uc29sZS5sb2coXCJhZGRlZCBkb25hdGlvblwiLCAkc2NvcGUuY29ycC5kb25hdGlvbnMpO1xuXHRcdH1cblx0fTtcblxufV0pOyIsImFwcC5jb250cm9sbGVyKCdjcmVhdGVMaXN0U2VhcmNoJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnQ29udGFjdExpc3REYXRhU2VydmljZScsICduZXdDb250YWN0TGlzdERhdGEnLCAndG9hc3RyJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgQ29udGFjdExpc3REYXRhU2VydmljZSxuZXdDb250YWN0TGlzdERhdGEsIHRvYXN0ciwgJHJvb3RTY29wZSkge1xuICAgICRzY29wZS50eXBlID17fTtcbiAgICAkc2NvcGUuYWdlPXt9O1xuICAgICRzY29wZS56aXA9e307XG5cdC8vIGluY2x1ZGUgbGlzdCBuZWVkcyB0byBiZSB3aXRoaW4gYW4gb2JqZWN0IGR1ZSB0byB0aGUgY2hlY2tib3hlcyBiZWluZyBpbiBhIHRhYmxlXG5cdCRzY29wZS5lbWFpbHMgPSB7fTtcbiAgICAkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzID0gW107XG5cdCRzY29wZS5pbmNsdWRlZEVtYWlscyA9IFtdO1xuXHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgPSA1MDtcblx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IDA7XG4gICAgLy8kcm9vdFNjb3BlLmhpZGUgPSB0cnVlO1xuXG5cblxuICAgICRzY29wZS5lbWFpbExpc3QgPSBbIF07XG4gICAgJHNjb3BlLnNlYXJjaExpc3RCdG4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLmVtYWlsTGlzdCA9IFtdO1xuXG5cbiAgICAgICAgLy9USElTIFdPUktTICAtLSB3aWxsIHNlYXJjaCBieSB6aXBcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICd6aXBDaycpIHtcblxuICAgICAgICAgICAgQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ3ppcCcsICRzY29wZS56aXAuZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcblx0XHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJHNjb3BlLmVtYWlsTGlzdCk7XG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XG5cdFx0XHRcdH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICAvL1RISVMgV09SS1MgLSB3aWxsIHNlYXJjaCBieSBhZ2VcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdhZ2VDaycpIHtcbiAgICAgICAgICAgIHZhciBhZ2UgPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnYWdlJywgJHNjb3BlLmFnZS5kYXRhKTtcbiAgICAgICAgICAgIGFnZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcblx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcblx0XHRcdH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9USElTIFdPUktTIC0tZ2V0IGFsbCBmYW1pbGllcyBpZiBmYW0gaXMgdHJ1ZVxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ2ZhbScpIHtcbiAgICAgICAgICAgIHZhciBmYW0gPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnZmFtaWx5JywgJycpO1xuICAgICAgICAgICAgZmFtLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcblx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xuXHRcdFx0fSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCBhbGwgY29ycCBpZiBjb3JwIGlzIHRydWVcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdjb3JwJykge1xuICAgICAgICAgICAgdmFyIGNvbXAgPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnY29tcGFueScsICcnKTtcbiAgICAgICAgICAgIGNvbXAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuXHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XG5cdFx0XHR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZW1wdHkgdGhlIHNlYXJjaCBib3hcbiAgICAgICAkc2NvcGUudHlwZT17fTtcbiAgICAgICAgJHNjb3BlLmFnZT17fTtcbiAgICAgICAgJHNjb3BlLnppcD17fTtcblxuICAgIH07XG4gICAgJHNjb3BlLnBvcHVsYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vYWxlcnQoJ3dvcmtpbmcnKTtcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyk7XG4gICAgICAgIGlmKG5ld0NvbnRhY3RMaXN0RGF0YS5wb3BMaXN0KCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMpKSB7XG5cdFx0XHR0b2FzdHIuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IGRlcGxveWVkIGNvbnRhY3QgbGlzdC4nKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBkZXBsb3kgY29udGFjdCBsaXN0LicpO1xuXHRcdH1cbiAgfTtcblxuXHQkc2NvcGUubG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLnRvdGFsRGlzcGxheWVkICs9IDUwO1xuXHR9O1xuXG5cdCRzY29wZS5zaG93QWxsID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS50b3RhbERpc3BsYXllZCA9ICRzY29wZS50b3RhbFJlc3VsdHM7XG5cdH07XG5cblx0JHNjb3BlLmNoZWNrQWxsID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgJGJ1dHRvbiA9IGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpO1xuXHRcdGlmKCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMubGVuZ3RoID09ICRzY29wZS50b3RhbFJlc3VsdHMpIHtcblx0XHRcdCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBbXTtcblx0XHRcdCRidXR0b24udmFsKFwiQ2hlY2sgQWxsXCIpO1xuXHRcdH1lbHNle1xuXHRcdFx0JHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyA9IGFuZ3VsYXIuY29weSgkc2NvcGUuZW1haWxMaXN0KTtcblx0XHRcdCRidXR0b24udmFsKFwiVW5jaGVjayBBbGxcIik7XG5cdFx0fVxuXHR9O1xufV0pO1xuXG5cbiIsImFwcC5mYWN0b3J5KCdDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgIGZ1bmN0aW9uIG1ha2VEYXRhQ2FsbCh0eXBlLCBwYXNzZWREYXRhKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGluIHRoZSBtYWtlIGRhdGEgY2FsbCcsIHR5cGUsIHBhc3NlZERhdGEpO1xuICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnLi4vY3JlYXRlTWFpbExpc3QnLFxuICAgICAgICAgICAgcGFyYW1zOiB7dHlwZTogdHlwZSwgc2VhcmNoOiBwYXNzZWREYXRhfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIG1ha2VEYXRhQ2FsbDogbWFrZURhdGFDYWxsXG4gICAgfTtcblxuXG59XSk7IiwiYXBwLnNlcnZpY2UoJ2RhdGVTZXJ2aWNlJywgWydNb21lbnRKUycsIGZ1bmN0aW9uIChtb21lbnQpIHtcblx0dmFyIGRiRm9ybWF0ID0gXCJZWVlZLU1NLUREXCI7XG5cdHZhciB1aUZvcm1hdCA9IFwiTS9EL1lZWVlcIjtcblxuXHR2YXIgdG9EYkZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0cmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoZGJGb3JtYXQpO1xuXHR9O1xuXG5cdHZhciBmcm9tRGJGb3JtYXQgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KHVpRm9ybWF0KTtcblx0fTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvREI6IHRvRGJGb3JtYXQsXG5cdFx0ZnJvbURCOiBmcm9tRGJGb3JtYXRcbiAgICB9O1xufV0pOyIsIi8vZWRpdCBmYW1pbHkgbW9kYWwgdGVtcGxhdGVcbmFwcC5jb250cm9sbGVyKCdlZGl0RmFtaWx5Q3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCAndmFsaWRTZXJ2aWNlJywgJ3RvYXN0cicsJ2RhdGVTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsLCAkbG9nLCBSZXN1bHRTZXJ2aWNlLCAkaHR0cCwgdmFsaWRTZXJ2aWNlLCB0b2FzdHIsIGRhdGVTZXJ2aWNlKSB7XG5cdC8vIHNldHMgdmFsaWRhdGlvbiBmcm9tIHNlcnZpY2UgZm9yIGRvbSBjYWxsc1xuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xuXHQvL3NlbmRzIHRoZSBhZHVsdHMgYW5kIGtpZHMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxuXHQkc2NvcGUuYWR1bHRzID0gUmVzdWx0U2VydmljZS5hZHVsdHM7XG5cdCRzY29wZS5raWRzID0gUmVzdWx0U2VydmljZS5raWRzO1xuXHQkc2NvcGUuZmFtaWx5ID0ge1xuXHRcdGFkdWx0T25lOiB7fSxcblx0XHRhZHVsdFR3bzoge30sXG5cdFx0ZW1lcmdlbmN5OiB7fSxcblx0XHRjaGlsZHJlbjogW10sXG5cdFx0ZG9uYXRpb25zOiBbXVxuXHR9O1xuXHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcblx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cblx0JHNjb3BlLmNsZWFyRmFtaWx5ID0gZnVuY3Rpb24gKGZvcm1zQXJyYXkpIHtcblx0XHR0b2FzdHIuZXJyb3IoJ0NhbmNlbGxlZCcpO1xuXHRcdCRzY29wZS5mYW1pbHkgPSB7XG5cdFx0XHRhZHVsdE9uZToge30sXG5cdFx0XHRhZHVsdFR3bzoge30sXG5cdFx0XHRlbWVyZ2VuY3k6IHt9LFxuXHRcdFx0Y2hpbGRyZW46IFtdLFxuXHRcdFx0ZG9uYXRpb25zOiBbXVxuXHRcdH07XG5cdFx0JHNjb3BlLm5ld0NoaWxkID0ge307XG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdFx0Zm9ybXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHQkKCcjJysgdiArJyAuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJCh0aGlzKS5kYXRhKCdwbGFjZWhvbGRlcicpKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cblxuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuXHQkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzaXplLCBpZCkge1xuXHRcdGNvbnNvbGUubG9nKCdmYW1pbHkgY2FsbCcsIGlkKTtcblx0XHRyZXR1cm4gJGh0dHAoe1xuXHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdHVybDogJy4uL2ZhbWlseScsXG5cdFx0XHRwYXJhbXM6IHtpZDogaWR9XG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0cmVzcG9uc2UuZGF0YS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwicmVmb3JtYXR0ZWRcIiwgZGF0ZVNlcnZpY2UuZnJvbURCKGFbaV0uYmlydGhkYXRlKSk7XG5cdFx0XHRcdGFbaV0uYmlydGhkYXRlID0gZGF0ZVNlcnZpY2UuZnJvbURCKHYuYmlydGhkYXRlKTtcblx0XHRcdH0pO1xuXHRcdFx0cmVzcG9uc2UuZGF0YS5kb25hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS5mcm9tREIodi5kYXRlKTtcblx0XHRcdH0pO1xuXHRcdFx0JHNjb3BlLmZhbWlseSA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0XHRcdFx0YW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9lZGl0ZmFtaWx5Lmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRzY29wZTogJHNjb3BlLFxuXHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0aXRlbXM6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkc2NvcGUuZmFtaWx5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuXHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLnRvZ2dsZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSAhJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkO1xuXHR9O1xuXG5cdC8vIHNhdmUgZmFtaWx5XG5cdCRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiU2F2ZSBzdWJtaXR0ZWRcIiwgJHNjb3BlLmZhbWlseSk7XG5cblx0XHQvLyBjaGVjayBmb3IgY2hpbGRyZW4sIHJ1biB0b0RCIGZvcm1hdHRpbmcgYmVmb3JlIHNlbmRpbmdcblx0XHRpZigkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XG5cdFx0XHRcdGFbaV0uYmlydGhkYXRlID0gZGF0ZVNlcnZpY2UudG9EQih2LmJpcnRoZGF0ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBjaGVjayBmb3IgZG9uYXRpb24sIHJ1biB0b0RCIGZvcm1hdHRpbmcgYmVmb3JlIHNlbmRpbmdcblx0XHRpZigkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcblx0XHRcdFx0YVtpXS5kYXRlID0gZGF0ZVNlcnZpY2UudG9EQih2LmRhdGUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coXCJTYXZpbmcgZmFtaWx5LCBhZnRlciB0b0RCIGJpcnRoZGF0ZXNcIiwgJHNjb3BlLmZhbWlseSk7XG5cblx0XHQvLyBpZiBoYXMgaWQsIHRoZW4gcG9zdFxuXG5cdFx0aWYoISRzY29wZS5mYW1pbHkuaWQpIHtcblxuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJBZGRGYW1JbmZvRm9ybVwiLCBcIkFkZEZhbUVtZXJGb3JtXCJdKSkge1xuXHRcdFx0XHQkaHR0cCh7XG5cdFx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdFx0dXJsOiAnL2ZhbWlseScsXG5cdFx0XHRcdFx0ZGF0YToge2ZhbWlseTogJHNjb3BlLmZhbWlseX1cblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQb3N0ZWQgZmFtaWx5LCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5hZHVsdE9uZSA9IChyZXMuZGF0YS5hZHVsdE9uZSkgPyByZXMuZGF0YS5hZHVsdE9uZSA6IHt9O1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRUd28gPSAocmVzLmRhdGEuYWR1bHRUd28pID8gcmVzLmRhdGEuYWR1bHRUd28gOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmVtZXJnZW5jeSA9IChyZXMuZGF0YS5lbWVyZ2VuY3kpID8gcmVzLmRhdGEuZW1lcmdlbmN5IDoge307XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4gPSAocmVzLmRhdGEuY2hpbGRyZW4pID8gcmVzLmRhdGEuY2hpbGRyZW4gOiBbXTtcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDogW107XG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0ZhbWlseSBzYXZlZCEnKTtcblx0XHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGFkZCBmYW1pbHknKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRvYXN0ci5lcnJvcignVW5hdXRob3JpemVkIGNoYXJhY3RlcicpO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkFkZCBmYW1pbHkgZmFpbGVkIGlucHV0IHRlc3RzXCIpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiRWRpdEZhbUluZm9Gb3JtXCIsIFwiRWRpdEZhbUVtZXJGb3JtXCJdKSkge1xuXHRcdFx0XHQvLyB1cGRhdGUgZmFtaWx5IC0gaGFzIG5vIGlkXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwidXBkYXRlIGZhbWlseVwiLCAkc2NvcGUuZmFtaWx5KTtcblx0XHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ1BVVCcsXG5cdFx0XHRcdFx0dXJsOiAnL2ZhbWlseScsXG5cdFx0XHRcdFx0ZGF0YToge2ZhbWlseTogJHNjb3BlLmZhbWlseX1cblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQdXQgZmFtaWx5LCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5hZHVsdE9uZSA9IChyZXMuZGF0YS5hZHVsdE9uZSkgPyByZXMuZGF0YS5hZHVsdE9uZSA6IHt9O1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRUd28gPSAocmVzLmRhdGEuYWR1bHRUd28pID8gcmVzLmRhdGEuYWR1bHRUd28gOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmVtZXJnZW5jeSA9IChyZXMuZGF0YS5lbWVyZ2VuY3kpID8gcmVzLmRhdGEuZW1lcmdlbmN5IDoge307XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4gPSAocmVzLmRhdGEuY2hpbGRyZW4pID8gcmVzLmRhdGEuY2hpbGRyZW4gOiBbXTtcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDogW107XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVkaXQgZmFtaWx5IGZhaWxlZCBpbnB1dCB0ZXN0c1wiKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gZm9yIGFwcGVuZGluZyBjaGlsZHJlbiB0byBtb2RlbCBiZWZvcmUgc2F2aW5nIG5ldyBmYW1pbHlcblx0JHNjb3BlLmFkZENoaWxkID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIGV4aXN0cyBjaGVjayBuZWVkZWQgZm9yIGF1dG8gYWRkIGlmIGNsaWNrIHNhdmUgaW5zdGVhZCBvZiBhZGQgZmlyc3Rcblx0XHRpZigkc2NvcGUubmV3Q2hpbGQuZmlyc3ROYW1lKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcImNoaWxkIGFkZGVkXCIsICRzY29wZS5uZXdDaGlsZCwgJHNjb3BlLmZhbWlseS5jaGlsZHJlbik7XG5cdFx0XHQvLyBpZiB0cnVlLCB0aGVuIHVwZGF0ZSB0aGF0IGluZGV4XG5cdFx0XHRpZigkc2NvcGUuZWRpdGluZ0NoaWxkKSB7XG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW5bJHNjb3BlLmVkaXRpbmdDaGlsZF0gPSAkc2NvcGUubmV3Q2hpbGQ7XG5cdFx0XHRcdCRzY29wZS5lZGl0aW5nQ2hpbGQgPSBmYWxzZTtcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NoaWxkIHVwZGF0ZWQhJyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdC8vIGVsc2UgcHVzaCB0byBhcnJheVxuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLnB1c2goJHNjb3BlLm5ld0NoaWxkKTtcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NoaWxkIGFkZGVkIScpO1xuXHRcdFx0fVxuXHRcdFx0JHNjb3BlLm5ld0NoaWxkID0ge307XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGVkaXQgY2hpbGQgb24gdGhlIGFkZCBjaGlsZHJlbiB0YWIgb2YgYWRkIGZhbWlseVxuXHQkc2NvcGUuZWRpdENoaWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0Ly8gc2F2ZSBpbmRleCBvZiBjaGlsZCBlZGl0aW5nXG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGluZGV4O1xuXHRcdCRzY29wZS5uZXdDaGlsZCA9ICRzY29wZS5mYW1pbHkuY2hpbGRyZW5baW5kZXhdO1xuXHR9O1xuXG5cdCRzY29wZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdGNvbnNvbGUubG9nKFwiaW4gcmVtb3ZlIGNoaWxkIGluZGV4XCIsIGluZGV4LCBcIiBlZGl0IFwiLCAkc2NvcGUuZWRpdGluZ0NoaWxkKTtcblx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG5cdFx0aWYoaW5kZXggPT0gJHNjb3BlLmVkaXRpbmdDaGlsZCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJlZGl0IG1hdGNoXCIpO1xuXHRcdFx0JHNjb3BlLmNsZWFyQ2hpbGQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIm5vIGVkaXQgbWF0Y2hcIik7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGNsZWFycyB0ZXh0IGJveGVzIGluIGFkZCBmYW1pbHktPmNoaWxkcmVuIHRhYlxuXHQkc2NvcGUuY2xlYXJDaGlsZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcImluIGNsZWFyIGNoaWxkXCIpO1xuXHRcdCRzY29wZS5uZXdDaGlsZCA9IHtcblx0XHRcdGZpcnN0TmFtZTogJycsXG5cdFx0XHRsYXN0TmFtZTogJycsXG5cdFx0XHRiaXJ0aGRhdGU6ICcnLFxuXHRcdFx0c2Nob29sOiAnJyxcblx0XHRcdG5vdGVzOiAnJ1xuXHRcdH07XG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGZhbHNlO1xuXHR9O1xuXG5cblx0Ly8gYWRkcyBkb25hdGlvbiB0byBmYW1pbHkgb2JqZWN0XG5cbi8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxuXHQkc2NvcGUuYWRkRG9uYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly9jb25zb2xlLmxvZyhcImFkZCBkb25hdGlvblwiLCAkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdC8vIHJlZ2V4IGNoZWNrIG5lZWRlZCBmb3IgYXV0byBhZGQgaWYgY2xpY2sgc2F2ZSBpbnN0ZWFkIG9mIGFkZCBmaXJzdFxuXHRcdGlmKC9eWzAtOV0rKC5bMC05XXswLDJ9KT8kLy50ZXN0KCRzY29wZS5uZXdEb25hdGlvbi5hbW91bnQpKSB7XG5cdFx0XHQvL3ZhciB0ZW1wID0gJHNjb3BlLm5ld0RvbmF0aW9uO1xuXHRcdFx0Ly90ZW1wLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHRlbXAuZGF0ZSk7XG5cdFx0XHRjb25zb2xlLmxvZyhcImFkZCBkb25hdGlvblwiLCAkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMucHVzaCgkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdFx0XHRjb25zb2xlLmxvZyhcImFkZGVkIGRvbmF0aW9uXCIsICRzY29wZS5mYW1pbHkuZG9uYXRpb25zKTtcblx0XHR9XG5cdH07XG5cblx0Ly8vLyBwcmV2ZW50IGFjY2lkZW50YWwgYmFja3Ncblx0Ly8kc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oIGV2ZW50LCBvbGRVcmwgKSB7XG5cdC8vXHRjb25zb2xlLmxvZyhcIm9sZCB1cmw6IFwiLCBvbGRVcmwpO1xuXHQvL1x0aWYoLyhhZGRmYW1pbHkpLy50ZXN0KG9sZFVybCkpIHtcblx0Ly9cdFx0dmFyIGFuc3dlciA9IGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlP1wiKTtcblx0Ly9cdFx0aWYgKCFhbnN3ZXIpIHtcblx0Ly9cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvL1x0XHR9XG5cdC8vXHR9XG5cdC8vfSk7XG5cbn1dKTsiLCIvL2NvbnRyb2xsZXJzIGZvciBsb2dpblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ2F1dGhTZXJ2aWNlJywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJ3RvYXN0cicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIGF1dGhTZXJ2aWNlLCAkbG9jYXRpb24sICRyb290U2NvcGUsIHRvYXN0cil7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0Y29uc29sZS5sb2coXCJsb2dpbiBzdWJtaXR0ZWRcIiwgJHNjb3BlLmZvcm0pO1xuICAgICAgICAkaHR0cC5wb3N0KCcvbG9naW4nLCAkc2NvcGUuZm9ybSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGF1dGhTZXJ2aWNlLnNhdmVUb2tlbihyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvc2VhcmNoXCIpO1xuICAgICAgICAgICAgfSxmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcignaW5jb3JyZWN0IHVzZXJuYW1lIG9yIHBhc3N3b3JkJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xufV0pO1xuIiwiXG4vL1RoaXMgc2hvdWxkIGdldCB0aGUgc2VhcmNoIGl0ZW1cbmFwcC5jb250cm9sbGVyKCdzZWFyY2hGdW5jdGlvbicsIFsnJHNjb3BlJywgJyRodHRwJywgJ1Jlc3VsdFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgUmVzdWx0U2VydmljZSkge1xuICAgICRzY29wZS5mb3JtSW5wdXQ9e307XG5cbiAgICAkc2NvcGUuc2VhcmNoQnRuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3Bhc3NlcyBpbiBzZWFyY2ggdGV4dCB0byBzZXJ2aWNlXG4gICAgICAgUmVzdWx0U2VydmljZS5tYWtlRGF0YUNhbGwoJHNjb3BlLmZvcm1JbnB1dC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIGlucHV0IHRleHQnLCAkc2NvcGUuZm9ybUlucHV0KTtcbiAgICAgICAgLy9lbXB0eXMgdGhlIHNlYXJjaCBib3hcbiAgICAgICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcbiAgICB9O1xuXG59XSk7XG4iLCIvL1RoaXMgc2VydmljZSBzaG91bGQgcGFzcyBkYXRhIGJldHdlZW4gY29udHJvbGxlcnNcbmFwcC5mYWN0b3J5KCdSZXN1bHRTZXJ2aWNlJywgWyckaHR0cCcsZnVuY3Rpb24oJGh0dHApIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciBhZHVsdHMgPSBbXTtcbiAgICB2YXIgY29tcGFuaWVzID0gW107XG4gICAgdmFyIGtpZHMgPSBbXTtcblxuICAgIHZhciBtYWtlRGF0YUNhbGwgPSBmdW5jdGlvbihwYXNzZWREYXRhKSB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnLi4vc2VhcmNoJyxcbiAgICAgICAgICAgIHBhcmFtczp7c2VhcmNoOnBhc3NlZERhdGF9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIGdldENvbXBhbmllcyhyZXN1bHRzKTtcbiAgICAgICAgICAgIGdldEtpZHMocmVzdWx0cyk7XG4gICAgICAgICAgICBnZXRBZHVsdHMocmVzdWx0cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGdldENvbXBhbmllcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBjb21wYW5pZXMuc3BsaWNlKDAsY29tcGFuaWVzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NvbXBhbnknKVxuICAgICAgICAgICAgICAgIGNvbXBhbmllcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRFbGVtZW50MShhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnQxJyxjb21wYW5pZXMpO1xuICAgICAgICByZXR1cm4gY29tcGFuaWVzXG4gICAgfTtcblxuICAgIHZhciBnZXRBZHVsdHMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICB2YXIgZ2V0RWxlbWVudDIgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAgYWR1bHRzLnNwbGljZSgwLGFkdWx0cy5sZW5ndGgpO1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdhZHVsdCcpXG4gICAgICAgICAgICAgICAgICAgIGFkdWx0cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0RWxlbWVudDIoYXJyYXkpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiBnZXRFbGVtZW50MicsIGFkdWx0cyk7XG4gICAgICAgIHJldHVybiBhZHVsdHNcbiAgICB9O1xuXG4gICAgdmFyIGdldEtpZHMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICB2YXIgZ2V0RWxlbWVudDMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAga2lkcy5zcGxpY2UoMCxraWRzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NoaWxkJylcbiAgICAgICAgICAgICAgICAgICAga2lkcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0RWxlbWVudDMoYXJyYXkpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBnZXRFbGVtZW50czMnLCBraWRzKTtcbiAgICAgICAgcmV0dXJuIGtpZHNcbiAgICB9O1xuXG4gICAgLy9wdWJsaWNcbiAgICB2YXIgcHVibGljQXBpID0ge1xuICAgICAgICBnZXRLaWRzOiBnZXRLaWRzLFxuICAgICAgICBnZXRBZHVsdHM6IGdldEFkdWx0cyxcbiAgICAgICAgZ2V0Q29tcGFuaWVzOiBnZXRDb21wYW5pZXMsXG4gICAgICAgIG1ha2VEYXRhQ2FsbDogbWFrZURhdGFDYWxsLFxuICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxuICAgICAgICBjb21wYW5pZXM6IGNvbXBhbmllcyxcbiAgICAgICAgYWR1bHRzOiBhZHVsdHMsXG4gICAgICAgIGtpZHM6IGtpZHNcbiAgICB9O1xuICAgIHJldHVybiBwdWJsaWNBcGk7XG59XSk7IiwiLy8gUGxlYXNlIG5vdGUgdGhhdCAkbW9kYWxJbnN0YW5jZSByZXByZXNlbnRzIGEgbW9kYWwgd2luZG93IChpbnN0YW5jZSkgZGVwZW5kZW5jeS5cbi8vIEl0IGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgJHVpYk1vZGFsIHNlcnZpY2UgdXNlZCBhYm92ZS5cblxuLy9uZWVkZWQgZm9yIG1vZGFsPz8gcHJldHR5IHN1cmVcbmFwcC5jb250cm9sbGVyKCdNb2RhbEluc3RhbmNlQ3RybCcsWyckc2NvcGUnLCckbW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlKSB7XG5cbiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5zZWxlY3RlZC5pdGVtKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgfTtcbn1dKTsiLCJhcHAuY29udHJvbGxlcignbmF2Q3RybCcsIFsnYXV0aFNlcnZpY2UnLCckc2NvcGUnLCckcm9vdFNjb3BlJywnJGxvY2F0aW9uJywgZnVuY3Rpb24oYXV0aFNlcnZpY2UsICRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uKXtcbiAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG5cbiAgICBpZigkcm9vdFNjb3BlLnVzZXIgJiYgJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lKXtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ob21lJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICB9XG59XSk7XG4iLCIvLyBBamF4IGZvciBjcmVhdGluZyB0aGUgY29udGFjdCBsaXN0IGluIGNvbnN0YW50IGNvbnRhY3RcbmFwcC5jb250cm9sbGVyKCduZXdDb250YWN0TGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywgJyRyb290U2NvcGUnLCAndG9hc3RyJywgZnVuY3Rpb24obmV3Q29udGFjdExpc3REYXRhLCAkc2NvcGUsICRyb290U2NvcGUsIHRvYXN0cikge1xuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XG5cbiAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoaWRlJyk7XG4gICAgICAgICRyb290U2NvcGUuaGlkZSA9IHRydWU7XG4gICAgfTtcblxuICAgICRzY29wZS5saXN0bmFtZSA9IHt9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBsaXN0OiBcIiArICRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG4gICAgICAgIC8vcGFzc2VzIGxpc3QgbmFtZSBzZXJ2aWNlXG4gICAgICAgIG5ld0NvbnRhY3RMaXN0RGF0YS5wb3N0TGlzdCgkc2NvcGUubGlzdG5hbWUuaW5wdXQsIGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGlmKHN0YXR1cyA9PT0gdHJ1ZSkge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdsaXN0ICMnLG5ld0NvbnRhY3RMaXN0RGF0YS5saXN0TnVtKTtcblx0XHRcdFx0JHNjb3BlLmxpc3RuYW1lPXt9O1xuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgbGlzdCcpO1xuXHRcdFx0XHQkc2NvcGUuaGlkZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcImZhaWxlZCB0byBjcmVhdGUgbGlzdFwiKTtcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGxpc3QnKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXG4gICAgfTtcbn1dKTtcblxuXG4iLCJcbmFwcC5zZXJ2aWNlKCduZXdDb250YWN0TGlzdERhdGEnLCBbJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLFxuICAgIGZ1bmN0aW9uIChDb250YWN0TGlzdERhdGFTZXJ2aWNlLCAkaHR0cCwgJHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGxpc3ROdW0gPSBcIlwiO1xuICAgICAgICB2YXIgaW1wb3J0RGF0YUFycmF5ID1bXTtcblxuICAgICAgICB0aGlzLnBvc3RMaXN0ID0gZnVuY3Rpb24gKG5hbWUsIGNiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRpZCB0aGUgbmFtZSBtYWtlIGl0IHRvIHRoZSBzZXJ2aWNlPyBcIiArIG5hbWUgKTtcblxuXHRcdFx0Ly8kdGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlO30sIDUwMDApO1xuXHRcdFx0Ly9yZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9uZXdDb250YWN0TGlzdCcsIHtuYW1lOiBuYW1lfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICBsaXN0TnVtID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklkPyBcIiwgbGlzdE51bSk7XG5cdFx0XHRcdGNiKHRydWUpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gY3JlYXRlXCIsIGRhdGEpOyAvL2Vycm9yXG5cdFx0XHRcdC8vcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRjYihmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wb3BMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YU9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICBcImltcG9ydERhdGFBcnJheVwiOiBpbXBvcnREYXRhQXJyYXksXG4gICAgICAgICAgICAgICAgXCJsaXN0TnVtXCI6IGxpc3ROdW1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRvIHBvcExpc3QnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXBvcnREYXRhQXJyYXk6ICcsdGhpcy5pbXBvcnREYXRhQXJyYXksICdcXG50eXBlOiAnLCB0eXBlb2YgdGhpcy5pbXBvcnREYXRhQXJyYXkpO1xuICAgICAgICAgICAgZ2V0Q2hlY2tlZChsaXN0KTtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9wb3B1bGF0ZUNvbnRhY3RMaXN0JywgdGhpcy5kYXRhT2JqZWN0KS50aGVuKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3N0ZWQnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW1wb3J0RGF0YUFycmF5OiAnLHRoaXMuaW1wb3J0RGF0YUFycmF5LCAnXFxudHlwZTogJywgdHlwZW9mIHRoaXMuaW1wb3J0RGF0YUFycmF5KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuICAgICAgICB9O1xuICAgICAgICAvL2dldCBhbGwgdGhlIGNoZWNrZWQgZWxlbWVudHMgYW5kIHN0dWZmIHRoZW0gaW4gYW4gYXJyYXlcbiAgICAgICAgdmFyIGdldENoZWNrZWQgPSBmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldENoZWNrZWQgaXMgcnVubmluZycpO1xuICAgICAgICAgICAgbC5mb3JFYWNoKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWN0T2JqZWN0ID1cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5lbWFpbCB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOm9iamVjdC5maXJzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxhc3RfbmFtZVwiOiBvYmplY3QubGFzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiBvYmplY3QuY29tcGFueSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkcmVzc2VzXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eTogb2JqZWN0LmNpdHkgfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGFjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydERhdGFBcnJheS5wdXNoKHRoaXMuY29udGFjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuXG4iLCJhcHAuY29udHJvbGxlcigncG9wTGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywnJGh0dHAnLCBmdW5jdGlvbihuZXdDb250YWN0TGlzdERhdGEsICRzY29wZSwgJGh0dHApIHtcbiAgICAvL2RhdGEgdG8gY3JlYXRlIGEgbmV3IGNvbnRhY3QgbGlzdFxuXG5cbiAgICAkc2NvcGUubGlzdE5hbWUgPSB7fTtcblxuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBsaXN0OiBcIiArIHNjb3BlLmxpc3ROYW1lLmlucHV0KTtcbiAgICAgICAgLy9wYXNzZXMgaW4gc2VhcmNoIHRleHQgdG8gc2VydmljZVxuICAgICAgICBuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgpO1xuICAgICAgICAvL3ZhciBsaXN0RW5kID0ge1xuICAgICAgICAvLyAgICBcImxpc3RzXCI6IFtsaXN0TnVtXSxcbiAgICAgICAgLy8gICAgXCJjb2x1bW5fbmFtZXNcIjogW1xuICAgICAgICAvLyAgICBcIkVNQUlMXCIsXG4gICAgICAgIC8vICAgIFwiRklSU1QgTkFNRVwiLFxuICAgICAgICAvLyAgICBcIkxBU1QgTkFNRVwiLFxuICAgICAgICAvLyAgICBcIkNJVFlcIixcbiAgICAgICAgLy8gICAgXCJDT01QQU5ZIE5BTUVcIlxuICAgICAgICAvL119XG5cblxuICAgICAgICAkc2NvcGUubGlzdE5hbWU9e307XG4gICAgfTtcbn1dKTtcblxuIiwiXG4vL3JlZ2lzdGVyIGNvbnRyb2xsZXJcbmFwcC5jb250cm9sbGVyKCdyZWdpc3RlckN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJ3RvYXN0cicsICd2YWxpZFNlcnZpY2UnLCAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgdG9hc3RyLCB2YWxpZFNlcnZpY2UpIHtcblx0Ly8gc2V0cyB2YWxpZGF0aW9uIGZyb20gc2VydmljZSBmb3IgZG9tIGNhbGxzXG5cdCRzY29wZS52YWxpZGF0ZUlucHV0ID0gdmFsaWRTZXJ2aWNlLnZhbGlkYXRlSW5wdXQ7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlZ2lzdGVyQ3RybFwiKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVnaXN0ZXJDb250cm9sbGVyIHN1Ym1pdDonLCAkc2NvcGUuZm9ybSwgJHNjb3BlLmZvcm0udXNlcm5hbWUpO1xuICAgICAgICAkaHR0cC5wb3N0KCcvcmVnaXN0ZXInLCAkc2NvcGUuZm9ybSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2luZGV4XCIpO1xuICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiYWRtaW4gY3JlYXRlZFwiKTtcbiAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ2ZhaWxlZCB0byBhZGQgYWRtaW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59XSk7XG4iLCJhcHAuY29udHJvbGxlcigncmVzZXRDdHJsJywgWyAnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsICd0b2FzdHInLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSwgdG9hc3RyKSB7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VkaXQgcGFzc3dvcmQ6JywgJHNjb3BlLmZvcm0pO1xuXHRcdHZhciB0ZW1wVXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblx0XHRjb25zb2xlLmxvZyhcImF1dGggdXNlclwiLCB0ZW1wVXNlcik7XG5cdFx0Ly8gYWRkIGluIGlkLCB1c2VybmFtZVxuXHRcdHZhciB1c2VyID0gJHNjb3BlLmZvcm07XG5cdFx0dXNlci5pZCA9IHRlbXBVc2VyLmlkO1xuXHRcdHVzZXIudXNlcm5hbWUgPSB0ZW1wVXNlci51c2VybmFtZTtcblx0XHRjb25zb2xlLmxvZyhcInByZXBhcmVkXCIsIHVzZXIpO1xuICAgICAgICAkaHR0cC5wdXQoJy9hZG1pbicsIHVzZXIpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ3Bhc3N3b3JkIGNoYW5nZWQnKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9pbmRleFwiKTtcbiAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcignZmFpbGVkIHRvIHVwZGF0ZSBwYXNzd29yZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbn1dKTtcbiIsImFwcC5zZXJ2aWNlKCd2YWxpZFNlcnZpY2UnLCBbZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHZhbGlkYXRlSW5wdXQgPSBmdW5jdGlvbiAodHlwZSwgaWQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInZhbGlkYXRlSW5wdXQoKVwiKTtcbiAgICAgICAgLy8gc3RvcmVzIHRoZSBmb3JtIGJlaW5nIGNhbGxlZCBvblxuICAgICAgICB2YXIgcGF0dGVybjtcbiAgICAgICAgdmFyICRvYmogPSAoaWQpID8gJCgnIycrIGlkKSA6IGZhbHNlO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwib2JqZWN0IGlzIFwiLCAkb2JqLCB0eXBlLCBpZCk7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjaXR5XCI6XG4gICAgICAgICAgICBjYXNlIFwic3RhdGVcIjpcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgYW5kIGFscGhhIGNoYXJzLCBhcyB3ZWxsIGFzIHdoaXRlIHNwYWNlIGFuZCBhIGZldyBleHRyYSBjaGFyc1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLXpcXHMsLictXXswLDI4fS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29ycE5hbWVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrLV17MCw3NX0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSYtXXswLDUwfS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiemlwXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eWzAtOV17NX0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwaG9uZVwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXihbKF1bMC05XXszfVspXXxbMC05XXszfSlbXFxzXFwtLl0/WzAtOV17M31bXFxzXFwtLl0/WzAtOV17NH0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTkuXyUrLV0rQFthLXpBLVowLTkuLV0rXFwuW2EtekEtWl17Mix9JC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibm90ZXNcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSY8PlxcW1xcXXt9XFwtPVwifGBcXFxcXFwvXXswLDI1MH0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImV4dFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHM6LV17MCwxNX0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgICAgICAgICAgLy9wYXR0ZXJuID0gL14yMFswLTldezJ9Wy1dKDBbMS05XXwxWzAtMl0pWy1dKDBbMS05XXxbMS0yXVswLTldfDNbMDFdKSQvO1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXigwP1sxLTldfDFbMC0yXSlcXC8oMD9bMS05XXxbMS0yXVswLTldfDNbMDFdKVxcLzIwWzAtOV17Mn0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJiaXJ0aGRhdGVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oMD9bMS05XXwxWzAtMl0pXFwvKDA/WzEtOV18WzEtMl1bMC05XXwzWzAxXSlcXC8oKDE5OVswLTldfDIwKVswLTldezJ9KSQvO1xuICAgICAgICAgICAgICAgIC8vcGF0dGVybiA9IC9eKDE5OVswLTldfDIwWzAtOV17Mn0pWy1dKDBbMS05XXwxWzAtMl0pWy1dKDBbMS05XXxbMS0yXVswLTldfDNbMDFdKSQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFtb3VudFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXihbXFwkXT9bXFxkXSsoWy5dW1xcZF17Mn0pPyl7MSwxMH0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcblx0XHRcdGNhc2UgXCJ1c2VybmFtZVwiOlxuXHRcdFx0XHRwYXR0ZXJuID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pW2EtekEtWlxcZF9cXC1dezgsMjB9JC87XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInBhc3N3b3JkXCI6XG5cdFx0XHRcdC8vcGF0dGVybiA9IC9eKFthLXpdK1tBLVpdK1swLTldK1stX10/KXs4LDIwfSQvO1xuXHRcdFx0XHRwYXR0ZXJuID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpW2EtekEtWlxcZF17OCwyMH0kLztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwic2VhcmNoXCI6XG5cdFx0XHRcdHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOystXXswLDc1fSQvO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJhZ2VcIjpcblx0XHRcdFx0cGF0dGVybiA9IC9eWzAtOV17MSwyfSQvO1xuXHRcdFx0XHRicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImludmFsaWQgY2xhc3Mgc2VhcmNoXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHJlcXVpcmVkIG9yIHRyaW1tZWQgbGVuZ3RoIGlzIG5vdCAwLCB0aGVuIHZhbGlkYXRlIGluZm9cbiAgICAgICAgaWYoJG9iai5hdHRyKCdyZXF1aXJlZCcpIHx8ICRvYmoudmFsKCkpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrcyBpZiB2YWx1ZSBtYXRjaGVzIHJlZ2V4IGZvciBmaWVsZCB0eXBlXG4gICAgICAgICAgICBpZighcGF0dGVybi50ZXN0KCRvYmoudmFsKCkudHJpbSgpKSB8fCAkb2JqLnZhbCgpLnRyaW0oKS5sZW5ndGggPT0gMCAmJiAkb2JqLmF0dHIoJ3JlcXVpcmVkJykpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBmYWlscywgYWRkcyBpbnZhbGlkIGNsYXNzIChoaWdobGlnaHRpbmcpLCBjaGFuZ2VzIHBsYWNlaG9sZGVyIHRvIHdoYXQgc2hvdWxkIGJlIGVudGVyZWRcbiAgICAgICAgICAgICAgICAkb2JqLmFkZENsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkb2JqLmRhdGEoJ2ludmFsaWQnKSkudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHR5cGUsICcgZmFpbGVkIHRlc3QnLCBwYXR0ZXJuKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBwYXNzZXMsIHJlbW92ZXMgaW52YWxpZCBjbGFzcywgcmVzZXRzIHBsYWNlaG9sZGVyIHRvIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAkb2JqLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkb2JqLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codHlwZSwgJyBwYXNzZWQgdGVzdCcsIHBhdHRlcm4pO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cblx0dmFyIHZhbGlkYXRlRm9ybSA9IGZ1bmN0aW9uIChmb3Jtcykge1xuXHRcdHZhciBwYXNzID0gdHJ1ZTtcblx0XHRmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XG5cdFx0XHQkKCcjJysgdiArJyAuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYodmFsaWRhdGVJbnB1dCgkKHRoaXMpLmRhdGEoJ3R5cGUnKSwgJCh0aGlzKS5hdHRyKCdpZCcpKSA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJCh0aGlzKS5hdHRyKCdpZCcpICtcIiBmYWlsZWQgdGhlIHRlc3QgXCIrICQodGhpcykuZGF0YSgndHlwZScpICtcIiBlbnRlcmVkIGluZm86IFwiKyAkKHRoaXMpLnZhbCgpKTtcblx0XHRcdFx0XHRwYXNzID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHJldHVybiBwYXNzO1xuXHR9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWRhdGVJbnB1dDogdmFsaWRhdGVJbnB1dCxcblx0XHR2YWxpZGF0ZUZvcm06IHZhbGlkYXRlRm9ybVxuICAgIH07XG59XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
