var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"leo/static/login.html"}).when("/search",{templateUrl:"leo/private/search.html"}).when("/register",{templateUrl:"leo/static/register.html"}).when("/contactList",{templateUrl:"leo/private/contactList.html"}).when("/addfamily",{templateUrl:"leo/private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"leo/private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"leo/private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,a){return{request:function(t){return t.headers=t.headers||{},a.isAuthed()&&(t.headers.Authorization="Bearer "+a.getToken()),t},response:function(a){return 401===a.status&&e.path("/"),a||t.when(a)},responseError:function(a){return 401===a.status?e.path("/"):console.log(a.status),t.reject(a)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var a=e.split(".")[1],o=a.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),a=Math.round((new Date).getTime()/1e3)<=e.exp;return a||this.logout(),a}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService","toastr",function(t,e,a,o,n,i,l,r){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(e){r.error("Cancelled"),t.corp={info:{},contact:{},donations:[]},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"leo/corporation",params:{id:i}}).then(function(n){n.data.donations.forEach(function(t,e,a){a[e].date=l.fromDB(t.date)}),t.corp=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"leo/private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.donations.length&&t.corp.donations.forEach(function(t,e,a){a[e].date=l.toDB(t.date)}),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/leo/corporation",data:{corp:t.corp}}).then(function(e){console.log("Put corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/leo/corporation",data:{corp:t.corp}}).then(function(e){console.log("Posted corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{},r.success("Corporation added!")},function(){r.error("Failed to add corporation")}):(r.error("Unauthorized character"),console.log("Add corp input tests failed"))},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("donation",t.newDonation),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.corp.donations))}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,e,a,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&a.makeDataCall("zip",t.zip.data).then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var e=a.makeDataCall("age",t.age.data);e.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=a.makeDataCall("family","");o.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=a.makeDataCall("company","");i.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(e){var a=angular.element(e.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],a.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),a.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,e){function a(a,o){var n=e.defer();return console.log("this is in the make data call",a,o),t({method:"GET",url:"leo/createMailList",params:{type:a,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:a}}]),app.service("dateService",["MomentJS",function(t){var e="YYYY-MM-DD",a="M/D/YYYY",o=function(a){return t(a).format(e)},n=function(e){return t(e).format(a)};return{toDB:o,fromDB:n}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","toastr","dateService",function(t,e,a,o,n,i,l,r){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(e){l.error("Cancelled"),t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../leo/family",params:{id:i}}).then(function(n){console.log(n.data),n.data.children.forEach(function(t,e,a){console.log("reformatted",r.fromDB(a[e].birthdate)),a[e].birthdate=r.fromDB(t.birthdate)}),n.data.donations.forEach(function(t,e,a){a[e].date=r.fromDB(t.date)}),t.family=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"leo/private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.children.length&&t.family.children.forEach(function(t,e,a){a[e].birthdate=r.toDB(t.birthdate)}),t.family.donations.length&&t.family.donations.forEach(function(t,e,a){a[e].date=r.toDB(t.date)}),console.log("Saving family, after toDB birthdates",t.family),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("update family",t.family),n({method:"PUT",url:"/leo/family",data:{family:t.family}}).then(function(e){console.log("Put family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/leo/family",data:{family:t.family}}).then(function(e){console.log("Posted family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[],l.success("Family saved!")},function(){l.error("Failed to add family")}):(l.error("Unauthorized character"),console.log("Add family failed input tests"))},t.addChild=function(){t.newChild.firstName&&(console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1,l.success("Child updated!")):(t.family.children.push(t.newChild),l.success("Child added!")),t.newChild={})},t.editChild=function(e){t.editingChild=e,t.newChild=t.family.children[e]},t.removeChild=function(e){console.log("in remove child index",e," edit ",t.editingChild),t.family.children.splice(e,1),e==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("add donation",t.newDonation),t.family.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.family.donations))}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope","toastr",function(t,e,a,o,n,i){t.submit=function(){e.post("/leo/login",t.form).then(function(t){a.saveToken(t.data),n.user=a.getUser(),o.path("/search")},function(){i.error("incorrect username or password")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,a){t.formInput={},t.searchBtn=function(){a.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],a=[],o=[],n=[],i=function(a){return t({method:"GET",url:"leo/search",params:{search:a}}).then(function(t){e=t.data,l(e),c(e),r(e)})},l=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},r=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),console.log("this is in getElement2",a),a},c=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return e(t),console.log("this is getElements3",n),n},s={getKids:c,getAdults:r,getCompanies:l,makeDataCall:i,results:e,companies:o,adults:a,kids:n};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,a,o){a.user=t.getUser(),a.user&&a.user.username&&o.path("/home"),e.logout=function(){t.logout(),a.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope","toastr",function(t,e,a,o){e.hide=function(){console.log("hide"),a.hide=!0},e.listname={},e.createList=function(){console.log("create list: "+e.listname.input),t.postList(e.listname.input,function(t){t===!0?(e.listname={},o.success("Successfully created list"),e.hide()):(console.log("failed to create list"),o.error("Failed to create list"))})}}]),app.service("newContactListData",["ContactListDataService","$http","$timeout",function(t,e,a){var o="",n=[];this.postList=function(t,a){console.log("did the name make it to the service? "+t),e.post("/leo/newContactList",{name:t}).then(function(t){console.log(t.data),o=t.data,console.log("Id? ",o),a(!0)},function(t){console.log("failed to create",t),a(!1)})},this.popList=function(t){this.dataObject={importDataArray:n,listNum:o},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),i(t),e.post("/leo/populateContactList",this.dataObject).then(function(t,e,a,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0},function(){return!1})};var i=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email||""],first_name:t.firstName||"",last_name:t.lastName||"",company_name:t.company||"",addresses:[{city:t.city||""}]},console.log(this.contactObject),n.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,e,a){e.listName={},e.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),e.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location","toastr","validService",function(t,e,a,o,n){t.validateInput=n.validateInput,t.submit=function(){e.post("/leo/register",t.form).then(function(t){a.path("/index"),o.success("admin created")},function(){o.error("failed to add admin")})}}]),app.controller("resetCtrl",["$scope","$http","$location","authService","toastr",function(t,e,a,o,n){t.submit=function(){console.log("edit password:",t.form);var i=o.getUser();console.log("auth user",i);var l=t.form;l.id=i.id,l.username=i.username,console.log("prepared",l),e.put("/admin",l).then(function(t){console.log(t),n.success("password changed"),a.path("/index")},function(){n.error("failed to update password")})}}]),app.service("validService",[function(){var t=function(t,e){var a,o=e?$("#"+e):!1;switch(t){case"name":case"city":case"state":a=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":a=/^[0-9]{5}$/;break;case"phone":a=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":a=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":a=/^[a-zA-Z0-9\s:-]{0,15}$/;break;case"date":a=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/20[0-9]{2}$/;break;case"birthdate":a=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/((199[0-9]|20)[0-9]{2})$/;break;case"amount":a=/^([\$]?[\d]+([.][\d]{2})?){1,10}$/;break;case"username":a=/^(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d_\-]{8,20}$/;break;case"password":a=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,20}$/;break;case"search":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}$/;break;case"age":a=/^[0-9]{1,2}$/;break;default:return!1}return o.attr("required")||o.val()?!a.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),!0):void 0},e=function(e){var a=!0;return e.forEach(function(e,o,n){$("#"+e+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(a=!1)})}),a};return{validateInput:t,validateForm:e}}]);
//# sourceMappingURL=data:application/json;base64,
