<<<<<<< HEAD
function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,a){return{request:function(t){return t.headers=t.headers||{},a.isAuthed()&&(t.headers.Authorization="Bearer "+a.getToken()),t},response:function(a){return 401===a.status&&e.path("/"),a||t.when(a)},responseError:function(a){return 401===a.status?e.path("/"):console.log(a.status),t.reject(a)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var a=e.split(".")[1],o=a.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),a=Math.round((new Date).getTime()/1e3)<=e.exp;return a||this.logout(),a}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService",function(t,e,a,o,n,i,l){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(e){t.corp={info:{},contact:{},donations:[]},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){t.corp=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Put corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Posted corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}}):console.log("Add corp input tests failed")},t.addDonation=function(){var e=t.newDonation;e.date=l.toDB(e.date),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",e,t.corp.donations)}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,e,a,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&a.makeDataCall("zip",t.zip.data).then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var e=a.makeDataCall("age",t.age.data);e.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=a.makeDataCall("family","");o.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=a.makeDataCall("company","");i.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(e){var a=angular.element(e.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],a.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),a.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,e){function a(a,o){var n=e.defer();return console.log("this is in the make data call",a,o),t({method:"GET",url:"../createMailList",params:{type:a,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:a}}]),app.service("dateService",["MomentJS",function(t){var e="YYYY-MM-DD",a=function(a){return t(a).format(e)};return{toDB:a}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,e,a,o,n,i){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(e){t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){t.family=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("insert family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(e){console.log("Put family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/family",data:{family:t.family}}).then(function(e){console.log("Posted family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]}):console.log("Add family failed input tests")},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1):t.family.children.push(t.newChild),t.newChild={}},t.editChild=function(e){t.editingChild=e,t.newChild=t.family.children[e]},t.removeChild=function(e){console.log("in remove child index",e," edit ",t.editingChild),t.family.children.splice(e,1),e==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){t.family.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,a,o,n){t.submit=function(){e.post("/login",t.form).then(function(t){a.saveToken(t.data),n.user=a.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,a){t.formInput={},t.searchBtn=function(){a.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],a=[],o=[],n=[],i=function(a){return t({method:"GET",url:"../search",params:{search:a}}).then(function(t){e=t.data,l(e),s(e),r(e)})},l=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},r=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),console.log("this is in getElement2",a),a},s=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return e(t),console.log("this is getElements3",n),n},c={getKids:s,getAdults:r,getCompanies:l,makeDataCall:i,results:e,companies:o,adults:a,kids:n};return c}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,a,o){a.user=t.getUser(),a.user&&a.user.username&&o.path("/home"),e.logout=function(){t.logout(),a.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope",function(t,e,a){e.hide=function(){console.log("hide"),a.hide=!0},e.listname={},e.createList=function(){console.log("create list: "+e.listname.input),t.postList(e.listname.input),console.log("list #",t.listNum),e.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,e){var a="",o=[];this.postList=function(t){return console.log("did the name make it to the service? "+t),e.post("/newContactList",{name:t}).then(function(t){console.log(t.data),a=t.data,console.log("Id? ",a)},function(t){console.log(t)})},this.popList=function(t){this.dataObject={importDataArray:o,listNum:a},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),n(t),e.post("/populateContactList",this.dataObject).then(function(t,e,a,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0})["catch"](function(){return!1})};var n=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email],first_name:t.firstName,last_name:t.lastName,company_name:t.company,addresses:[{city:t.city}]},console.log(this.contactObject),o.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,e,a){e.listName={},e.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),e.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.service("validService",[function(){var t=function(t,e){var a,o=e?$("#"+e):!1;switch(console.log("object is ",o,t,e),t){case"name":case"city":case"state":a=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":a=/^[0-9]{5}$/;break;case"phone":a=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":a=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":a=/^[a-zA-Z0-9\s:-]+$/;break;case"date":a=/^20[0-9]{2}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"birthdate":a=/^(199[0-9]|20[0-9]{2})[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"amount":a=/^[\$]?[\d]+([.][\d]{2})?$/;break;default:return console.log("invalid class search"),!1}return o.attr("required")||o.val()?!a.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),console.log(t," failed test",a),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),console.log(t," passed test",a),!0):void 0},e=function(e){var a=!0;return e.forEach(function(e,o,n){$("#"+e+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(console.log($(this).attr("id")+" failed the test "+$(this).data("type")+" entered info: "+$(this).val()),a=!1)})}),a};return{validateInput:t,validateForm:e}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udG9sbGVyLmpzIiwiY3JlYXRlTGlzdFNlcnZpY2UuanMiLCJkYXRlU2VydmljZS5qcyIsImZhbWlseUNvbnRyb2xsZXIuanMiLCJsb2dpbkNvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoQ29udHJvbGxlci5qcyIsIm1haW5TZWFyY2hTZXJ2aWNlLmpzIiwibW9kYWxJbnN0YW5jZUNvbnRyb2xsZXIuanMiLCJuYXZDb250cm9sbGVyLmpzIiwibmV3Q29udGFjdExpc3RDb250cm9sbGVyLmpzIiwibmV3Q29udGFjdExpc3RTZXJ2aWNlLmpzIiwicG9wTGlzdENvbnRyb2xsZXIuanMiLCJyZWdpc3RlckNvbnRyb2xsZXIuanMiLCJyZXNldENvbnRyb2xsZXIuanMiLCJ2YWxpZFNlcnZpY2UuanMiXSwibmFtZXMiOlsiZm9ybWF0RGF0ZXMiLCJkYXRlIiwiZnVsbCIsIm1vbWVudCIsImZvcm1hdCIsImZ1bGxEYXRlIiwicHJldHR5IiwicHJldHR5RGF0ZSIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsIiRzY29wZSIsIiR1aWJNb2RhbCIsIiRsb2ciLCJSZXN1bHRTZXJ2aWNlIiwiJGh0dHAiLCJ2YWxpZFNlcnZpY2UiLCJkYXRlU2VydmljZSIsInZhbGlkYXRlSW5wdXQiLCJjb21wYW5pZXMiLCJjb3JwIiwiaW5mbyIsImNvbnRhY3QiLCJkb25hdGlvbnMiLCJuZXdEb25hdGlvbiIsImFuaW1hdGlvbnNFbmFibGVkIiwiY2xlYXJDb3JwIiwiZm9ybXNBcnJheSIsImZvckVhY2giLCJ2IiwiJCIsImVhY2giLCJyZW1vdmVDbGFzcyIsImF0dHIiLCJkYXRhIiwib3BlbiIsInNpemUiLCJpZCIsIm1ldGhvZCIsInVybCIsInRoZW4iLCJtb2RhbEluc3RhbmNlIiwiYW5pbWF0aW9uIiwic2NvcGUiLCJyZXNvbHZlIiwiaXRlbXMiLCJyZXN1bHQiLCJzZWxlY3RlZEl0ZW0iLCJzZWxlY3RlZCIsInRvZ2dsZUFuaW1hdGlvbiIsInNhdmUiLCJ2YWxpZGF0ZUZvcm0iLCJyZXMiLCJsZW5ndGgiLCJhZGREb25hdGlvbiIsInRlbXAiLCJ0b0RCIiwicHVzaCIsIkNvbnRhY3RMaXN0RGF0YVNlcnZpY2UiLCJuZXdDb250YWN0TGlzdERhdGEiLCJ0b2FzdHIiLCIkcm9vdFNjb3BlIiwidHlwZSIsImFnZSIsInppcCIsImVtYWlscyIsImluY2x1ZGVkRW1haWxzIiwidG90YWxEaXNwbGF5ZWQiLCJ0b3RhbFJlc3VsdHMiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwic3VjY2VzcyIsImVycm9yIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsInBvcExpc3QiLCJsb2FkTW9yZSIsInNob3dBbGwiLCJjaGVja0FsbCIsImV2ZW50IiwiJGJ1dHRvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJ2YWwiLCJjb3B5IiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwiZGJGb3JtYXQiLCJ0b0RiRm9ybWF0IiwiYWR1bHRzIiwia2lkcyIsImZhbWlseSIsImFkdWx0T25lIiwiYWR1bHRUd28iLCJlbWVyZ2VuY3kiLCJjaGlsZHJlbiIsIm5ld0NoaWxkIiwiY2xlYXJGYW1pbHkiLCJhZGRDaGlsZCIsImVkaXRpbmdDaGlsZCIsImVkaXRDaGlsZCIsImluZGV4IiwicmVtb3ZlQ2hpbGQiLCJzcGxpY2UiLCJjbGVhckNoaWxkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJiaXJ0aGRhdGUiLCJzY2hvb2wiLCJub3RlcyIsInN1Ym1pdCIsInBvc3QiLCJmb3JtIiwidXNlciIsImZvcm1JbnB1dCIsInNlYXJjaEJ0biIsInJlc3VsdHMiLCJnZXRDb21wYW5pZXMiLCJnZXRLaWRzIiwiZ2V0QWR1bHRzIiwiYXJyYXkiLCJnZXRFbGVtZW50MSIsImdldEVsZW1lbnQyIiwiZ2V0RWxlbWVudDMiLCJwdWJsaWNBcGkiLCIkbW9kYWxJbnN0YW5jZSIsIm9rIiwiY2xvc2UiLCJpdGVtIiwiY2FuY2VsIiwiZGlzbWlzcyIsInVzZXJuYW1lIiwiaGlkZSIsImxpc3RuYW1lIiwiY3JlYXRlTGlzdCIsImlucHV0IiwicG9zdExpc3QiLCJsaXN0TnVtIiwiaW1wb3J0RGF0YUFycmF5IiwibmFtZSIsImxpc3QiLCJkYXRhT2JqZWN0IiwiZ2V0Q2hlY2tlZCIsImwiLCJvYmplY3QiLCJjb250YWN0T2JqZWN0IiwiZW1haWxfYWRkcmVzc2VzIiwiZW1haWwiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiY29tcGFueV9uYW1lIiwiY29tcGFueSIsImFkZHJlc3NlcyIsImNpdHkiLCJsaXN0TmFtZSIsInB1dCIsInBhdHRlcm4iLCIkb2JqIiwidGVzdCIsInRyaW0iLCJhZGRDbGFzcyIsImZvcm1zIiwicGFzcyIsImkiLCJhIl0sIm1hcHBpbmdz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LGtEQUNBLE1BQ0EsS0FBQSxRQUNBQSxFQUFBLDBEQUNBLE1BQ0EsS0FBQSxNQUNBQSxFQUFBLG9CQUNBLE1BQ0EsS0FBQSxPQUNBQSxFQUFBLDREQUNBLE1BQ0EsS0FBQSxZQUNBQSxFQUFBLHVFQUNBLE1BQ0EsS0FBQSxTQUNBQSxFQUFBLDJCQUNBLE1BQ0EsU0FFQSxNQURBakwsU0FBQUMsSUFBQSx5QkFDQSxFQUtBLE1BQUFpTCxHQUFBakksS0FBQSxhQUFBaUksRUFBQTdFLE9BRUE0RSxFQUFBRSxLQUFBRCxFQUFBN0UsTUFBQStFLFNBQUEsR0FBQUYsRUFBQTdFLE1BQUErRSxPQUFBL0csUUFBQTZHLEVBQUFqSSxLQUFBLGFBRUFpSSxFQUFBRyxTQUFBLFdBQUFwSSxLQUFBLGNBQUFpSSxFQUFBaEksS0FBQSxZQUFBbUQsSUFBQSxJQUNBckcsUUFBQUMsSUFBQTZFLEVBQUEsZUFBQW1HLElBQ0EsSUFHQUMsRUFBQWxJLFlBQUEsV0FBQUMsS0FBQSxjQUFBaUksRUFBQWhJLEtBQUEsZ0JBQ0FsRCxRQUFBQyxJQUFBNkUsRUFBQSxlQUFBbUcsSUFDQSxHQVhBLFFBZ0JBOUcsRUFBQSxTQUFBbUgsR0FDQSxHQUFBQyxJQUFBLENBU0EsT0FSQUQsR0FBQTFJLFFBQUEsU0FBQUMsRUFBQTJJLEVBQUFDLEdBQ0EzSSxFQUFBLElBQUFELEVBQUEsaUJBQUFFLEtBQUEsV0FDQSxHQUFBYixFQUFBWSxFQUFBekMsTUFBQTZDLEtBQUEsUUFBQUosRUFBQXpDLE1BQUE0QyxLQUFBLFNBQ0FqRCxRQUFBQyxJQUFBNkMsRUFBQXpDLE1BQUE0QyxLQUFBLE1BQUEsb0JBQUFILEVBQUF6QyxNQUFBNkMsS0FBQSxRQUFBLGtCQUFBSixFQUFBekMsTUFBQWdHLE9BQ0FrRixHQUFBLE9BSUFBLEVBR0EsUUFDQXJKLGNBQUFBLEVBQ0FpQyxhQUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdsZW8nLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCcsICdjaGVja2xpc3QtbW9kZWwnLCAndG9hc3RyJywgJ2FuZ3VsYXItbW9tZW50anMnXSk7XG5cbnZhciBwcmV0dHlEYXRlID0gXCJNTS9ERC9ZWWdZWVwiO1xudmFyIGZ1bGxEYXRlID0gXCJNTS9ERC9ZWVlZIGg6bW06c3MgYVwiO1xuXG5mdW5jdGlvbiBmb3JtYXREYXRlcyAoZGF0ZSkge1xuXHRyZXR1cm4ge1xuXHRcdGZ1bGw6IG1vbWVudChkYXRlKS5mb3JtYXQoZnVsbERhdGUpLFxuXHRcdHByZXR0eTogbW9tZW50KGRhdGUpLmZvcm1hdChwcmV0dHlEYXRlKVxuXHR9O1xufVxuXG5hcHAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLFxuICAgIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyLlxuICAgICAgICAgICAgd2hlbignLycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9sb2dpbi5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvc2VhcmNoJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9zZWFyY2guaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9jb250YWN0TGlzdCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvY29udGFjdExpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2FkZGZhbWlseScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvYWRkZmFtaWx5Lmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnZWRpdEZhbWlseUN0cmwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9hZGRjb3JwJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9hZGRjb3JwLmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnZWRpdENvcnBDdHJsJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvY29udGFjdGxpc3QnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2NvbnRhY3RsaXN0Lmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIG90aGVyd2lzZSh7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogJy9zZWFyY2gnXG4gICAgICAgICAgICB9KTtcbiAgICB9XSk7XG5cblxuXG5cbiIsImFwcC5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLCBbJyRxJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZWQoKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyBhdXRoU2VydmljZS5nZXRUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pIiwiYXBwLnNlcnZpY2UoJ2F1dGhTZXJ2aWNlJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpIHtcblxuICAgIHRoaXMucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmF0b2IoYmFzZTY0KSk7XG4gICAgICAgIH0gZWxzZSByZXR1cm4ge307XG4gICAgfTtcblxuICAgIHRoaXMuc2F2ZVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuID0gdG9rZW47XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1NhdmVkIHRva2VuOicsJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4pO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIHRoaXMuaXNBdXRoZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUp3dCh0b2tlbik7XG4gICAgICAgICAgICB2YXIgbm90RXhwaXJlZCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8PSBwYXJhbXMuZXhwO1xuICAgICAgICAgICAgaWYgKCFub3RFeHBpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub3RFeHBpcmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWxldGUgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XG4gICAgfTtcblxuICAgIC8vIGV4cG9zZSB1c2VyIGFzIGFuIG9iamVjdFxuICAgIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VKd3QodGhpcy5nZXRUb2tlbigpKVxuICAgIH07XG59XSk7IiwiLy9lZGl0IGNvcnBvcmF0aW9uIG1vZGFsIHRlbXBsYXRlXG5hcHAuY29udHJvbGxlcignZWRpdENvcnBDdHJsJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsJywgJyRsb2cnLCAnUmVzdWx0U2VydmljZScsICckaHR0cCcsICd2YWxpZFNlcnZpY2UnLCAnZGF0ZVNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwLCB2YWxpZFNlcnZpY2UsIGRhdGVTZXJ2aWNlKSB7XG5cblx0Ly8gc2V0cyB2YWxpZGF0aW9uIGZyb20gc2VydmljZSBmb3IgZG9tIGNhbGxzXG5cdCRzY29wZS52YWxpZGF0ZUlucHV0ID0gdmFsaWRTZXJ2aWNlLnZhbGlkYXRlSW5wdXQ7XG5cdC8vc2VuZHMgdGhlIGNvbXBhbmllcyBhZnRlciB0aGUgcmVzdWx0cyBoYXZlIGJlZW4gb3JnYW5pemVkXG5cdCRzY29wZS5jb21wYW5pZXMgPSBSZXN1bHRTZXJ2aWNlLmNvbXBhbmllcztcblx0JHNjb3BlLmNvcnAgPSB7XG5cdFx0aW5mbzoge30sXG5cdFx0Y29udGFjdDoge30sXG5cdFx0ZG9uYXRpb25zOiBbXVxuXHR9O1xuXHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcblxuXHQkc2NvcGUuY2xlYXJDb3JwID0gZnVuY3Rpb24gKGZvcm1zQXJyYXkpIHtcblx0XHQkc2NvcGUuY29ycCA9IHtcblx0XHRcdGluZm86e30sXG5cdFx0XHRjb250YWN0Ont9LFxuXHRcdFx0ZG9uYXRpb25zOltdXG5cdFx0fTtcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0XHRmb3Jtc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHtcblx0XHRcdCQoJyMnKyB2ICsnIC5qcy12YWxpZGF0ZScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkKHRoaXMpLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2l6ZSwgaWQpIHtcblx0XHRjb25zb2xlLmxvZygnY29ycCBjYWxsJywgaWQpO1xuXHRcdHJldHVybiAkaHR0cCh7XG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0dXJsOiAnLi4vY29ycG9yYXRpb24nLFxuXHRcdFx0cGFyYW1zOiB7aWQ6IGlkfVxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cblx0XHRcdCRzY29wZS5jb3JwID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xuXHRcdFx0XHRhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwcml2YXRlL2VkaXRjb3JwLmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRzY29wZTogJHNjb3BlLFxuXHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0aXRlbXM6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkc2NvcGUuY29ycDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuXHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLnRvZ2dsZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSAhJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkO1xuXHR9O1xuXG5cdC8vIHNhdmUgY29ycFxuXHQkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcIlNhdmUgc3VibWl0dGVkXCIsICRzY29wZS5jb3JwKTtcblx0XHQvL2FsZXJ0KFwiU3VibWl0dGVkXCIpO1xuXHRcdC8vIGlmIGhhcyBpZCwgdGhlbiBwdXRcblx0XHRpZighJHNjb3BlLmNvcnAuaWQpIHtcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiQWRkQ29ycEluZm9Gb3JtXCIsIFwiQWRkQ29ycENvbnRhY3RGb3JtXCJdKSkge1xuXHRcdFx0XHQkaHR0cCh7XG5cdFx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdFx0dXJsOiAnL2NvcnBvcmF0aW9uJyxcblx0XHRcdFx0XHRkYXRhOiB7Y29ycDogJHNjb3BlLmNvcnB9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUG9zdGVkIGNvcnAsIGdvdCBpZCBcIiwgcmVzLmRhdGEpO1xuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaW5mbyA9IChyZXMuZGF0YS5pbmZvKSA/IHJlcy5kYXRhLmluZm8gOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuY29udGFjdCA9IChyZXMuZGF0YS5jb250YWN0KSA/IHJlcy5kYXRhLmNvbnRhY3QgOiB7fTtcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQWRkIGNvcnAgaW5wdXQgdGVzdHMgZmFpbGVkXCIpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiRWRpdENvcnBJbmZvRm9ybVwiLCBcIkVkaXRDb3JwQ29udGFjdEZvcm1cIl0pKSB7XG5cdFx0XHRcdC8vIGluc2VydCBjb3JwIC0gaGFzIG5vIGlkXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwidXBkYXRlIGNvcnBcIiwgJHNjb3BlLmNvcnApO1xuXHRcdFx0XHQkaHR0cCh7XG5cdFx0XHRcdFx0bWV0aG9kOiAnUFVUJyxcblx0XHRcdFx0XHR1cmw6ICcvY29ycG9yYXRpb24nLFxuXHRcdFx0XHRcdGRhdGE6IHtjb3JwOiAkc2NvcGUuY29ycH1cblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQdXQgY29ycCwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmluZm8gPSAocmVzLmRhdGEuaW5mbykgPyByZXMuZGF0YS5pbmZvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmNvbnRhY3QgPSAocmVzLmRhdGEuY29udGFjdCkgPyByZXMuZGF0YS5jb250YWN0IDoge307XG5cdFx0XHRcdFx0Ly8gaW5pdGlhbGl6ZSBkb25hdGlvbnMgaWYgdGhlcmUgYXJlIGFueVxuXHRcdFx0XHRcdGlmICgkc2NvcGUuY29ycC5kb25hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDoge307XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVkaXQgY29ycCBpbnB1dCB0ZXN0cyBmYWlsZWRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxuXHQkc2NvcGUuYWRkRG9uYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHRlbXAgPSAkc2NvcGUubmV3RG9uYXRpb247XG5cdFx0dGVtcC5kYXRlID0gZGF0ZVNlcnZpY2UudG9EQih0ZW1wLmRhdGUpO1xuXHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucy5wdXNoKCRzY29wZS5uZXdEb25hdGlvbik7XG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdFx0Y29uc29sZS5sb2coXCJhZGRlZCBkb25hdGlvblwiLCB0ZW1wLCAkc2NvcGUuY29ycC5kb25hdGlvbnMpO1xuXHR9O1xuXG59XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ2NyZWF0ZUxpc3RTZWFyY2gnLCBbJyRzY29wZScsICckaHR0cCcsICdDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgJ25ld0NvbnRhY3RMaXN0RGF0YScsICd0b2FzdHInLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBDb250YWN0TGlzdERhdGFTZXJ2aWNlLG5ld0NvbnRhY3RMaXN0RGF0YSwgdG9hc3RyLCAkcm9vdFNjb3BlKSB7XG4gICAgJHNjb3BlLnR5cGUgPXt9O1xuICAgICRzY29wZS5hZ2U9e307XG4gICAgJHNjb3BlLnppcD17fTtcblx0Ly8gaW5jbHVkZSBsaXN0IG5lZWRzIHRvIGJlIHdpdGhpbiBhbiBvYmplY3QgZHVlIHRvIHRoZSBjaGVja2JveGVzIGJlaW5nIGluIGEgdGFibGVcblx0JHNjb3BlLmVtYWlscyA9IHt9O1xuICAgICRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBbXTtcblx0JHNjb3BlLmluY2x1ZGVkRW1haWxzID0gW107XG5cdCRzY29wZS50b3RhbERpc3BsYXllZCA9IDUwO1xuXHQkc2NvcGUudG90YWxSZXN1bHRzID0gMDtcbiAgICAvLyRyb290U2NvcGUuaGlkZSA9IHRydWU7XG5cblxuXG4gICAgJHNjb3BlLmVtYWlsTGlzdCA9IFsgXTtcbiAgICAkc2NvcGUuc2VhcmNoTGlzdEJ0biA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUuZW1haWxMaXN0ID0gW107XG5cblxuICAgICAgICAvL1RISVMgV09SS1MgIC0tIHdpbGwgc2VhcmNoIGJ5IHppcFxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ3ppcENrJykge1xuXG4gICAgICAgICAgICBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnemlwJywgJHNjb3BlLnppcC5kYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuXHRcdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuZW1haWxMaXN0KTtcblx0XHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcblx0XHRcdFx0fSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vVEhJUyBXT1JLUyAtIHdpbGwgc2VhcmNoIGJ5IGFnZVxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ2FnZUNrJykge1xuICAgICAgICAgICAgdmFyIGFnZSA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdhZ2UnLCAkc2NvcGUuYWdlLmRhdGEpO1xuICAgICAgICAgICAgYWdlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuXHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xuXHRcdFx0fSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL1RISVMgV09SS1MgLS1nZXQgYWxsIGZhbWlsaWVzIGlmIGZhbSBpcyB0cnVlXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnZmFtJykge1xuICAgICAgICAgICAgdmFyIGZhbSA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdmYW1pbHknLCAnJyk7XG4gICAgICAgICAgICBmYW0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuXHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XG5cdFx0XHR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZ2V0IGFsbCBjb3JwIGlmIGNvcnAgaXMgdHJ1ZVxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ2NvcnAnKSB7XG4gICAgICAgICAgICB2YXIgY29tcCA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdjb21wYW55JywgJycpO1xuICAgICAgICAgICAgY29tcC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcblx0XHRcdH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9lbXB0eSB0aGUgc2VhcmNoIGJveFxuICAgICAgICRzY29wZS50eXBlPXt9O1xuICAgICAgICAkc2NvcGUuYWdlPXt9O1xuICAgICAgICAkc2NvcGUuemlwPXt9O1xuXG4gICAgfTtcbiAgICAkc2NvcGUucG9wdWxhdGVMaXN0ICA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9hbGVydCgnd29ya2luZycpO1xuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzKTtcbiAgICAgICAgaWYobmV3Q29udGFjdExpc3REYXRhLnBvcExpc3QoJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscykpIHtcblx0XHRcdHRvYXN0ci5zdWNjZXNzKCdTdWNjZXNzZnVsbHkgZGVwbG95ZWQgY29udGFjdCBsaXN0LicpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGRlcGxveSBjb250YWN0IGxpc3QuJyk7XG5cdFx0fVxuICB9O1xuXG5cdCRzY29wZS5sb2FkTW9yZSA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgKz0gNTA7XG5cdH07XG5cblx0JHNjb3BlLnNob3dBbGwgPSBmdW5jdGlvbiAoKSB7XG5cdFx0JHNjb3BlLnRvdGFsRGlzcGxheWVkID0gJHNjb3BlLnRvdGFsUmVzdWx0cztcblx0fTtcblxuXHQkc2NvcGUuY2hlY2tBbGwgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciAkYnV0dG9uID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCk7XG5cdFx0aWYoJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscy5sZW5ndGggPT0gJHNjb3BlLnRvdGFsUmVzdWx0cykge1xuXHRcdFx0JHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyA9IFtdO1xuXHRcdFx0JGJ1dHRvbi52YWwoXCJDaGVjayBBbGxcIik7XG5cdFx0fWVsc2V7XG5cdFx0XHQkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzID0gYW5ndWxhci5jb3B5KCRzY29wZS5lbWFpbExpc3QpO1xuXHRcdFx0JGJ1dHRvbi52YWwoXCJVbmNoZWNrIEFsbFwiKTtcblx0XHR9XG5cdH07XG59XSk7XG5cblxuIiwiYXBwLmZhY3RvcnkoJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xuXG4gICAgZnVuY3Rpb24gbWFrZURhdGFDYWxsKHR5cGUsIHBhc3NlZERhdGEpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgaW4gdGhlIG1ha2UgZGF0YSBjYWxsJywgdHlwZSwgcGFzc2VkRGF0YSk7XG4gICAgICAgICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcuLi9jcmVhdGVNYWlsTGlzdCcsXG4gICAgICAgICAgICBwYXJhbXM6IHt0eXBlOiB0eXBlLCBzZWFyY2g6IHBhc3NlZERhdGF9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgbWFrZURhdGFDYWxsOiBtYWtlRGF0YUNhbGxcbiAgICB9O1xuXG5cbn1dKTsiLCJhcHAuc2VydmljZSgnZGF0ZVNlcnZpY2UnLCBbJ01vbWVudEpTJywgZnVuY3Rpb24gKG1vbWVudCkge1xuXHR2YXIgZGJGb3JtYXQgPSBcIllZWVktTU0tRERcIjtcblxuXHR2YXIgdG9EYkZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0cmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoZGJGb3JtYXQpO1xuXHR9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9EQjogdG9EYkZvcm1hdFxuICAgIH07XG59XSk7IiwiLy9lZGl0IGZhbWlseSBtb2RhbCB0ZW1wbGF0ZVxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRGYW1pbHlDdHJsJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsJywgJyRsb2cnLCAnUmVzdWx0U2VydmljZScsICckaHR0cCcsICd2YWxpZFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwLCB2YWxpZFNlcnZpY2UpIHtcblx0Ly8gc2V0cyB2YWxpZGF0aW9uIGZyb20gc2VydmljZSBmb3IgZG9tIGNhbGxzXG5cdCRzY29wZS52YWxpZGF0ZUlucHV0ID0gdmFsaWRTZXJ2aWNlLnZhbGlkYXRlSW5wdXQ7XG5cdC8vc2VuZHMgdGhlIGFkdWx0cyBhbmQga2lkcyBhZnRlciB0aGUgcmVzdWx0cyBoYXZlIGJlZW4gb3JnYW5pemVkXG5cdCRzY29wZS5hZHVsdHMgPSBSZXN1bHRTZXJ2aWNlLmFkdWx0cztcblx0JHNjb3BlLmtpZHMgPSBSZXN1bHRTZXJ2aWNlLmtpZHM7XG5cdCRzY29wZS5mYW1pbHkgPSB7XG5cdFx0YWR1bHRPbmU6IHt9LFxuXHRcdGFkdWx0VHdvOiB7fSxcblx0XHRlbWVyZ2VuY3k6IHt9LFxuXHRcdGNoaWxkcmVuOiBbXSxcblx0XHRkb25hdGlvbnM6IFtdXG5cdH07XG5cdCRzY29wZS5uZXdDaGlsZCA9IHt9O1xuXHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblxuXHQkc2NvcGUuY2xlYXJGYW1pbHkgPSBmdW5jdGlvbiAoZm9ybXNBcnJheSkge1xuXHRcdCRzY29wZS5mYW1pbHkgPSB7XG5cdFx0XHRhZHVsdE9uZToge30sXG5cdFx0XHRhZHVsdFR3bzoge30sXG5cdFx0XHRlbWVyZ2VuY3k6IHt9LFxuXHRcdFx0Y2hpbGRyZW46IFtdLFxuXHRcdFx0ZG9uYXRpb25zOiBbXVxuXHRcdH07XG5cdFx0JHNjb3BlLm5ld0NoaWxkID0ge307XG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XG5cdFx0Zm9ybXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHQkKCcjJysgdiArJyAuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJCh0aGlzKS5kYXRhKCdwbGFjZWhvbGRlcicpKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9O1xuXG5cblxuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuXHQkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzaXplLCBpZCkge1xuXHRcdGNvbnNvbGUubG9nKCdmYW1pbHkgY2FsbCcsIGlkKTtcblx0XHRyZXR1cm4gJGh0dHAoe1xuXHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdHVybDogJy4uL2ZhbWlseScsXG5cdFx0XHRwYXJhbXM6IHtpZDogaWR9XG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuXHRcdFx0JHNjb3BlLmZhbWlseSA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcblx0XHRcdFx0YW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9lZGl0ZmFtaWx5Lmh0bWwnLFxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRzY29wZTogJHNjb3BlLFxuXHRcdFx0XHRyZXNvbHZlOiB7XG5cdFx0XHRcdFx0aXRlbXM6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkc2NvcGUuZmFtaWx5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuXHRcdFx0fSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblx0JHNjb3BlLnRvZ2dsZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSAhJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkO1xuXHR9O1xuXG5cdC8vIHNhdmUgZmFtaWx5XG5cdCRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiU2F2ZSBzdWJtaXR0ZWRcIiwgJHNjb3BlLmZhbWlseSk7XG5cdFx0Ly9hbGVydChcIlN1Ym1pdHRlZFwiKTtcblx0XHQvLyBpZiBoYXMgaWQsIHRoZW4gcHV0XG5cdFx0aWYoISRzY29wZS5mYW1pbHkuaWQpIHtcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiQWRkRmFtSW5mb0Zvcm1cIiwgXCJBZGRGYW1FbWVyRm9ybVwiXSkpIHtcblx0XHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxuXHRcdFx0XHRcdGRhdGE6IHtmYW1pbHk6ICRzY29wZS5mYW1pbHl9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUG9zdGVkIGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5lbWVyZ2VuY3kgPSAocmVzLmRhdGEuZW1lcmdlbmN5KSA/IHJlcy5kYXRhLmVtZXJnZW5jeSA6IHt9O1xuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJBZGQgZmFtaWx5IGZhaWxlZCBpbnB1dCB0ZXN0c1wiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih2YWxpZFNlcnZpY2UudmFsaWRhdGVGb3JtKFtcIkVkaXRGYW1JbmZvRm9ybVwiLCBcIkVkaXRGYW1FbWVyRm9ybVwiXSkpIHtcblx0XHRcdFx0Ly8gaW5zZXJ0IGZhbWlseSAtIGhhcyBubyBpZFxuXHRcdFx0XHRjb25zb2xlLmxvZyhcImluc2VydCBmYW1pbHlcIiwgJHNjb3BlLmZhbWlseSk7XG5cdFx0XHRcdCRodHRwKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxuXHRcdFx0XHRcdGRhdGE6IHtmYW1pbHk6ICRzY29wZS5mYW1pbHl9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5lbWVyZ2VuY3kgPSAocmVzLmRhdGEuZW1lcmdlbmN5KSA/IHJlcy5kYXRhLmVtZXJnZW5jeSA6IHt9O1xuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJFZGl0IGZhbWlseSBmYWlsZWQgaW5wdXQgdGVzdHNcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGZvciBhcHBlbmRpbmcgY2hpbGRyZW4gdG8gbW9kZWwgYmVmb3JlIHNhdmluZyBuZXcgZmFtaWx5XG5cdCRzY29wZS5hZGRDaGlsZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcImNoaWxkIGFkZGVkXCIsICRzY29wZS5uZXdDaGlsZCwgJHNjb3BlLmZhbWlseS5jaGlsZHJlbik7XG5cdFx0Ly8gaWYgdHJ1ZSwgdGhlbiB1cGRhdGUgdGhhdCBpbmRleFxuXHRcdGlmKCRzY29wZS5lZGl0aW5nQ2hpbGQpIHtcblx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW5bJHNjb3BlLmVkaXRpbmdDaGlsZF0gPSAkc2NvcGUubmV3Q2hpbGQ7XG5cdFx0XHQkc2NvcGUuZWRpdGluZ0NoaWxkID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly8gZWxzZSBwdXNoIHRvIGFycmF5XG5cdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLnB1c2goJHNjb3BlLm5ld0NoaWxkKTtcblx0XHR9XG5cdFx0JHNjb3BlLm5ld0NoaWxkID0ge307XG5cdH07XG5cblx0Ly8gZWRpdCBjaGlsZCBvbiB0aGUgYWRkIGNoaWxkcmVuIHRhYiBvZiBhZGQgZmFtaWx5XG5cdCRzY29wZS5lZGl0Q2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHQvLyBzYXZlIGluZGV4IG9mIGNoaWxkIGVkaXRpbmdcblx0XHQkc2NvcGUuZWRpdGluZ0NoaWxkID0gaW5kZXg7XG5cdFx0JHNjb3BlLm5ld0NoaWxkID0gJHNjb3BlLmZhbWlseS5jaGlsZHJlbltpbmRleF07XG5cdH07XG5cblx0JHNjb3BlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XG5cdFx0Y29uc29sZS5sb2coXCJpbiByZW1vdmUgY2hpbGQgaW5kZXhcIiwgaW5kZXgsIFwiIGVkaXQgXCIsICRzY29wZS5lZGl0aW5nQ2hpbGQpO1xuXHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcblx0XHRpZihpbmRleCA9PSAkc2NvcGUuZWRpdGluZ0NoaWxkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcImVkaXQgbWF0Y2hcIik7XG5cdFx0XHQkc2NvcGUuY2xlYXJDaGlsZCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKFwibm8gZWRpdCBtYXRjaFwiKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gY2xlYXJzIHRleHQgYm94ZXMgaW4gYWRkIGZhbWlseS0+Y2hpbGRyZW4gdGFiXG5cdCRzY29wZS5jbGVhckNoaWxkID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiaW4gY2xlYXIgY2hpbGRcIik7XG5cdFx0JHNjb3BlLm5ld0NoaWxkID0ge1xuXHRcdFx0Zmlyc3ROYW1lOiAnJyxcblx0XHRcdGxhc3ROYW1lOiAnJyxcblx0XHRcdGJpcnRoZGF0ZTogJycsXG5cdFx0XHRzY2hvb2w6ICcnLFxuXHRcdFx0bm90ZXM6ICcnXG5cdFx0fTtcblx0XHQkc2NvcGUuZWRpdGluZ0NoaWxkID0gZmFsc2U7XG5cdH07XG5cblxuXHQvLyBhZGRzIGRvbmF0aW9uIHRvIGZhbWlseSBvYmplY3Rcblx0JHNjb3BlLmFkZERvbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLnB1c2goJHNjb3BlLm5ld0RvbmF0aW9uKTtcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0fTtcblxuXHQvLy8vIHByZXZlbnQgYWNjaWRlbnRhbCBiYWNrc1xuXHQvLyRzY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiggZXZlbnQsIG9sZFVybCApIHtcblx0Ly9cdGNvbnNvbGUubG9nKFwib2xkIHVybDogXCIsIG9sZFVybCk7XG5cdC8vXHRpZigvKGFkZGZhbWlseSkvLnRlc3Qob2xkVXJsKSkge1xuXHQvL1x0XHR2YXIgYW5zd2VyID0gY29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSB0aGlzIHBhZ2U/XCIpO1xuXHQvL1x0XHRpZiAoIWFuc3dlcikge1xuXHQvL1x0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdC8vXHRcdH1cblx0Ly9cdH1cblx0Ly99KTtcblxufV0pOyIsIi8vY29udHJvbGxlcnMgZm9yIGxvZ2luXG5hcHAuY29udHJvbGxlcignbG9naW5DdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnYXV0aFNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBhdXRoU2VydmljZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKXtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAucG9zdCgnL2xvZ2luJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBhdXRoU2VydmljZS5zYXZlVG9rZW4ocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL3NlYXJjaFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG59XSk7XG4iLCJcbi8vVGhpcyBzaG91bGQgZ2V0IHRoZSBzZWFyY2ggaXRlbVxuYXBwLmNvbnRyb2xsZXIoJ3NlYXJjaEZ1bmN0aW9uJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnUmVzdWx0U2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBSZXN1bHRTZXJ2aWNlKSB7XG4gICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcblxuICAgICRzY29wZS5zZWFyY2hCdG4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcbiAgICAgICBSZXN1bHRTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgkc2NvcGUuZm9ybUlucHV0LmRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyB0aGUgaW5wdXQgdGV4dCcsICRzY29wZS5mb3JtSW5wdXQpO1xuICAgICAgICAvL2VtcHR5cyB0aGUgc2VhcmNoIGJveFxuICAgICAgICAkc2NvcGUuZm9ybUlucHV0PXt9O1xuICAgIH07XG5cbn1dKTtcbiIsIi8vVGhpcyBzZXJ2aWNlIHNob3VsZCBwYXNzIGRhdGEgYmV0d2VlbiBjb250cm9sbGVyc1xuYXBwLmZhY3RvcnkoJ1Jlc3VsdFNlcnZpY2UnLCBbJyRodHRwJyxmdW5jdGlvbigkaHR0cCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIGFkdWx0cyA9IFtdO1xuICAgIHZhciBjb21wYW5pZXMgPSBbXTtcbiAgICB2YXIga2lkcyA9IFtdO1xuXG4gICAgdmFyIG1ha2VEYXRhQ2FsbCA9IGZ1bmN0aW9uKHBhc3NlZERhdGEpIHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcuLi9zZWFyY2gnLFxuICAgICAgICAgICAgcGFyYW1zOntzZWFyY2g6cGFzc2VkRGF0YX1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgZ2V0Q29tcGFuaWVzKHJlc3VsdHMpO1xuICAgICAgICAgICAgZ2V0S2lkcyhyZXN1bHRzKTtcbiAgICAgICAgICAgIGdldEFkdWx0cyhyZXN1bHRzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZ2V0Q29tcGFuaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgdmFyIGdldEVsZW1lbnQxID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgICAgIGNvbXBhbmllcy5zcGxpY2UoMCxjb21wYW5pZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnY29tcGFueScpXG4gICAgICAgICAgICAgICAgY29tcGFuaWVzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgIGdldEVsZW1lbnQxKGFycmF5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgZ2V0RWxlbWVudDEnLGNvbXBhbmllcyk7XG4gICAgICAgIHJldHVybiBjb21wYW5pZXNcbiAgICB9O1xuXG4gICAgdmFyIGdldEFkdWx0cyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBhZHVsdHMuc3BsaWNlKDAsYWR1bHRzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2FkdWx0JylcbiAgICAgICAgICAgICAgICAgICAgYWR1bHRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBnZXRFbGVtZW50MihhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGluIGdldEVsZW1lbnQyJywgYWR1bHRzKTtcbiAgICAgICAgcmV0dXJuIGFkdWx0c1xuICAgIH07XG5cbiAgICB2YXIgZ2V0S2lkcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBraWRzLnNwbGljZSgwLGtpZHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnY2hpbGQnKVxuICAgICAgICAgICAgICAgICAgICBraWRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBnZXRFbGVtZW50MyhhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnRzMycsIGtpZHMpO1xuICAgICAgICByZXR1cm4ga2lkc1xuICAgIH07XG5cbiAgICAvL3B1YmxpY1xuICAgIHZhciBwdWJsaWNBcGkgPSB7XG4gICAgICAgIGdldEtpZHM6IGdldEtpZHMsXG4gICAgICAgIGdldEFkdWx0czogZ2V0QWR1bHRzLFxuICAgICAgICBnZXRDb21wYW5pZXM6IGdldENvbXBhbmllcyxcbiAgICAgICAgbWFrZURhdGFDYWxsOiBtYWtlRGF0YUNhbGwsXG4gICAgICAgIHJlc3VsdHM6IHJlc3VsdHMsXG4gICAgICAgIGNvbXBhbmllczogY29tcGFuaWVzLFxuICAgICAgICBhZHVsdHM6IGFkdWx0cyxcbiAgICAgICAga2lkczoga2lkc1xuICAgIH07XG4gICAgcmV0dXJuIHB1YmxpY0FwaTtcbn1dKTsiLCIvLyBQbGVhc2Ugbm90ZSB0aGF0ICRtb2RhbEluc3RhbmNlIHJlcHJlc2VudHMgYSBtb2RhbCB3aW5kb3cgKGluc3RhbmNlKSBkZXBlbmRlbmN5LlxuLy8gSXQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSAkdWliTW9kYWwgc2VydmljZSB1c2VkIGFib3ZlLlxuXG4vL25lZWRlZCBmb3IgbW9kYWw/PyBwcmV0dHkgc3VyZVxuYXBwLmNvbnRyb2xsZXIoJ01vZGFsSW5zdGFuY2VDdHJsJyxbJyRzY29wZScsJyRtb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcblxuICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLnNlbGVjdGVkLml0ZW0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICB9O1xufV0pOyIsImFwcC5jb250cm9sbGVyKCduYXZDdHJsJywgWydhdXRoU2VydmljZScsJyRzY29wZScsJyRyb290U2NvcGUnLCckbG9jYXRpb24nLCBmdW5jdGlvbihhdXRoU2VydmljZSwgJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pe1xuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2hvbWUnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xuICAgIH1cbn1dKTtcbiIsIi8vIEFqYXggZm9yIGNyZWF0aW5nIHRoZSBjb250YWN0IGxpc3QgaW4gY29uc3RhbnQgY29udGFjdFxuYXBwLmNvbnRyb2xsZXIoJ25ld0NvbnRhY3RMaXN0Q29udHJvbGxlcicsWyduZXdDb250YWN0TGlzdERhdGEnLCckc2NvcGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG5ld0NvbnRhY3RMaXN0RGF0YSwgJHNjb3BlLCAkcm9vdFNjb3BlKSB7XG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcblxuICAgICRzY29wZS5oaWRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2hpZGUnKTtcbiAgICAgICAgJHJvb3RTY29wZS5oaWRlID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmxpc3RuYW1lID0ge307XG5cbiAgICAkc2NvcGUuY3JlYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIGxpc3Q6IFwiICsgJHNjb3BlLmxpc3RuYW1lLmlucHV0KTtcbiAgICAgICAgLy9wYXNzZXMgbGlzdCBuYW1lIHNlcnZpY2VcbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvc3RMaXN0KCRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2xpc3QgIycsbmV3Q29udGFjdExpc3REYXRhLmxpc3ROdW0pO1xuXG4gICAgICAgICRzY29wZS5saXN0bmFtZT17fTtcbiAgICB9O1xufV0pO1xuXG5cbiIsIlxuYXBwLnNlcnZpY2UoJ25ld0NvbnRhY3RMaXN0RGF0YScsIFsnQ29udGFjdExpc3REYXRhU2VydmljZScsICckaHR0cCcsXG4gICAgZnVuY3Rpb24gKENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsICRodHRwKSB7XG4gICAgICAgIHZhciBsaXN0TnVtID0gXCJcIjtcbiAgICAgICAgdmFyIGltcG9ydERhdGFBcnJheSA9W107XG5cbiAgICAgICAgdGhpcy5wb3N0TGlzdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRpZCB0aGUgbmFtZSBtYWtlIGl0IHRvIHRoZSBzZXJ2aWNlPyBcIiArIG5hbWUgKTtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvbmV3Q29udGFjdExpc3QnLCB7bmFtZTogbmFtZX0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgbGlzdE51bSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJZD8gXCIsIGxpc3ROdW0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7IC8vZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBvcExpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIFwiaW1wb3J0RGF0YUFycmF5XCI6IGltcG9ydERhdGFBcnJheSxcbiAgICAgICAgICAgICAgICBcImxpc3ROdW1cIjogbGlzdE51bVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb3QgdG8gcG9wTGlzdCcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ltcG9ydERhdGFBcnJheTogJyx0aGlzLmltcG9ydERhdGFBcnJheSwgJ1xcbnR5cGU6ICcsIHR5cGVvZiB0aGlzLmltcG9ydERhdGFBcnJheSk7XG4gICAgICAgICAgICBnZXRDaGVja2VkKGxpc3QpO1xuICAgICAgICAgICAgJGh0dHAucG9zdCgnL3BvcHVsYXRlQ29udGFjdExpc3QnLCB0aGlzLmRhdGFPYmplY3QpLnRoZW4oZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Bvc3RlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXBvcnREYXRhQXJyYXk6ICcsdGhpcy5pbXBvcnREYXRhQXJyYXksICdcXG50eXBlOiAnLCB0eXBlb2YgdGhpcy5pbXBvcnREYXRhQXJyYXkpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vZ2V0IGFsbCB0aGUgY2hlY2tlZCBlbGVtZW50cyBhbmQgc3R1ZmYgdGhlbSBpbiBhbiBhcnJheVxuICAgICAgICB2YXIgZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0Q2hlY2tlZCBpcyBydW5uaW5nJyk7XG4gICAgICAgICAgICBsLmZvckVhY2goXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWN0T2JqZWN0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5lbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmaXJzdF9uYW1lXCI6b2JqZWN0LmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhc3RfbmFtZVwiOiBvYmplY3QubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogb2JqZWN0LmNvbXBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2l0eTogb2JqZWN0LmNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jb250YWN0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydERhdGFBcnJheS5wdXNoKHRoaXMuY29udGFjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG5cbiIsImFwcC5jb250cm9sbGVyKCdwb3BMaXN0Q29udHJvbGxlcicsWyduZXdDb250YWN0TGlzdERhdGEnLCckc2NvcGUnLCckaHR0cCcsIGZ1bmN0aW9uKG5ld0NvbnRhY3RMaXN0RGF0YSwgJHNjb3BlLCAkaHR0cCkge1xuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XG5cblxuICAgICRzY29wZS5saXN0TmFtZSA9IHt9O1xuXG4gICAgJHNjb3BlLnBvcHVsYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIGxpc3Q6IFwiICsgc2NvcGUubGlzdE5hbWUuaW5wdXQpO1xuICAgICAgICAvL3Bhc3NlcyBpbiBzZWFyY2ggdGV4dCB0byBzZXJ2aWNlXG4gICAgICAgIG5ld0NvbnRhY3RMaXN0RGF0YS5wb3BMaXN0KCk7XG4gICAgICAgIC8vdmFyIGxpc3RFbmQgPSB7XG4gICAgICAgIC8vICAgIFwibGlzdHNcIjogW2xpc3ROdW1dLFxuICAgICAgICAvLyAgICBcImNvbHVtbl9uYW1lc1wiOiBbXG4gICAgICAgIC8vICAgIFwiRU1BSUxcIixcbiAgICAgICAgLy8gICAgXCJGSVJTVCBOQU1FXCIsXG4gICAgICAgIC8vICAgIFwiTEFTVCBOQU1FXCIsXG4gICAgICAgIC8vICAgIFwiQ0lUWVwiLFxuICAgICAgICAvLyAgICBcIkNPTVBBTlkgTkFNRVwiXG4gICAgICAgIC8vXX1cblxuXG4gICAgICAgICRzY29wZS5saXN0TmFtZT17fTtcbiAgICB9O1xufV0pO1xuXG4iLCJcbi8vcmVnaXN0ZXIgY29udHJvbGxlclxuYXBwLmNvbnRyb2xsZXIoJ3JlZ2lzdGVyQ3RybCcsIFsgJyRzY29wZScsICckaHR0cCcsICckbG9jYXRpb24nLCAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbikge1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVnaXN0ZXJDdHJsXCIpO1xuICAgICAgICBjb25zb2xlLmxvZygncmVnaXN0ZXJDb250cm9sbGVyIHN1Ym1pdDonLCAkc2NvcGUuZm9ybSk7XG4gICAgICAgICRodHRwLnBvc3QoJy9yZWdpc3RlcicsICRzY29wZS5mb3JtKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2luZGV4XCIpXG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XSk7XG4iLCJhcHAuY29udHJvbGxlcigncmVzZXRDdHJsJywgWyAnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VkaXQgcGFzc3dvcmQ6JywgJHNjb3BlLmZvcm0pO1xuICAgICAgICAkaHR0cC5wdXQoJy9hZG1pbicsICRzY29wZS5mb3JtKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2luZGV4XCIpXG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XSk7XG4iLCJhcHAuc2VydmljZSgndmFsaWRTZXJ2aWNlJywgW2Z1bmN0aW9uICgpIHtcblxuICAgIHZhciB2YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24gKHR5cGUsIGlkKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJ2YWxpZGF0ZUlucHV0KClcIik7XG4gICAgICAgIC8vIHN0b3JlcyB0aGUgZm9ybSBiZWluZyBjYWxsZWQgb25cbiAgICAgICAgdmFyIHBhdHRlcm47XG4gICAgICAgIHZhciAkb2JqID0gKGlkKSA/ICQoJyMnKyBpZCkgOiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coXCJvYmplY3QgaXMgXCIsICRvYmosIHR5cGUsIGlkKTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgY2FzZSBcImNpdHlcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzdGF0ZVwiOlxuICAgICAgICAgICAgICAgIC8vIGFsbG93cyBhbmQgYWxwaGEgY2hhcnMsIGFzIHdlbGwgYXMgd2hpdGUgc3BhY2UgYW5kIGEgZmV3IGV4dHJhIGNoYXJzXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtelxccywuJy1dezAsMjh9LztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjb3JwTmFtZVwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOystXXswLDc1fS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYWRkcmVzc1wiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOys6KCklJi1dezAsNTB9LztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ6aXBcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bMC05XXs1fSQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBob25lXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eKFsoXVswLTldezN9WyldfFswLTldezN9KVtcXHNcXC0uXT9bMC05XXszfVtcXHNcXC0uXT9bMC05XXs0fSQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVtYWlsXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOS5fJSstXStAW2EtekEtWjAtOS4tXStcXC5bYS16QS1aXXsyLH0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJub3Rlc1wiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOys6KCklJjw+XFxbXFxde31cXC09XCJ8YFxcXFxcXC9dezAsMjUwfS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZXh0XCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOVxcczotXSskLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eMjBbMC05XXsyfVstXSgwWzEtOV18MVswLTJdKVstXSgwWzEtOV18WzEtMl1bMC05XXwzWzAxXSkkLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJiaXJ0aGRhdGVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oMTk5WzAtOV18MjBbMC05XXsyfSlbLV0oMFsxLTldfDFbMC0yXSlbLV0oMFsxLTldfFsxLTJdWzAtOV18M1swMV0pJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYW1vdW50XCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW1xcJF0/W1xcZF0rKFsuXVtcXGRdezJ9KT8kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIGNsYXNzIHNlYXJjaFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiByZXF1aXJlZCBvciB0cmltbWVkIGxlbmd0aCBpcyBub3QgMCwgdGhlbiB2YWxpZGF0ZSBpbmZvXG4gICAgICAgIGlmKCRvYmouYXR0cigncmVxdWlyZWQnKSB8fCAkb2JqLnZhbCgpKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgaWYgdmFsdWUgbWF0Y2hlcyByZWdleCBmb3IgZmllbGQgdHlwZVxuICAgICAgICAgICAgaWYoIXBhdHRlcm4udGVzdCgkb2JqLnZhbCgpLnRyaW0oKSkgfHwgJG9iai52YWwoKS50cmltKCkubGVuZ3RoID09IDAgJiYgJG9iai5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgZmFpbHMsIGFkZHMgaW52YWxpZCBjbGFzcyAoaGlnaGxpZ2h0aW5nKSwgY2hhbmdlcyBwbGFjZWhvbGRlciB0byB3aGF0IHNob3VsZCBiZSBlbnRlcmVkXG4gICAgICAgICAgICAgICAgJG9iai5hZGRDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJG9iai5kYXRhKCdpbnZhbGlkJykpLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codHlwZSwgJyBmYWlsZWQgdGVzdCcsIHBhdHRlcm4pO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIHBhc3NlcywgcmVtb3ZlcyBpbnZhbGlkIGNsYXNzLCByZXNldHMgcGxhY2Vob2xkZXIgdG8gZGVmYXVsdFxuICAgICAgICAgICAgICAgICRvYmoucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICRvYmouZGF0YSgncGxhY2Vob2xkZXInKSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codHlwZSwgJyBwYXNzZWQgdGVzdCcsIHBhdHRlcm4pO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cblx0dmFyIHZhbGlkYXRlRm9ybSA9IGZ1bmN0aW9uIChmb3Jtcykge1xuXHRcdHZhciBwYXNzID0gdHJ1ZTtcblx0XHRmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XG5cdFx0XHQkKCcjJysgdiArJyAuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYodmFsaWRhdGVJbnB1dCgkKHRoaXMpLmRhdGEoJ3R5cGUnKSwgJCh0aGlzKS5hdHRyKCdpZCcpKSA9PSBmYWxzZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCQodGhpcykuYXR0cignaWQnKSArXCIgZmFpbGVkIHRoZSB0ZXN0IFwiKyAkKHRoaXMpLmRhdGEoJ3R5cGUnKSArXCIgZW50ZXJlZCBpbmZvOiBcIisgJCh0aGlzKS52YWwoKSk7XG5cdFx0XHRcdFx0cGFzcyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRyZXR1cm4gcGFzcztcblx0fTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXQ6IHZhbGlkYXRlSW5wdXQsXG5cdFx0dmFsaWRhdGVGb3JtOiB2YWxpZGF0ZUZvcm1cbiAgICB9O1xufV0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
=======
function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,a){return{request:function(t){return t.headers=t.headers||{},a.isAuthed()&&(t.headers.Authorization="Bearer "+a.getToken()),t},response:function(a){return 401===a.status&&e.path("/"),a||t.when(a)},responseError:function(a){return 401===a.status?e.path("/"):console.log(a.status),t.reject(a)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var a=e.split(".")[1],o=a.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),a=Math.round((new Date).getTime()/1e3)<=e.exp;return a||this.logout(),a}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService",function(t,e,a,o,n,i,l){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(e){t.corp={info:{},contact:{},donations:[]},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){t.corp=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Put corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(e){console.log("Posted corp, got id ",e.data),t.corp.id=e.data.id,t.corp.info=e.data.info?e.data.info:{},t.contact=e.data.contact?e.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=e.data.donations?e.data.donations:{}}):console.log("Add corp input tests failed")},t.addDonation=function(){var e=t.newDonation;e.date=l.toDB(e.date),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",e,t.corp.donations)}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,e,a,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&a.makeDataCall("zip",t.zip.data).then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var e=a.makeDataCall("age",t.age.data);e.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=a.makeDataCall("family","");o.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=a.makeDataCall("company","");i.then(function(e){t.emailList=e,t.totalResults=e.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(e){var a=angular.element(e.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],a.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),a.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,e){function a(a,o){var n=e.defer();return console.log("this is in the make data call",a,o),t({method:"GET",url:"../createMailList",params:{type:a,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:a}}]),app.service("dateService",["MomentJS",function(t){var e="YYYY-MM-DD",a=function(a){return t(a).format(e)};return{toDB:a}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","toastr","dateService",function(t,e,a,o,n,i,l,s){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(e){t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},e.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){t.family=n.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),l.success("Information saved!"),alert("Submitted"),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("update family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(e){console.log("Put family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/family",data:{family:t.family}}).then(function(e){console.log("Posted family, got id ",e.data),t.family.id=e.data.id,t.family.adultOne=e.data.adultOne?e.data.adultOne:{},t.family.adultTwo=e.data.adultTwo?e.data.adultTwo:{},t.family.emergency=e.data.emergency?e.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=e.data.children?e.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=e.data.donations?e.data.donations:[]}):console.log("Add family failed input tests")},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1,l.success("Child updated!")):(t.family.children.push(t.newChild),l.success("Child added!")),t.newChild={}},t.editChild=function(e){t.editingChild=e,t.newChild=t.family.children[e]},t.removeChild=function(e){console.log("in remove child index",e," edit ",t.editingChild),t.family.children.splice(e,1),e==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){var e=t.newDonation;e.date=s.toDB(e.date),t.family.donations.push(t.newDonation),t.newDonation={},console.log("added donation",e,t.family.donations)}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,a,o,n){t.submit=function(){e.post("/login",t.form).then(function(t){a.saveToken(t.data),n.user=a.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,a){t.formInput={},t.searchBtn=function(){a.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],a=[],o=[],n=[],i=function(a){return t({method:"GET",url:"../search",params:{search:a}}).then(function(t){e=t.data,l(e),r(e),s(e)})},l=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},s=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),console.log("this is in getElement2",a),a},r=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return e(t),console.log("this is getElements3",n),n},c={getKids:r,getAdults:s,getCompanies:l,makeDataCall:i,results:e,companies:o,adults:a,kids:n};return c}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,a,o){a.user=t.getUser(),a.user&&a.user.username&&o.path("/home"),e.logout=function(){t.logout(),a.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope",function(t,e,a){e.hide=function(){console.log("hide"),a.hide=!0},e.listname={},e.createList=function(){console.log("create list: "+e.listname.input),t.postList(e.listname.input),console.log("list #",t.listNum),e.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,e){var a="",o=[];this.postList=function(t){return console.log("did the name make it to the service? "+t),e.post("/newContactList",{name:t}).then(function(t){console.log(t.data),a=t.data,console.log("Id? ",a)},function(t){console.log(t)})},this.popList=function(t){this.dataObject={importDataArray:o,listNum:a},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),n(t),e.post("/populateContactList",this.dataObject).then(function(t,e,a,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0})["catch"](function(){return!1})};var n=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email],first_name:t.firstName,last_name:t.lastName,company_name:t.company,addresses:[{city:t.city}]},console.log(this.contactObject),o.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,e,a){e.listName={},e.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),e.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,a){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),a.path("/index")})}}]),app.service("validService",[function(){var t=function(t,e){var a,o=e?$("#"+e):!1;switch(console.log("object is ",o,t,e),t){case"name":case"city":case"state":a=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":a=/^[0-9]{5}$/;break;case"phone":a=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":a=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":a=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":a=/^[a-zA-Z0-9\s:-]+$/;break;case"date":a=/^20[0-9]{2}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"birthdate":a=/^(199[0-9]|20[0-9]{2})[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"amount":a=/^[\$]?[\d]+([.][\d]{2})?$/;break;default:return console.log("invalid class search"),!1}return o.attr("required")||o.val()?!a.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),console.log(t," failed test",a),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),console.log(t," passed test",a),!0):void 0},e=function(e){var a=!0;return e.forEach(function(e,o,n){$("#"+e+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(console.log($(this).attr("id")+" failed the test "+$(this).data("type")+" entered info: "+$(this).val()),a=!1)})}),a};return{validateInput:t,validateForm:e}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udG9sbGVyLmpzIiwiY3JlYXRlTGlzdFNlcnZpY2UuanMiLCJkYXRlU2VydmljZS5qcyIsImZhbWlseUNvbnRyb2xsZXIuanMiLCJsb2dpbkNvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoQ29udHJvbGxlci5qcyIsIm1haW5TZWFyY2hTZXJ2aWNlLmpzIiwibW9kYWxJbnN0YW5jZUNvbnRyb2xsZXIuanMiLCJuYXZDb250cm9sbGVyLmpzIiwibmV3Q29udGFjdExpc3RDb250cm9sbGVyLmpzIiwibmV3Q29udGFjdExpc3RTZXJ2aWNlLmpzIiwicG9wTGlzdENvbnRyb2xsZXIuanMiLCJyZWdpc3RlckNvbnRyb2xsZXIuanMiLCJyZXNldENvbnRyb2xsZXIuanMiLCJ2YWxpZFNlcnZpY2UuanMiXSwibmFtZXMiOlsiZm9ybWF0RGF0ZXMiLCJkYXRlIiwiZnVsbCIsIm1vbWVudCIsImZvcm1hdCIsImZ1bGxEYXRlIiwicHJldHR5IiwicHJldHR5RGF0ZSIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsIiRzY29wZSIsIiR1aWJNb2RhbCIsIiRsb2ciLCJSZXN1bHRTZXJ2aWNlIiwiJGh0dHAiLCJ2YWxpZFNlcnZpY2UiLCJkYXRlU2VydmljZSIsInZhbGlkYXRlSW5wdXQiLCJjb21wYW5pZXMiLCJjb3JwIiwiaW5mbyIsImNvbnRhY3QiLCJkb25hdGlvbnMiLCJuZXdEb25hdGlvbiIsImFuaW1hdGlvbnNFbmFibGVkIiwiY2xlYXJDb3JwIiwiZm9ybXNBcnJheSIsImZvckVhY2giLCJ2IiwiJCIsImVhY2giLCJyZW1vdmVDbGFzcyIsImF0dHIiLCJkYXRhIiwib3BlbiIsInNpemUiLCJpZCIsIm1ldGhvZCIsInVybCIsInRoZW4iLCJtb2RhbEluc3RhbmNlIiwiYW5pbWF0aW9uIiwic2NvcGUiLCJyZXNvbHZlIiwiaXRlbXMiLCJyZXN1bHQiLCJzZWxlY3RlZEl0ZW0iLCJzZWxlY3RlZCIsInRvZ2dsZUFuaW1hdGlvbiIsInNhdmUiLCJ2YWxpZGF0ZUZvcm0iLCJyZXMiLCJsZW5ndGgiLCJhZGREb25hdGlvbiIsInRlbXAiLCJ0b0RCIiwicHVzaCIsIkNvbnRhY3RMaXN0RGF0YVNlcnZpY2UiLCJuZXdDb250YWN0TGlzdERhdGEiLCJ0b2FzdHIiLCIkcm9vdFNjb3BlIiwidHlwZSIsImFnZSIsInppcCIsImVtYWlscyIsImluY2x1ZGVkRW1haWxzIiwidG90YWxEaXNwbGF5ZWQiLCJ0b3RhbFJlc3VsdHMiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwic3VjY2VzcyIsImVycm9yIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsInBvcExpc3QiLCJsb2FkTW9yZSIsInNob3dBbGwiLCJjaGVja0FsbCIsImV2ZW50IiwiJGJ1dHRvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJ2YWwiLCJjb3B5IiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwiZGJGb3JtYXQiLCJ0b0RiRm9ybWF0IiwiYWR1bHRzIiwia2lkcyIsImZhbWlseSIsImFkdWx0T25lIiwiYWR1bHRUd28iLCJlbWVyZ2VuY3kiLCJjaGlsZHJlbiIsIm5ld0NoaWxkIiwiY2xlYXJGYW1pbHkiLCJhbGVydCIsImFkZENoaWxkIiwiZWRpdGluZ0NoaWxkIiwiZWRpdENoaWxkIiwiaW5kZXgiLCJyZW1vdmVDaGlsZCIsInNwbGljZSIsImNsZWFyQ2hpbGQiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImJpcnRoZGF0ZSIsInNjaG9vbCIsIm5vdGVzIiwic3VibWl0IiwicG9zdCIsImZvcm0iLCJ1c2VyIiwiZm9ybUlucHV0Iiwic2VhcmNoQnRuIiwicmVzdWx0cyIsImdldENvbXBhbmllcyIsImdldEtpZHMiLCJnZXRBZHVsdHMiLCJhcnJheSIsImdldEVsZW1lbnQxIiwiZ2V0RWxlbWVudDIiLCJnZXRFbGVtZW50MyIsInB1YmxpY0FwaSIsIiRtb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwidXNlcm5hbWUiLCJoaWRlIiwibGlzdG5hbWUiLCJjcmVhdGVMaXN0IiwiaW5wdXQiLCJwb3N0TGlzdCIsImxpc3ROdW0iLCJpbXBvcnREYXRhQXJyYXkiLCJuYW1lIiwibGlzdCIsImRhdGFPYmplY3QiLCJnZXRDaGVja2VkIiwibCIsIm9iamVjdCIsImNvbnRhY3RPYmplY3QiLCJlbWFpbF9hZGRyZXNzZXMiLCJlbWFpbCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJjb21wYW55X25hbWUiLCJjb21wYW55IiwiYWRkcmVzc2VzIiwiY2l0eSIsImxpc3ROYW1lIiwicHV0IiwicGF0dGVybiIsIiRvYmoiLCJ0ZXN0IiwidHJpbSIsImFkZENsYXNzIiwiZm9ybXMiLCJwYXNzIiwiaSIsImEiXSwibWFwcGluZ3MiOiJBQUtBLFFBQUFBLGFBQUFDLEdBQ0EsT0FDQUMsS0FBQUMsT0FBQUYsR0FBQUcsT0FBQUMsVUFDQUMsT0FBQUgsT0FBQUYsR0FBQUcsT0FBQUcsYUFSQSxHQUFBQyxLQUFBQyxRQUFBQyxPQUFBLE9BQUEsVUFBQSxZQUFBLGVBQUEsa0JBQUEsU0FBQSxxQkFFQUgsV0FBQSxjQUNBRixTQUFBLHNCQVNBRyxLQUFBRyxRQUFBLGlCQUNBLFNBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FDQUMsWUFBQSxzQkFFQUQsS0FBQSxXQUNBQyxZQUFBLHdCQUVBRCxLQUFBLGFBQ0FDLFlBQUEseUJBRUFELEtBQUEsZ0JBQ0FDLFlBQUEsNkJBRUFELEtBQUEsY0FDQUMsWUFBQSx5QkFDQUMsV0FBQSxtQkFFQUYsS0FBQSxZQUNBQyxZQUFBLHVCQUNBQyxXQUFBLGlCQUVBRixLQUFBLGdCQUNBQyxZQUFBLDZCQUVBRSxXQUNBQyxXQUFBLGVDdkNBVCxJQUFBVSxRQUFBLG1CQUFBLEtBQUEsWUFBQSxjQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FDQUMsUUFBQSxTQUFBWCxHQUtBLE1BSkFBLEdBQUFZLFFBQUFaLEVBQUFZLFlBQ0FGLEVBQUFHLGFBQ0FiLEVBQUFZLFFBQUFFLGNBQUEsVUFBQUosRUFBQUssWUFFQWYsR0FFQWdCLFNBQUEsU0FBQUEsR0FPQSxNQUxBLE9BQUFBLEVBQUFDLFFBR0FSLEVBQUFTLEtBQUEsS0FFQUYsR0FBQVIsRUFBQU4sS0FBQWMsSUFDQUcsY0FBQSxTQUFBSCxHQVNBLE1BUkEsT0FBQUEsRUFBQUMsT0FHQVIsRUFBQVMsS0FBQSxLQUdBRSxRQUFBQyxJQUFBTCxFQUFBQyxRQUVBVCxFQUFBYyxPQUFBTixRQzFCQW5CLElBQUEwQixRQUFBLGVBQUEsVUFBQSxTQUFBQyxHQUVBQyxLQUFBQyxTQUFBLFNBQUFDLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQUFDLEdBQUFELEVBQUFFLE1BQUEsS0FBQSxHQUNBQyxFQUFBRixFQUFBRyxRQUFBLElBQUEsS0FBQUEsUUFBQSxJQUFBLElBQ0EsT0FBQUMsTUFBQUMsTUFBQVQsRUFBQVUsS0FBQUosSUFDQSxVQUdBTCxLQUFBVSxVQUFBLFNBQUFSLEdBQ0FILEVBQUFZLGFBQUFDLFNBQUFWLEdBSUFGLEtBQUFWLFNBQUEsV0FDQSxNQUFBUyxHQUFBWSxhQUFBQyxVQUdBWixLQUFBWixTQUFBLFdBQ0EsR0FBQWMsR0FBQUYsS0FBQVYsVUFDQSxJQUFBWSxFQUFBLENBQ0EsR0FBQVcsR0FBQWIsS0FBQUMsU0FBQUMsR0FDQVksRUFBQUMsS0FBQUMsT0FBQSxHQUFBQyxPQUFBQyxVQUFBLE1BQUFMLEVBQUFNLEdBSUEsT0FIQUwsSUFDQWQsS0FBQW9CLFNBRUFOLEVBRUEsT0FBQSxHQUlBZCxLQUFBb0IsT0FBQSxpQkFDQXJCLEdBQUFZLGFBQUFDLFVBSUFaLEtBQUFxQixRQUFBLFdBQ0EsTUFBQXJCLE1BQUFDLFNBQUFELEtBQUFWLGdCQ3RDQWxCLElBQUFPLFdBQUEsZ0JBQUEsU0FBQSxZQUFBLE9BQUEsZ0JBQUEsUUFBQSxlQUFBLGNBQUEsU0FBQTJDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0FOLEVBQUFPLGNBQUFGLEVBQUFFLGNBRUFQLEVBQUFRLFVBQUFMLEVBQUFLLFVBQ0FSLEVBQUFTLE1BQ0FDLFFBQ0FDLFdBQ0FDLGNBRUFaLEVBQUFhLGVBQ0FiLEVBQUFjLG1CQUFBLEVBRUFkLEVBQUFlLFVBQUEsU0FBQUMsR0FDQWhCLEVBQUFTLE1BQ0FDLFFBQ0FDLFdBQ0FDLGNBRUFaLEVBQUFhLGVBQ0FHLEVBQUFDLFFBQUEsU0FBQUMsR0FDQUMsRUFBQSxJQUFBRCxFQUFBLGlCQUFBRSxLQUFBLFdBQ0FELEVBQUF6QyxNQUFBMkMsWUFBQSxXQUFBQyxLQUFBLGNBQUFILEVBQUF6QyxNQUFBNkMsS0FBQSxxQkFLQXZCLEVBQUF3QixLQUFBLFNBQUFDLEVBQUFDLEdBRUEsTUFEQXJELFNBQUFDLElBQUEsWUFBQW9ELEdBQ0F0QixHQUNBdUIsT0FBQSxNQUNBQyxJQUFBLGlCQUNBckMsUUFBQW1DLEdBQUFBLEtBQ0FHLEtBQUEsU0FBQTVELEdBRUErQixFQUFBUyxLQUFBeEMsRUFBQXNELElBQ0EsSUFBQU8sR0FBQTdCLEVBQUF1QixNQUNBTyxVQUFBL0IsRUFBQWMsa0JBQ0ExRCxZQUFBLHdCQUNBQyxXQUFBLG9CQUNBb0UsS0FBQUEsRUFDQU8sTUFBQWhDLEVBQ0FpQyxTQUNBQyxNQUFBLFdBQ0EsTUFBQWxDLEdBQUFTLFFBS0FxQixHQUFBSyxPQUFBTixLQUFBLFNBQUFPLEdBQ0FwQyxFQUFBcUMsU0FBQUQsR0FDQSxXQUNBbEMsRUFBQVEsS0FBQSx1QkFBQSxHQUFBZixZQUtBSyxFQUFBc0MsZ0JBQUEsV0FDQXRDLEVBQUFjLG1CQUFBZCxFQUFBYyxtQkFJQWQsRUFBQXVDLEtBQUEsV0FDQWxFLFFBQUFDLElBQUEsaUJBQUEwQixFQUFBUyxNQUdBVCxFQUFBUyxLQUFBaUIsR0FxQkFyQixFQUFBbUMsY0FBQSxtQkFBQSx5QkFFQW5FLFFBQUFDLElBQUEsY0FBQTBCLEVBQUFTLE1BQ0FMLEdBQ0F1QixPQUFBLE1BQ0FDLElBQUEsZUFDQUwsTUFBQWQsS0FBQVQsRUFBQVMsUUFDQW9CLEtBQUEsU0FBQVksR0FDQXBFLFFBQUFDLElBQUEsb0JBQUFtRSxFQUFBbEIsTUFFQXZCLEVBQUFTLEtBQUFpQixHQUFBZSxFQUFBbEIsS0FBQUcsR0FDQTFCLEVBQUFTLEtBQUFDLEtBQUErQixFQUFBbEIsS0FBQSxLQUFBa0IsRUFBQWxCLEtBQUFiLFFBQ0FWLEVBQUFXLFFBQUE4QixFQUFBbEIsS0FBQSxRQUFBa0IsRUFBQWxCLEtBQUFaLFdBRUFYLEVBQUFTLEtBQUFHLFVBQUE4QixTQUNBMUMsRUFBQVMsS0FBQUcsY0FFQVosRUFBQVksVUFBQTZCLEVBQUFsQixLQUFBLFVBQUFrQixFQUFBbEIsS0FBQVgsZ0JBR0F2QyxRQUFBQyxJQUFBLGdDQXhDQStCLEVBQUFtQyxjQUFBLGtCQUFBLHVCQUNBcEMsR0FDQXVCLE9BQUEsT0FDQUMsSUFBQSxlQUNBTCxNQUFBZCxLQUFBVCxFQUFBUyxRQUNBb0IsS0FBQSxTQUFBWSxHQUNBcEUsUUFBQUMsSUFBQSx1QkFBQW1FLEVBQUFsQixNQUNBdkIsRUFBQVMsS0FBQWlCLEdBQUFlLEVBQUFsQixLQUFBRyxHQUNBMUIsRUFBQVMsS0FBQUMsS0FBQStCLEVBQUFsQixLQUFBLEtBQUFrQixFQUFBbEIsS0FBQWIsUUFDQVYsRUFBQVcsUUFBQThCLEVBQUFsQixLQUFBLFFBQUFrQixFQUFBbEIsS0FBQVosV0FFQVgsRUFBQVMsS0FBQUcsVUFBQThCLFNBQ0ExQyxFQUFBUyxLQUFBRyxjQUVBWixFQUFBWSxVQUFBNkIsRUFBQWxCLEtBQUEsVUFBQWtCLEVBQUFsQixLQUFBWCxlQUdBdkMsUUFBQUMsSUFBQSxnQ0E2QkEwQixFQUFBMkMsWUFBQSxXQUNBLEdBQUFDLEdBQUE1QyxFQUFBYSxXQUNBK0IsR0FBQXJHLEtBQUErRCxFQUFBdUMsS0FBQUQsRUFBQXJHLE1BQ0F5RCxFQUFBUyxLQUFBRyxVQUFBa0MsS0FBQTlDLEVBQUFhLGFBQ0FiLEVBQUFhLGVBQ0F4QyxRQUFBQyxJQUFBLGlCQUFBc0UsRUFBQTVDLEVBQUFTLEtBQUFHLGVDeEhBOUQsSUFBQU8sV0FBQSxvQkFBQSxTQUFBLFFBQUEseUJBQUEscUJBQUEsU0FBQSxhQUFBLFNBQUEyQyxFQUFBSSxFQUFBMkMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQWxELEVBQUFtRCxRQUNBbkQsRUFBQW9ELE9BQ0FwRCxFQUFBcUQsT0FFQXJELEVBQUFzRCxVQUNBdEQsRUFBQXNELE9BQUFDLGtCQUNBdkQsRUFBQXVELGtCQUNBdkQsRUFBQXdELGVBQUEsR0FDQXhELEVBQUF5RCxhQUFBLEVBS0F6RCxFQUFBMEQsYUFDQTFELEVBQUEyRCxjQUFBLFdBb0JBLEdBbkJBM0QsRUFBQTBELGFBSUEsU0FBQTFELEVBQUFtRCxNQUVBSixFQUFBYSxhQUFBLE1BQUE1RCxFQUFBcUQsSUFBQTlCLE1BQ0FNLEtBQUEsU0FBQU4sR0FDQXZCLEVBQUEwRCxVQUFBbkMsRUFDQXZCLEVBQUF5RCxhQUFBbEMsRUFBQW1CLE9BRUFPLEVBQUFZLFFBQUEsVUFBQTdELEVBQUF5RCxhQUFBLGNBTEFWLFNBTUEsV0FDQUUsRUFBQWEsTUFBQSw0QkFNQSxTQUFBOUQsRUFBQW1ELEtBQUEsQ0FDQSxHQUFBQyxHQUFBTCxFQUFBYSxhQUFBLE1BQUE1RCxFQUFBb0QsSUFBQTdCLEtBQ0E2QixHQUFBdkIsS0FBQSxTQUFBTixHQUVBdkIsRUFBQTBELFVBQUFuQyxFQUNBdkIsRUFBQXlELGFBQUFsQyxFQUFBbUIsT0FDQU8sRUFBQVksUUFBQSxVQUFBN0QsRUFBQXlELGFBQUEsY0FKQUwsU0FLQSxXQUNBSCxFQUFBYSxNQUFBLDRCQUtBLEdBQUEsT0FBQTlELEVBQUFtRCxLQUFBLENBQ0EsR0FBQVksR0FBQWhCLEVBQUFhLGFBQUEsU0FBQSxHQUNBRyxHQUFBbEMsS0FBQSxTQUFBTixHQUNBdkIsRUFBQTBELFVBQUFuQyxFQUNBdkIsRUFBQXlELGFBQUFsQyxFQUFBbUIsT0FFQU8sRUFBQVksUUFBQSxVQUFBN0QsRUFBQXlELGFBQUEsY0FKQU0sU0FLQSxXQUNBZCxFQUFBYSxNQUFBLDRCQUtBLEdBQUEsUUFBQTlELEVBQUFtRCxLQUFBLENBQ0EsR0FBQWEsR0FBQWpCLEVBQUFhLGFBQUEsVUFBQSxHQUNBSSxHQUFBbkMsS0FBQSxTQUFBTixHQUNBdkIsRUFBQTBELFVBQUFuQyxFQUNBdkIsRUFBQXlELGFBQUFsQyxFQUFBbUIsT0FFQU8sRUFBQVksUUFBQSxVQUFBN0QsRUFBQXlELGFBQUEsY0FKQU8sU0FLQSxXQUNBZixFQUFBYSxNQUFBLDRCQUtBOUQsRUFBQW1ELFFBQ0FuRCxFQUFBb0QsT0FDQXBELEVBQUFxRCxRQUdBckQsRUFBQWlFLGFBQUEsV0FFQTVGLFFBQUFDLElBQUEwQixFQUFBc0QsT0FBQUMsZ0JBQ0FQLEVBQUFrQixRQUFBbEUsRUFBQXNELE9BQUFDLGdCQUNBTixFQUFBWSxRQUFBLHVDQUVBWixFQUFBYSxNQUFBLG1DQUlBOUQsRUFBQW1FLFNBQUEsV0FDQW5FLEVBQUF3RCxnQkFBQSxJQUdBeEQsRUFBQW9FLFFBQUEsV0FDQXBFLEVBQUF3RCxlQUFBeEQsRUFBQXlELGNBR0F6RCxFQUFBcUUsU0FBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUF4SCxRQUFBeUgsUUFBQUYsRUFBQUcsT0FDQXpFLEdBQUFzRCxPQUFBQyxlQUFBYixRQUFBMUMsRUFBQXlELGNBQ0F6RCxFQUFBc0QsT0FBQUMsa0JBQ0FnQixFQUFBRyxJQUFBLGVBRUExRSxFQUFBc0QsT0FBQUMsZUFBQXhHLFFBQUE0SCxLQUFBM0UsRUFBQTBELFdBQ0FhLEVBQUFHLElBQUEsb0JDeEdBNUgsSUFBQVUsUUFBQSwwQkFBQSxRQUFBLEtBQUEsU0FBQTRDLEVBQUEzQyxHQUVBLFFBQUFtRyxHQUFBVCxFQUFBeUIsR0FDQSxHQUFBQyxHQUFBcEgsRUFBQXFILE9BVUEsT0FUQXpHLFNBQUFDLElBQUEsZ0NBQUE2RSxFQUFBeUIsR0FDQXhFLEdBQ0F1QixPQUFBLE1BQ0FDLElBQUEsb0JBQ0FyQyxRQUFBNEQsS0FBQUEsRUFBQTRCLE9BQUFILEtBQ0EvQyxLQUFBLFNBQUE1RCxHQUNBc0QsS0FBQXRELEVBQUFzRCxLQUNBc0QsRUFBQTVDLFFBQUFoRSxFQUFBc0QsUUFFQXNELEVBQUFHLFFBR0EsT0FDQXpELFFBQ0FxQyxhQUFBQSxNQ2xCQTlHLElBQUEwQixRQUFBLGVBQUEsV0FBQSxTQUFBL0IsR0FDQSxHQUFBd0ksR0FBQSxhQUVBQyxFQUFBLFNBQUEzSSxHQUNBLE1BQUFFLEdBQUFGLEdBQUFHLE9BQUF1SSxHQUdBLFFBQ0FwQyxLQUFBcUMsTUNQQXBJLElBQUFPLFdBQUEsa0JBQUEsU0FBQSxZQUFBLE9BQUEsZ0JBQUEsUUFBQSxlQUFBLFNBQUEsY0FBQSxTQUFBMkMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTRDLEVBQUEzQyxHQUVBTixFQUFBTyxjQUFBRixFQUFBRSxjQUVBUCxFQUFBbUYsT0FBQWhGLEVBQUFnRixPQUNBbkYsRUFBQW9GLEtBQUFqRixFQUFBaUYsS0FDQXBGLEVBQUFxRixRQUNBQyxZQUNBQyxZQUNBQyxhQUNBQyxZQUNBN0UsY0FFQVosRUFBQTBGLFlBQ0ExRixFQUFBYSxlQUVBYixFQUFBMkYsWUFBQSxTQUFBM0UsR0FDQWhCLEVBQUFxRixRQUNBQyxZQUNBQyxZQUNBQyxhQUNBQyxZQUNBN0UsY0FFQVosRUFBQTBGLFlBQ0ExRixFQUFBYSxlQUNBRyxFQUFBQyxRQUFBLFNBQUFDLEdBQ0FDLEVBQUEsSUFBQUQsRUFBQSxpQkFBQUUsS0FBQSxXQUNBRCxFQUFBekMsTUFBQTJDLFlBQUEsV0FBQUMsS0FBQSxjQUFBSCxFQUFBekMsTUFBQTZDLEtBQUEscUJBT0F2QixFQUFBYyxtQkFBQSxFQUNBZCxFQUFBd0IsS0FBQSxTQUFBQyxFQUFBQyxHQUVBLE1BREFyRCxTQUFBQyxJQUFBLGNBQUFvRCxHQUNBdEIsR0FDQXVCLE9BQUEsTUFDQUMsSUFBQSxZQUNBckMsUUFBQW1DLEdBQUFBLEtBQ0FHLEtBQUEsU0FBQTVELEdBRUErQixFQUFBcUYsT0FBQXBILEVBQUFzRCxJQUNBLElBQUFPLEdBQUE3QixFQUFBdUIsTUFDQU8sVUFBQS9CLEVBQUFjLGtCQUNBMUQsWUFBQSwwQkFDQUMsV0FBQSxvQkFDQW9FLEtBQUFBLEVBQ0FPLE1BQUFoQyxFQUNBaUMsU0FDQUMsTUFBQSxXQUNBLE1BQUFsQyxHQUFBcUYsVUFJQXZELEdBQUFLLE9BQUFOLEtBQUEsU0FBQU8sR0FDQXBDLEVBQUFxQyxTQUFBRCxHQUNBLFdBQ0FsQyxFQUFBUSxLQUFBLHVCQUFBLEdBQUFmLFlBS0FLLEVBQUFzQyxnQkFBQSxXQUNBdEMsRUFBQWMsbUJBQUFkLEVBQUFjLG1CQUlBZCxFQUFBdUMsS0FBQSxXQUNBbEUsUUFBQUMsSUFBQSxpQkFBQTBCLEVBQUFxRixRQUNBcEMsRUFBQVksUUFBQSxzQkFDQStCLE1BQUEsYUFHQTVGLEVBQUFxRixPQUFBM0QsR0EwQkFyQixFQUFBbUMsY0FBQSxrQkFBQSxxQkFFQW5FLFFBQUFDLElBQUEsZ0JBQUEwQixFQUFBcUYsUUFDQWpGLEdBQ0F1QixPQUFBLE1BQ0FDLElBQUEsVUFDQUwsTUFBQThELE9BQUFyRixFQUFBcUYsVUFDQXhELEtBQUEsU0FBQVksR0FDQXBFLFFBQUFDLElBQUEsc0JBQUFtRSxFQUFBbEIsTUFDQXZCLEVBQUFxRixPQUFBM0QsR0FBQWUsRUFBQWxCLEtBQUFHLEdBQ0ExQixFQUFBcUYsT0FBQUMsU0FBQTdDLEVBQUFsQixLQUFBLFNBQUFrQixFQUFBbEIsS0FBQStELFlBQ0F0RixFQUFBcUYsT0FBQUUsU0FBQTlDLEVBQUFsQixLQUFBLFNBQUFrQixFQUFBbEIsS0FBQWdFLFlBQ0F2RixFQUFBcUYsT0FBQUcsVUFBQS9DLEVBQUFsQixLQUFBLFVBQUFrQixFQUFBbEIsS0FBQWlFLGFBQ0F4RixFQUFBcUYsT0FBQUksU0FBQS9DLFNBQ0ExQyxFQUFBcUYsT0FBQUksYUFFQXpGLEVBQUFxRixPQUFBSSxTQUFBaEQsRUFBQWxCLEtBQUEsU0FBQWtCLEVBQUFsQixLQUFBa0UsWUFDQXpGLEVBQUFxRixPQUFBekUsVUFBQThCLFNBQ0ExQyxFQUFBcUYsT0FBQXpFLGNBRUFaLEVBQUFxRixPQUFBekUsVUFBQTZCLEVBQUFsQixLQUFBLFVBQUFrQixFQUFBbEIsS0FBQVgsZ0JBR0F2QyxRQUFBQyxJQUFBLGtDQS9DQStCLEVBQUFtQyxjQUFBLGlCQUFBLG1CQUNBcEMsR0FDQXVCLE9BQUEsT0FDQUMsSUFBQSxVQUNBTCxNQUFBOEQsT0FBQXJGLEVBQUFxRixVQUNBeEQsS0FBQSxTQUFBWSxHQUNBcEUsUUFBQUMsSUFBQSx5QkFBQW1FLEVBQUFsQixNQUNBdkIsRUFBQXFGLE9BQUEzRCxHQUFBZSxFQUFBbEIsS0FBQUcsR0FDQTFCLEVBQUFxRixPQUFBQyxTQUFBN0MsRUFBQWxCLEtBQUEsU0FBQWtCLEVBQUFsQixLQUFBK0QsWUFDQXRGLEVBQUFxRixPQUFBRSxTQUFBOUMsRUFBQWxCLEtBQUEsU0FBQWtCLEVBQUFsQixLQUFBZ0UsWUFDQXZGLEVBQUFxRixPQUFBRyxVQUFBL0MsRUFBQWxCLEtBQUEsVUFBQWtCLEVBQUFsQixLQUFBaUUsYUFDQXhGLEVBQUFxRixPQUFBSSxTQUFBL0MsU0FDQTFDLEVBQUFxRixPQUFBSSxhQUVBekYsRUFBQXFGLE9BQUFJLFNBQUFoRCxFQUFBbEIsS0FBQSxTQUFBa0IsRUFBQWxCLEtBQUFrRSxZQUNBekYsRUFBQXFGLE9BQUF6RSxVQUFBOEIsU0FDQTFDLEVBQUFxRixPQUFBekUsY0FFQVosRUFBQXFGLE9BQUF6RSxVQUFBNkIsRUFBQWxCLEtBQUEsVUFBQWtCLEVBQUFsQixLQUFBWCxlQUdBdkMsUUFBQUMsSUFBQSxrQ0FnQ0EwQixFQUFBNkYsU0FBQSxXQUNBeEgsUUFBQUMsSUFBQSxjQUFBMEIsRUFBQTBGLFNBQUExRixFQUFBcUYsT0FBQUksVUFFQXpGLEVBQUE4RixjQUNBOUYsRUFBQXFGLE9BQUFJLFNBQUF6RixFQUFBOEYsY0FBQTlGLEVBQUEwRixTQUNBMUYsRUFBQThGLGNBQUEsRUFDQTdDLEVBQUFZLFFBQUEsb0JBR0E3RCxFQUFBcUYsT0FBQUksU0FBQTNDLEtBQUE5QyxFQUFBMEYsVUFDQXpDLEVBQUFZLFFBQUEsaUJBRUE3RCxFQUFBMEYsYUFJQTFGLEVBQUErRixVQUFBLFNBQUFDLEdBRUFoRyxFQUFBOEYsYUFBQUUsRUFDQWhHLEVBQUEwRixTQUFBMUYsRUFBQXFGLE9BQUFJLFNBQUFPLElBR0FoRyxFQUFBaUcsWUFBQSxTQUFBRCxHQUNBM0gsUUFBQUMsSUFBQSx3QkFBQTBILEVBQUEsU0FBQWhHLEVBQUE4RixjQUNBOUYsRUFBQXFGLE9BQUFJLFNBQUFTLE9BQUFGLEVBQUEsR0FDQUEsR0FBQWhHLEVBQUE4RixjQUNBekgsUUFBQUMsSUFBQSxjQUNBMEIsRUFBQW1HLGNBRUE5SCxRQUFBQyxJQUFBLGtCQUtBMEIsRUFBQW1HLFdBQUEsV0FDQTlILFFBQUFDLElBQUEsa0JBQ0EwQixFQUFBMEYsVUFDQVUsVUFBQSxHQUNBQyxTQUFBLEdBQ0FDLFVBQUEsR0FDQUMsT0FBQSxHQUNBQyxNQUFBLElBRUF4RyxFQUFBOEYsY0FBQSxHQU1BOUYsRUFBQTJDLFlBQUEsV0FDQSxHQUFBQyxHQUFBNUMsRUFBQWEsV0FDQStCLEdBQUFyRyxLQUFBK0QsRUFBQXVDLEtBQUFELEVBQUFyRyxNQUNBeUQsRUFBQXFGLE9BQUF6RSxVQUFBa0MsS0FBQTlDLEVBQUFhLGFBQ0FiLEVBQUFhLGVBQ0F4QyxRQUFBQyxJQUFBLGlCQUFBc0UsRUFBQTVDLEVBQUFxRixPQUFBekUsZUN6TEE5RCxJQUFBTyxXQUFBLGFBQUEsU0FBQSxRQUFBLGNBQUEsWUFBQSxhQUFBLFNBQUEyQyxFQUFBSSxFQUFBekMsRUFBQUQsRUFBQXdGLEdBQ0FsRCxFQUFBeUcsT0FBQSxXQUNBckcsRUFBQXNHLEtBQUEsU0FBQTFHLEVBQUEyRyxNQUNBOUUsS0FBQSxTQUFBNUQsR0FDQU4sRUFBQXlCLFVBQUFuQixFQUFBc0QsTUFDQTJCLEVBQUEwRCxLQUFBakosRUFBQW9DLFVBQ0FyQyxFQUFBUyxLQUFBLGlCQ0xBckIsSUFBQU8sV0FBQSxrQkFBQSxTQUFBLFFBQUEsZ0JBQUEsU0FBQTJDLEVBQUFJLEVBQUFELEdBQ0FILEVBQUE2RyxhQUVBN0csRUFBQThHLFVBQUEsV0FFQTNHLEVBQUF5RCxhQUFBNUQsRUFBQTZHLFVBQUF0RixNQUNBbEQsUUFBQUMsSUFBQSx5QkFBQTBCLEVBQUE2RyxXQUVBN0csRUFBQTZHLGlCQ1RBL0osSUFBQVUsUUFBQSxpQkFBQSxRQUFBLFNBQUE0QyxHQUNBLEdBQUEyRyxNQUNBNUIsS0FDQTNFLEtBQ0E0RSxLQUVBeEIsRUFBQSxTQUFBZ0IsR0FDQSxNQUFBeEUsSUFDQXVCLE9BQUEsTUFDQUMsSUFBQSxZQUNBckMsUUFBQXdGLE9BQUFILEtBQ0EvQyxLQUFBLFNBQUE1RCxHQUNBOEksRUFBQTlJLEVBQUFzRCxLQUNBeUYsRUFBQUQsR0FDQUUsRUFBQUYsR0FDQUcsRUFBQUgsTUFHQUMsRUFBQSxTQUFBRyxHQUNBLEdBQUFDLEdBQUEsU0FBQUQsR0FDQTNHLEVBQUEwRixPQUFBLEVBQUExRixFQUFBa0MsUUFDQXlFLEVBQUFsRyxRQUFBLFNBQUF1RCxHQUNBLFdBQUFBLEVBQUFyQixNQUNBM0MsRUFBQXNDLEtBQUEwQixLQU1BLE9BRkE0QyxHQUFBRCxHQUNBOUksUUFBQUMsSUFBQSxzQkFBQWtDLEdBQ0FBLEdBR0EwRyxFQUFBLFNBQUFDLEdBQ0EsR0FBQUUsR0FBQSxTQUFBRixHQUNBaEMsRUFBQWUsT0FBQSxFQUFBZixFQUFBekMsUUFDQXlFLEVBQUFsRyxRQUFBLFNBQUF1RCxHQUNBLFNBQUFBLEVBQUFyQixNQUNBZ0MsRUFBQXJDLEtBQUEwQixLQUtBLE9BRkE2QyxHQUFBRixHQUNBOUksUUFBQUMsSUFBQSx5QkFBQTZHLEdBQ0FBLEdBR0E4QixFQUFBLFNBQUFFLEdBQ0EsR0FBQUcsR0FBQSxTQUFBSCxHQUNBL0IsRUFBQWMsT0FBQSxFQUFBZCxFQUFBMUMsUUFDQXlFLEVBQUFsRyxRQUFBLFNBQUF1RCxHQUNBLFNBQUFBLEVBQUFyQixNQUNBaUMsRUFBQXRDLEtBQUEwQixLQUtBLE9BRkE4QyxHQUFBSCxHQUNBOUksUUFBQUMsSUFBQSx1QkFBQThHLEdBQ0FBLEdBSUFtQyxHQUNBTixRQUFBQSxFQUNBQyxVQUFBQSxFQUNBRixhQUFBQSxFQUNBcEQsYUFBQUEsRUFDQW1ELFFBQUFBLEVBQ0F2RyxVQUFBQSxFQUNBMkUsT0FBQUEsRUFDQUMsS0FBQUEsRUFFQSxPQUFBbUMsTUNsRUF6SyxJQUFBTyxXQUFBLHFCQUFBLFNBQUEsaUJBQUEsU0FBQTJDLEVBQUF3SCxHQUVBeEgsRUFBQXlILEdBQUEsV0FDQUQsRUFBQUUsTUFBQTFILEVBQUFxQyxTQUFBc0YsT0FHQTNILEVBQUE0SCxPQUFBLFdBQ0FKLEVBQUFLLFFBQUEsY0NYQS9LLElBQUFPLFdBQUEsV0FBQSxjQUFBLFNBQUEsYUFBQSxZQUFBLFNBQUFNLEVBQUFxQyxFQUFBa0QsRUFBQXhGLEdBQ0F3RixFQUFBMEQsS0FBQWpKLEVBQUFvQyxVQUVBbUQsRUFBQTBELE1BQUExRCxFQUFBMEQsS0FBQWtCLFVBQ0FwSyxFQUFBUyxLQUFBLFNBR0E2QixFQUFBRixPQUFBLFdBQ0FuQyxFQUFBbUMsU0FDQW9ELEVBQUEwRCxLQUFBakosRUFBQW9DLFVBQ0FyQyxFQUFBUyxLQUFBLFNDVEFyQixJQUFBTyxXQUFBLDRCQUFBLHFCQUFBLFNBQUEsYUFBQSxTQUFBMkYsRUFBQWhELEVBQUFrRCxHQUdBbEQsRUFBQStILEtBQUEsV0FDQTFKLFFBQUFDLElBQUEsUUFDQTRFLEVBQUE2RSxNQUFBLEdBR0EvSCxFQUFBZ0ksWUFFQWhJLEVBQUFpSSxXQUFBLFdBQ0E1SixRQUFBQyxJQUFBLGdCQUFBMEIsRUFBQWdJLFNBQUFFLE9BRUFsRixFQUFBbUYsU0FBQW5JLEVBQUFnSSxTQUFBRSxPQUVBN0osUUFBQUMsSUFBQSxTQUFBMEUsRUFBQW9GLFNBRUFwSSxFQUFBZ0ksZ0JDakJBbEwsSUFBQTBCLFFBQUEsc0JBQUEseUJBQUEsUUFDQSxTQUFBdUUsRUFBQTNDLEdBQ0EsR0FBQWdJLEdBQUEsR0FDQUMsSUFFQTNKLE1BQUF5SixTQUFBLFNBQUFHLEdBRUEsTUFEQWpLLFNBQUFDLElBQUEsd0NBQUFnSyxHQUNBbEksRUFBQXNHLEtBQUEsbUJBQUE0QixLQUFBQSxJQUFBekcsS0FBQSxTQUFBNUQsR0FDQUksUUFBQUMsSUFBQUwsRUFBQXNELE1BQ0E2RyxFQUFBbkssRUFBQXNELEtBQ0FsRCxRQUFBQyxJQUFBLE9BQUE4SixJQUNBLFNBQUE3RyxHQUNBbEQsUUFBQUMsSUFBQWlELE1BR0E3QyxLQUFBd0YsUUFBQSxTQUFBcUUsR0FDQTdKLEtBQUE4SixZQUNBSCxnQkFBQUEsRUFDQUQsUUFBQUEsR0FFQS9KLFFBQUFDLElBQUEsa0JBQ0FELFFBQUFDLElBQUEsb0JBQUFJLEtBQUEySixnQkFBQSxpQkFBQTNKLE1BQUEySixpQkFDQUksRUFBQUYsR0FDQW5JLEVBQUFzRyxLQUFBLHVCQUFBaEksS0FBQThKLFlBQUEzRyxLQUFBLFNBQUFOLEVBQUFyRCxFQUFBTCxFQUFBWixHQUlBLE1BSEFvQixTQUFBQyxJQUFBLFVBQ0FELFFBQUFDLElBQUFpRCxHQUNBbEQsUUFBQUMsSUFBQSxvQkFBQUksS0FBQTJKLGdCQUFBLGlCQUFBM0osTUFBQTJKLGtCQUNBLElBSkFqSSxTQUtBLFdBQ0EsT0FBQSxJQUlBLElBQUFxSSxHQUFBLFNBQUFDLEdBQ0FySyxRQUFBQyxJQUFBLHlCQUNBb0ssRUFBQXpILFFBQ0EsU0FBQTBILEdBRUFqSyxLQUFBa0ssZUFFQUMsaUJBQ0FGLEVBQUFHLE9BRUFDLFdBQUFKLEVBQUF2QyxVQUNBNEMsVUFBQUwsRUFBQXRDLFNBQ0E0QyxhQUFBTixFQUFBTyxRQUNBQyxZQUNBQyxLQUFBVCxFQUFBUyxRQUlBL0ssUUFBQUMsSUFBQUksS0FBQWtLLGVBQ0FQLEVBQUF2RixLQUFBcEUsS0FBQWtLLHFCQ3JEQTlMLElBQUFPLFdBQUEscUJBQUEscUJBQUEsU0FBQSxRQUFBLFNBQUEyRixFQUFBaEQsRUFBQUksR0FJQUosRUFBQXFKLFlBRUFySixFQUFBaUUsYUFBQSxXQUNBNUYsUUFBQUMsSUFBQSxnQkFBQTBELE1BQUFxSCxTQUFBbkIsT0FFQWxGLEVBQUFrQixVQVlBbEUsRUFBQXFKLGdCQ25CQXZNLElBQUFPLFdBQUEsZ0JBQUEsU0FBQSxRQUFBLFlBQUEsU0FBQTJDLEVBQUFJLEVBQUExQyxHQUNBc0MsRUFBQXlHLE9BQUEsV0FDQXBJLFFBQUFDLElBQUEsZ0JBQ0FELFFBQUFDLElBQUEsNkJBQUEwQixFQUFBMkcsTUFDQXZHLEVBQUFzRyxLQUFBLFlBQUExRyxFQUFBMkcsTUFDQTlFLEtBQUEsU0FBQTVELEdBQ0FJLFFBQUFDLElBQUFMLEdBQ0FQLEVBQUFTLEtBQUEsZ0JDVEFyQixJQUFBTyxXQUFBLGFBQUEsU0FBQSxRQUFBLFlBQUEsU0FBQTJDLEVBQUFJLEVBQUExQyxHQUNBc0MsRUFBQXlHLE9BQUEsV0FDQXBJLFFBQUFDLElBQUEsaUJBQUEwQixFQUFBMkcsTUFDQXZHLEVBQUFrSixJQUFBLFNBQUF0SixFQUFBMkcsTUFDQTlFLEtBQUEsU0FBQTVELEdBQ0FJLFFBQUFDLElBQUFMLEdBQ0FQLEVBQUFTLEtBQUEsZ0JDTkFyQixJQUFBMEIsUUFBQSxnQkFBQSxXQUVBLEdBQUErQixHQUFBLFNBQUE0QyxFQUFBekIsR0FHQSxHQUFBNkgsR0FDQUMsRUFBQSxFQUFBckksRUFBQSxJQUFBTyxJQUFBLENBRUEsUUFEQXJELFFBQUFDLElBQUEsYUFBQWtMLEVBQUFyRyxFQUFBekIsR0FDQXlCLEdBQ0EsSUFBQSxPQUNBLElBQUEsT0FDQSxJQUFBLFFBRUFvRyxFQUFBLHVCQUNBLE1BQ0EsS0FBQSxXQUNBQSxFQUFBLG1DQUNBLE1BQ0EsS0FBQSxVQUNBQSxFQUFBLHdDQUNBLE1BQ0EsS0FBQSxNQUNBQSxFQUFBLFlBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEsNkRBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEsa0RBQ0EsTUFDQSxLQUFBLFFBQ0FBLEVBQUEsMERBQ0EsTUFDQSxLQUFBLE1BQ0FBLEVBQUEsb0JBQ0EsTUFDQSxLQUFBLE9BQ0FBLEVBQUEsNERBQ0EsTUFDQSxLQUFBLFlBQ0FBLEVBQUEsdUVBQ0EsTUFDQSxLQUFBLFNBQ0FBLEVBQUEsMkJBQ0EsTUFDQSxTQUVBLE1BREFsTCxTQUFBQyxJQUFBLHlCQUNBLEVBS0EsTUFBQWtMLEdBQUFsSSxLQUFBLGFBQUFrSSxFQUFBOUUsT0FFQTZFLEVBQUFFLEtBQUFELEVBQUE5RSxNQUFBZ0YsU0FBQSxHQUFBRixFQUFBOUUsTUFBQWdGLE9BQUFoSCxRQUFBOEcsRUFBQWxJLEtBQUEsYUFFQWtJLEVBQUFHLFNBQUEsV0FBQXJJLEtBQUEsY0FBQWtJLEVBQUFqSSxLQUFBLFlBQUFtRCxJQUFBLElBQ0FyRyxRQUFBQyxJQUFBNkUsRUFBQSxlQUFBb0csSUFDQSxJQUdBQyxFQUFBbkksWUFBQSxXQUFBQyxLQUFBLGNBQUFrSSxFQUFBakksS0FBQSxnQkFDQWxELFFBQUFDLElBQUE2RSxFQUFBLGVBQUFvRyxJQUNBLEdBWEEsUUFnQkEvRyxFQUFBLFNBQUFvSCxHQUNBLEdBQUFDLElBQUEsQ0FTQSxPQVJBRCxHQUFBM0ksUUFBQSxTQUFBQyxFQUFBNEksRUFBQUMsR0FDQTVJLEVBQUEsSUFBQUQsRUFBQSxpQkFBQUUsS0FBQSxXQUNBLEdBQUFiLEVBQUFZLEVBQUF6QyxNQUFBNkMsS0FBQSxRQUFBSixFQUFBekMsTUFBQTRDLEtBQUEsU0FDQWpELFFBQUFDLElBQUE2QyxFQUFBekMsTUFBQTRDLEtBQUEsTUFBQSxvQkFBQUgsRUFBQXpDLE1BQUE2QyxLQUFBLFFBQUEsa0JBQUFKLEVBQUF6QyxNQUFBZ0csT0FDQW1GLEdBQUEsT0FJQUEsRUFHQSxRQUNBdEosY0FBQUEsRUFDQWlDLGFBQUFBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2xlbycsIFsnbmdSb3V0ZScsICduZ0FuaW1hdGUnLCAndWkuYm9vdHN0cmFwJywgJ2NoZWNrbGlzdC1tb2RlbCcsICd0b2FzdHInLCAnYW5ndWxhci1tb21lbnRqcyddKTtcblxudmFyIHByZXR0eURhdGUgPSBcIk1NL0REL1lZZ1lZXCI7XG52YXIgZnVsbERhdGUgPSBcIk1NL0REL1lZWVkgaDptbTpzcyBhXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGVzIChkYXRlKSB7XG5cdHJldHVybiB7XG5cdFx0ZnVsbDogbW9tZW50KGRhdGUpLmZvcm1hdChmdWxsRGF0ZSksXG5cdFx0cHJldHR5OiBtb21lbnQoZGF0ZSkuZm9ybWF0KHByZXR0eURhdGUpXG5cdH07XG59XG5cbmFwcC5jb25maWcoWyckcm91dGVQcm92aWRlcicsXG4gICAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIuXG4gICAgICAgICAgICB3aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2xvZ2luLmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9zZWFyY2gnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL3NlYXJjaC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2NvbnRhY3RMaXN0Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9jb250YWN0TGlzdC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvYWRkZmFtaWx5Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9hZGRmYW1pbHkuaHRtbCcsXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdlZGl0RmFtaWx5Q3RybCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2FkZGNvcnAnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2FkZGNvcnAuaHRtbCcsXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdlZGl0Q29ycEN0cmwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9jb250YWN0bGlzdCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvY29udGFjdGxpc3QuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgb3RoZXJ3aXNlKHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnL3NlYXJjaCdcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKTtcblxuXG5cblxuIiwiYXBwLmZhY3RvcnkoJ2F1dGhJbnRlcmNlcHRvcicsIFsnJHEnLCAnJGxvY2F0aW9uJywgJ2F1dGhTZXJ2aWNlJywgZnVuY3Rpb24gKCRxLCAkbG9jYXRpb24sIGF1dGhTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgICAgIGlmIChhdXRoU2VydmljZS5pc0F1dGhlZCgpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIGF1dGhTZXJ2aWNlLmdldFRva2VuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25zZTogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xuICAgICAgICB9LCByZXNwb25zZUVycm9yOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH07XG59XSkiLCJhcHAuc2VydmljZSgnYXV0aFNlcnZpY2UnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuXG4gICAgdGhpcy5wYXJzZUp3dCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKCR3aW5kb3cuYXRvYihiYXNlNjQpKTtcbiAgICAgICAgfSBlbHNlIHJldHVybiB7fTtcbiAgICB9O1xuXG4gICAgdGhpcy5zYXZlVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4gPSB0b2tlbjtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnU2F2ZWQgdG9rZW46Jywkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbik7XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0VG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbjtcbiAgICB9O1xuXG4gICAgdGhpcy5pc0F1dGhlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5nZXRUb2tlbigpO1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcnNlSnd0KHRva2VuKTtcbiAgICAgICAgICAgIHZhciBub3RFeHBpcmVkID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApIDw9IHBhcmFtcy5leHA7XG4gICAgICAgICAgICBpZiAoIW5vdEV4cGlyZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ291dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vdEV4cGlyZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbjtcbiAgICB9O1xuXG4gICAgLy8gZXhwb3NlIHVzZXIgYXMgYW4gb2JqZWN0XG4gICAgdGhpcy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUp3dCh0aGlzLmdldFRva2VuKCkpXG4gICAgfTtcbn1dKTsiLCIvL2VkaXQgY29ycG9yYXRpb24gbW9kYWwgdGVtcGxhdGVcbmFwcC5jb250cm9sbGVyKCdlZGl0Q29ycEN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWwnLCAnJGxvZycsICdSZXN1bHRTZXJ2aWNlJywgJyRodHRwJywgJ3ZhbGlkU2VydmljZScsICdkYXRlU2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbCwgJGxvZywgUmVzdWx0U2VydmljZSwgJGh0dHAsIHZhbGlkU2VydmljZSwgZGF0ZVNlcnZpY2UpIHtcblxuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcblx0JHNjb3BlLnZhbGlkYXRlSW5wdXQgPSB2YWxpZFNlcnZpY2UudmFsaWRhdGVJbnB1dDtcblx0Ly9zZW5kcyB0aGUgY29tcGFuaWVzIGFmdGVyIHRoZSByZXN1bHRzIGhhdmUgYmVlbiBvcmdhbml6ZWRcblx0JHNjb3BlLmNvbXBhbmllcyA9IFJlc3VsdFNlcnZpY2UuY29tcGFuaWVzO1xuXHQkc2NvcGUuY29ycCA9IHtcblx0XHRpbmZvOiB7fSxcblx0XHRjb250YWN0OiB7fSxcblx0XHRkb25hdGlvbnM6IFtdXG5cdH07XG5cdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuXG5cdCRzY29wZS5jbGVhckNvcnAgPSBmdW5jdGlvbiAoZm9ybXNBcnJheSkge1xuXHRcdCRzY29wZS5jb3JwID0ge1xuXHRcdFx0aW5mbzp7fSxcblx0XHRcdGNvbnRhY3Q6e30sXG5cdFx0XHRkb25hdGlvbnM6W11cblx0XHR9O1xuXHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHRcdGZvcm1zQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuXHRcdFx0JCgnIycrIHYgKycgLmpzLXZhbGlkYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICQodGhpcykuZGF0YSgncGxhY2Vob2xkZXInKSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcblxuXHQkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzaXplLCBpZCkge1xuXHRcdGNvbnNvbGUubG9nKCdjb3JwIGNhbGwnLCBpZCk7XG5cdFx0cmV0dXJuICRodHRwKHtcblx0XHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0XHR1cmw6ICcuLi9jb3Jwb3JhdGlvbicsXG5cdFx0XHRwYXJhbXM6IHtpZDogaWR9XG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuXHRcdFx0JHNjb3BlLmNvcnAgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG5cdFx0XHRcdGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvZWRpdGNvcnAuaHRtbCcsXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXG5cdFx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRcdHNjb3BlOiAkc2NvcGUsXG5cdFx0XHRcdHJlc29sdmU6IHtcblx0XHRcdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5jb3JwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW07XG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcblxuXHQkc2NvcGUudG9nZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9ICEkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQ7XG5cdH07XG5cblx0Ly8gc2F2ZSBjb3JwXG5cdCRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiU2F2ZSBzdWJtaXR0ZWRcIiwgJHNjb3BlLmNvcnApO1xuXHRcdC8vYWxlcnQoXCJTdWJtaXR0ZWRcIik7XG5cdFx0Ly8gaWYgaGFzIGlkLCB0aGVuIHB1dFxuXHRcdGlmKCEkc2NvcGUuY29ycC5pZCkge1xuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJBZGRDb3JwSW5mb0Zvcm1cIiwgXCJBZGRDb3JwQ29udGFjdEZvcm1cIl0pKSB7XG5cdFx0XHRcdCRodHRwKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0XHR1cmw6ICcvY29ycG9yYXRpb24nLFxuXHRcdFx0XHRcdGRhdGE6IHtjb3JwOiAkc2NvcGUuY29ycH1cblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQb3N0ZWQgY29ycCwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaWQgPSByZXMuZGF0YS5pZDtcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pbmZvID0gKHJlcy5kYXRhLmluZm8pID8gcmVzLmRhdGEuaW5mbyA6IHt9O1xuXHRcdFx0XHRcdCRzY29wZS5jb250YWN0ID0gKHJlcy5kYXRhLmNvbnRhY3QpID8gcmVzLmRhdGEuY29udGFjdCA6IHt9O1xuXHRcdFx0XHRcdC8vIGluaXRpYWxpemUgZG9uYXRpb25zIGlmIHRoZXJlIGFyZSBhbnlcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmNvcnAuZG9uYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmNvcnAuZG9uYXRpb25zID0gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCRzY29wZS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IHt9O1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJBZGQgY29ycCBpbnB1dCB0ZXN0cyBmYWlsZWRcIik7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJFZGl0Q29ycEluZm9Gb3JtXCIsIFwiRWRpdENvcnBDb250YWN0Rm9ybVwiXSkpIHtcblx0XHRcdFx0Ly8gaW5zZXJ0IGNvcnAgLSBoYXMgbm8gaWRcblx0XHRcdFx0Y29uc29sZS5sb2coXCJ1cGRhdGUgY29ycFwiLCAkc2NvcGUuY29ycCk7XG5cdFx0XHRcdCRodHRwKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxuXHRcdFx0XHRcdHVybDogJy9jb3Jwb3JhdGlvbicsXG5cdFx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlB1dCBjb3JwLCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcblxuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaW5mbyA9IChyZXMuZGF0YS5pbmZvKSA/IHJlcy5kYXRhLmluZm8gOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuY29udGFjdCA9IChyZXMuZGF0YS5jb250YWN0KSA/IHJlcy5kYXRhLmNvbnRhY3QgOiB7fTtcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucyA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiRWRpdCBjb3JwIGlucHV0IHRlc3RzIGZhaWxlZFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gYWRkcyBkb25hdGlvbiB0byBmYW1pbHkgb2JqZWN0XG5cdCRzY29wZS5hZGREb25hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGVtcCA9ICRzY29wZS5uZXdEb25hdGlvbjtcblx0XHR0ZW1wLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHRlbXAuZGF0ZSk7XG5cdFx0JHNjb3BlLmNvcnAuZG9uYXRpb25zLnB1c2goJHNjb3BlLm5ld0RvbmF0aW9uKTtcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0XHRjb25zb2xlLmxvZyhcImFkZGVkIGRvbmF0aW9uXCIsIHRlbXAsICRzY29wZS5jb3JwLmRvbmF0aW9ucyk7XG5cdH07XG5cbn1dKTsiLCJhcHAuY29udHJvbGxlcignY3JlYXRlTGlzdFNlYXJjaCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnbmV3Q29udGFjdExpc3REYXRhJywgJ3RvYXN0cicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsbmV3Q29udGFjdExpc3REYXRhLCB0b2FzdHIsICRyb290U2NvcGUpIHtcbiAgICAkc2NvcGUudHlwZSA9e307XG4gICAgJHNjb3BlLmFnZT17fTtcbiAgICAkc2NvcGUuemlwPXt9O1xuXHQvLyBpbmNsdWRlIGxpc3QgbmVlZHMgdG8gYmUgd2l0aGluIGFuIG9iamVjdCBkdWUgdG8gdGhlIGNoZWNrYm94ZXMgYmVpbmcgaW4gYSB0YWJsZVxuXHQkc2NvcGUuZW1haWxzID0ge307XG4gICAgJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyA9IFtdO1xuXHQkc2NvcGUuaW5jbHVkZWRFbWFpbHMgPSBbXTtcblx0JHNjb3BlLnRvdGFsRGlzcGxheWVkID0gNTA7XG5cdCRzY29wZS50b3RhbFJlc3VsdHMgPSAwO1xuICAgIC8vJHJvb3RTY29wZS5oaWRlID0gdHJ1ZTtcblxuXG5cbiAgICAkc2NvcGUuZW1haWxMaXN0ID0gWyBdO1xuICAgICRzY29wZS5zZWFyY2hMaXN0QnRuID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS5lbWFpbExpc3QgPSBbXTtcblxuXG4gICAgICAgIC8vVEhJUyBXT1JLUyAgLS0gd2lsbCBzZWFyY2ggYnkgemlwXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnemlwQ2snKSB7XG5cbiAgICAgICAgICAgIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCd6aXAnLCAkc2NvcGUuemlwLmRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG5cdFx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRzY29wZS5lbWFpbExpc3QpO1xuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xuXHRcdFx0XHR9KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy9USElTIFdPUktTIC0gd2lsbCBzZWFyY2ggYnkgYWdlXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnYWdlQ2snKSB7XG4gICAgICAgICAgICB2YXIgYWdlID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2FnZScsICRzY29wZS5hZ2UuZGF0YSk7XG4gICAgICAgICAgICBhZ2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XG5cdFx0XHR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vVEhJUyBXT1JLUyAtLWdldCBhbGwgZmFtaWxpZXMgaWYgZmFtIGlzIHRydWVcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdmYW0nKSB7XG4gICAgICAgICAgICB2YXIgZmFtID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2ZhbWlseScsICcnKTtcbiAgICAgICAgICAgIGZhbS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcblx0XHRcdH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgYWxsIGNvcnAgaWYgY29ycCBpcyB0cnVlXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnY29ycCcpIHtcbiAgICAgICAgICAgIHZhciBjb21wID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2NvbXBhbnknLCAnJyk7XG4gICAgICAgICAgICBjb21wLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcblx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xuXHRcdFx0fSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2VtcHR5IHRoZSBzZWFyY2ggYm94XG4gICAgICAgJHNjb3BlLnR5cGU9e307XG4gICAgICAgICRzY29wZS5hZ2U9e307XG4gICAgICAgICRzY29wZS56aXA9e307XG5cbiAgICB9O1xuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvL2FsZXJ0KCd3b3JraW5nJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMpO1xuICAgICAgICBpZihuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzKSkge1xuXHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ1N1Y2Nlc3NmdWxseSBkZXBsb3llZCBjb250YWN0IGxpc3QuJyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gZGVwbG95IGNvbnRhY3QgbGlzdC4nKTtcblx0XHR9XG4gIH07XG5cblx0JHNjb3BlLmxvYWRNb3JlID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS50b3RhbERpc3BsYXllZCArPSA1MDtcblx0fTtcblxuXHQkc2NvcGUuc2hvd0FsbCA9IGZ1bmN0aW9uICgpIHtcblx0XHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgPSAkc2NvcGUudG90YWxSZXN1bHRzO1xuXHR9O1xuXG5cdCRzY29wZS5jaGVja0FsbCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyICRidXR0b24gPSBhbmd1bGFyLmVsZW1lbnQoZXZlbnQudGFyZ2V0KTtcblx0XHRpZigkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzLmxlbmd0aCA9PSAkc2NvcGUudG90YWxSZXN1bHRzKSB7XG5cdFx0XHQkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzID0gW107XG5cdFx0XHQkYnV0dG9uLnZhbChcIkNoZWNrIEFsbFwiKTtcblx0XHR9ZWxzZXtcblx0XHRcdCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmVtYWlsTGlzdCk7XG5cdFx0XHQkYnV0dG9uLnZhbChcIlVuY2hlY2sgQWxsXCIpO1xuXHRcdH1cblx0fTtcbn1dKTtcblxuXG4iLCJhcHAuZmFjdG9yeSgnQ29udGFjdExpc3REYXRhU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCBmdW5jdGlvbiAoJGh0dHAsICRxKSB7XG5cbiAgICBmdW5jdGlvbiBtYWtlRGF0YUNhbGwodHlwZSwgcGFzc2VkRGF0YSkge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiB0aGUgbWFrZSBkYXRhIGNhbGwnLCB0eXBlLCBwYXNzZWREYXRhKTtcbiAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIHVybDogJy4uL2NyZWF0ZU1haWxMaXN0JyxcbiAgICAgICAgICAgIHBhcmFtczoge3R5cGU6IHR5cGUsIHNlYXJjaDogcGFzc2VkRGF0YX1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBtYWtlRGF0YUNhbGw6IG1ha2VEYXRhQ2FsbFxuICAgIH07XG5cblxufV0pOyIsImFwcC5zZXJ2aWNlKCdkYXRlU2VydmljZScsIFsnTW9tZW50SlMnLCBmdW5jdGlvbiAobW9tZW50KSB7XG5cdHZhciBkYkZvcm1hdCA9IFwiWVlZWS1NTS1ERFwiO1xuXG5cdHZhciB0b0RiRm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUpIHtcblx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdChkYkZvcm1hdCk7XG5cdH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0b0RCOiB0b0RiRm9ybWF0XG4gICAgfTtcbn1dKTsiLCIvL2VkaXQgZmFtaWx5IG1vZGFsIHRlbXBsYXRlXG5hcHAuY29udHJvbGxlcignZWRpdEZhbWlseUN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWwnLCAnJGxvZycsICdSZXN1bHRTZXJ2aWNlJywgJyRodHRwJywgJ3ZhbGlkU2VydmljZScsICd0b2FzdHInLCdkYXRlU2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbCwgJGxvZywgUmVzdWx0U2VydmljZSwgJGh0dHAsIHZhbGlkU2VydmljZSwgdG9hc3RyLCBkYXRlU2VydmljZSkge1xuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcblx0JHNjb3BlLnZhbGlkYXRlSW5wdXQgPSB2YWxpZFNlcnZpY2UudmFsaWRhdGVJbnB1dDtcblx0Ly9zZW5kcyB0aGUgYWR1bHRzIGFuZCBraWRzIGFmdGVyIHRoZSByZXN1bHRzIGhhdmUgYmVlbiBvcmdhbml6ZWRcblx0JHNjb3BlLmFkdWx0cyA9IFJlc3VsdFNlcnZpY2UuYWR1bHRzO1xuXHQkc2NvcGUua2lkcyA9IFJlc3VsdFNlcnZpY2Uua2lkcztcblx0JHNjb3BlLmZhbWlseSA9IHtcblx0XHRhZHVsdE9uZToge30sXG5cdFx0YWR1bHRUd286IHt9LFxuXHRcdGVtZXJnZW5jeToge30sXG5cdFx0Y2hpbGRyZW46IFtdLFxuXHRcdGRvbmF0aW9uczogW11cblx0fTtcblx0JHNjb3BlLm5ld0NoaWxkID0ge307XG5cdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXG5cdCRzY29wZS5jbGVhckZhbWlseSA9IGZ1bmN0aW9uIChmb3Jtc0FycmF5KSB7XG5cdFx0JHNjb3BlLmZhbWlseSA9IHtcblx0XHRcdGFkdWx0T25lOiB7fSxcblx0XHRcdGFkdWx0VHdvOiB7fSxcblx0XHRcdGVtZXJnZW5jeToge30sXG5cdFx0XHRjaGlsZHJlbjogW10sXG5cdFx0XHRkb25hdGlvbnM6IFtdXG5cdFx0fTtcblx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcblx0XHRmb3Jtc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHtcblx0XHRcdCQoJyMnKyB2ICsnIC5qcy12YWxpZGF0ZScpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkKHRoaXMpLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG5cblxuXG5cdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9IHRydWU7XG5cdCRzY29wZS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIGlkKSB7XG5cdFx0Y29uc29sZS5sb2coJ2ZhbWlseSBjYWxsJywgaWQpO1xuXHRcdHJldHVybiAkaHR0cCh7XG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0dXJsOiAnLi4vZmFtaWx5Jyxcblx0XHRcdHBhcmFtczoge2lkOiBpZH1cblx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG5cdFx0XHQkc2NvcGUuZmFtaWx5ID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xuXHRcdFx0XHRhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwcml2YXRlL2VkaXRmYW1pbHkuaHRtbCcsXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXG5cdFx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRcdHNjb3BlOiAkc2NvcGUsXG5cdFx0XHRcdHJlc29sdmU6IHtcblx0XHRcdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5mYW1pbHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW07XG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcblxuXHQkc2NvcGUudG9nZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9ICEkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQ7XG5cdH07XG5cblx0Ly8gc2F2ZSBmYW1pbHlcblx0JHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJTYXZlIHN1Ym1pdHRlZFwiLCAkc2NvcGUuZmFtaWx5KTtcblx0XHR0b2FzdHIuc3VjY2VzcygnSW5mb3JtYXRpb24gc2F2ZWQhJyk7XG5cdFx0YWxlcnQoXCJTdWJtaXR0ZWRcIik7XG5cdFx0Ly8gaWYgaGFzIGlkLCB0aGVuIHBvc3RcblxuXHRcdGlmKCEkc2NvcGUuZmFtaWx5LmlkKSB7XG5cblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiQWRkRmFtSW5mb0Zvcm1cIiwgXCJBZGRGYW1FbWVyRm9ybVwiXSkpIHtcblx0XHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxuXHRcdFx0XHRcdGRhdGE6IHtmYW1pbHk6ICRzY29wZS5mYW1pbHl9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUG9zdGVkIGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5lbWVyZ2VuY3kgPSAocmVzLmRhdGEuZW1lcmdlbmN5KSA/IHJlcy5kYXRhLmVtZXJnZW5jeSA6IHt9O1xuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJBZGQgZmFtaWx5IGZhaWxlZCBpbnB1dCB0ZXN0c1wiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih2YWxpZFNlcnZpY2UudmFsaWRhdGVGb3JtKFtcIkVkaXRGYW1JbmZvRm9ybVwiLCBcIkVkaXRGYW1FbWVyRm9ybVwiXSkpIHtcblx0XHRcdFx0Ly8gdXBkYXRlIGZhbWlseSAtIGhhcyBubyBpZFxuXHRcdFx0XHRjb25zb2xlLmxvZyhcInVwZGF0ZSBmYW1pbHlcIiwgJHNjb3BlLmZhbWlseSk7XG5cdFx0XHRcdCRodHRwKHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxuXHRcdFx0XHRcdGRhdGE6IHtmYW1pbHk6ICRzY29wZS5mYW1pbHl9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5pZCA9IHJlcy5kYXRhLmlkO1xuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5lbWVyZ2VuY3kgPSAocmVzLmRhdGEuZW1lcmdlbmN5KSA/IHJlcy5kYXRhLmVtZXJnZW5jeSA6IHt9O1xuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJFZGl0IGZhbWlseSBmYWlsZWQgaW5wdXQgdGVzdHNcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIGZvciBhcHBlbmRpbmcgY2hpbGRyZW4gdG8gbW9kZWwgYmVmb3JlIHNhdmluZyBuZXcgZmFtaWx5XG5cdCRzY29wZS5hZGRDaGlsZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmxvZyhcImNoaWxkIGFkZGVkXCIsICRzY29wZS5uZXdDaGlsZCwgJHNjb3BlLmZhbWlseS5jaGlsZHJlbik7XG5cdFx0Ly8gaWYgdHJ1ZSwgdGhlbiB1cGRhdGUgdGhhdCBpbmRleFxuXHRcdGlmKCRzY29wZS5lZGl0aW5nQ2hpbGQpIHtcblx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW5bJHNjb3BlLmVkaXRpbmdDaGlsZF0gPSAkc2NvcGUubmV3Q2hpbGQ7XG5cdFx0XHQkc2NvcGUuZWRpdGluZ0NoaWxkID0gZmFsc2U7XG5cdFx0XHR0b2FzdHIuc3VjY2VzcygnQ2hpbGQgdXBkYXRlZCEnKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHQvLyBlbHNlIHB1c2ggdG8gYXJyYXlcblx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ucHVzaCgkc2NvcGUubmV3Q2hpbGQpO1xuXHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NoaWxkIGFkZGVkIScpO1xuXHRcdH1cblx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcblx0fTtcblxuXHQvLyBlZGl0IGNoaWxkIG9uIHRoZSBhZGQgY2hpbGRyZW4gdGFiIG9mIGFkZCBmYW1pbHlcblx0JHNjb3BlLmVkaXRDaGlsZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuXHRcdC8vIHNhdmUgaW5kZXggb2YgY2hpbGQgZWRpdGluZ1xuXHRcdCRzY29wZS5lZGl0aW5nQ2hpbGQgPSBpbmRleDtcblx0XHQkc2NvcGUubmV3Q2hpbGQgPSAkc2NvcGUuZmFtaWx5LmNoaWxkcmVuW2luZGV4XTtcblx0fTtcblxuXHQkc2NvcGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRjb25zb2xlLmxvZyhcImluIHJlbW92ZSBjaGlsZCBpbmRleFwiLCBpbmRleCwgXCIgZWRpdCBcIiwgJHNjb3BlLmVkaXRpbmdDaGlsZCk7XG5cdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdGlmKGluZGV4ID09ICRzY29wZS5lZGl0aW5nQ2hpbGQpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiZWRpdCBtYXRjaFwiKTtcblx0XHRcdCRzY29wZS5jbGVhckNoaWxkKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2coXCJubyBlZGl0IG1hdGNoXCIpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBjbGVhcnMgdGV4dCBib3hlcyBpbiBhZGQgZmFtaWx5LT5jaGlsZHJlbiB0YWJcblx0JHNjb3BlLmNsZWFyQ2hpbGQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc29sZS5sb2coXCJpbiBjbGVhciBjaGlsZFwiKTtcblx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7XG5cdFx0XHRmaXJzdE5hbWU6ICcnLFxuXHRcdFx0bGFzdE5hbWU6ICcnLFxuXHRcdFx0YmlydGhkYXRlOiAnJyxcblx0XHRcdHNjaG9vbDogJycsXG5cdFx0XHRub3RlczogJydcblx0XHR9O1xuXHRcdCRzY29wZS5lZGl0aW5nQ2hpbGQgPSBmYWxzZTtcblx0fTtcblxuXG5cdC8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxuXG5cdCRzY29wZS5hZGREb25hdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGVtcCA9ICRzY29wZS5uZXdEb25hdGlvbjtcblx0XHR0ZW1wLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHRlbXAuZGF0ZSk7XG5cdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMucHVzaCgkc2NvcGUubmV3RG9uYXRpb24pO1xuXHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xuXHRcdGNvbnNvbGUubG9nKFwiYWRkZWQgZG9uYXRpb25cIiwgdGVtcCwgJHNjb3BlLmZhbWlseS5kb25hdGlvbnMpO1xuXHR9O1xuXG5cblx0Ly8vLyBwcmV2ZW50IGFjY2lkZW50YWwgYmFja3Ncblx0Ly8kc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oIGV2ZW50LCBvbGRVcmwgKSB7XG5cdC8vXHRjb25zb2xlLmxvZyhcIm9sZCB1cmw6IFwiLCBvbGRVcmwpO1xuXHQvL1x0aWYoLyhhZGRmYW1pbHkpLy50ZXN0KG9sZFVybCkpIHtcblx0Ly9cdFx0dmFyIGFuc3dlciA9IGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlP1wiKTtcblx0Ly9cdFx0aWYgKCFhbnN3ZXIpIHtcblx0Ly9cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvL1x0XHR9XG5cdC8vXHR9XG5cdC8vfSk7XG5cbn1dKTsiLCIvL2NvbnRyb2xsZXJzIGZvciBsb2dpblxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ2F1dGhTZXJ2aWNlJywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgYXV0aFNlcnZpY2UsICRsb2NhdGlvbiwgJHJvb3RTY29wZSl7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICRodHRwLnBvc3QoJy9sb2dpbicsICRzY29wZS5mb3JtKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2F2ZVRva2VuKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9zZWFyY2hcIik7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xufV0pO1xuIiwiXG4vL1RoaXMgc2hvdWxkIGdldCB0aGUgc2VhcmNoIGl0ZW1cbmFwcC5jb250cm9sbGVyKCdzZWFyY2hGdW5jdGlvbicsIFsnJHNjb3BlJywgJyRodHRwJywgJ1Jlc3VsdFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgUmVzdWx0U2VydmljZSkge1xuICAgICRzY29wZS5mb3JtSW5wdXQ9e307XG5cbiAgICAkc2NvcGUuc2VhcmNoQnRuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvL3Bhc3NlcyBpbiBzZWFyY2ggdGV4dCB0byBzZXJ2aWNlXG4gICAgICAgUmVzdWx0U2VydmljZS5tYWtlRGF0YUNhbGwoJHNjb3BlLmZvcm1JbnB1dC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIGlucHV0IHRleHQnLCAkc2NvcGUuZm9ybUlucHV0KTtcbiAgICAgICAgLy9lbXB0eXMgdGhlIHNlYXJjaCBib3hcbiAgICAgICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcbiAgICB9O1xuXG59XSk7XG4iLCIvL1RoaXMgc2VydmljZSBzaG91bGQgcGFzcyBkYXRhIGJldHdlZW4gY29udHJvbGxlcnNcbmFwcC5mYWN0b3J5KCdSZXN1bHRTZXJ2aWNlJywgWyckaHR0cCcsZnVuY3Rpb24oJGh0dHApIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciBhZHVsdHMgPSBbXTtcbiAgICB2YXIgY29tcGFuaWVzID0gW107XG4gICAgdmFyIGtpZHMgPSBbXTtcblxuICAgIHZhciBtYWtlRGF0YUNhbGwgPSBmdW5jdGlvbihwYXNzZWREYXRhKSB7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnLi4vc2VhcmNoJyxcbiAgICAgICAgICAgIHBhcmFtczp7c2VhcmNoOnBhc3NlZERhdGF9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIGdldENvbXBhbmllcyhyZXN1bHRzKTtcbiAgICAgICAgICAgIGdldEtpZHMocmVzdWx0cyk7XG4gICAgICAgICAgICBnZXRBZHVsdHMocmVzdWx0cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGdldENvbXBhbmllcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBjb21wYW5pZXMuc3BsaWNlKDAsY29tcGFuaWVzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NvbXBhbnknKVxuICAgICAgICAgICAgICAgIGNvbXBhbmllcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRFbGVtZW50MShhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnQxJyxjb21wYW5pZXMpO1xuICAgICAgICByZXR1cm4gY29tcGFuaWVzXG4gICAgfTtcblxuICAgIHZhciBnZXRBZHVsdHMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICB2YXIgZ2V0RWxlbWVudDIgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAgYWR1bHRzLnNwbGljZSgwLGFkdWx0cy5sZW5ndGgpO1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdhZHVsdCcpXG4gICAgICAgICAgICAgICAgICAgIGFkdWx0cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0RWxlbWVudDIoYXJyYXkpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiBnZXRFbGVtZW50MicsIGFkdWx0cyk7XG4gICAgICAgIHJldHVybiBhZHVsdHNcbiAgICB9O1xuXG4gICAgdmFyIGdldEtpZHMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICB2YXIgZ2V0RWxlbWVudDMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgICAgICAgICAga2lkcy5zcGxpY2UoMCxraWRzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NoaWxkJylcbiAgICAgICAgICAgICAgICAgICAga2lkcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgZ2V0RWxlbWVudDMoYXJyYXkpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBnZXRFbGVtZW50czMnLCBraWRzKTtcbiAgICAgICAgcmV0dXJuIGtpZHNcbiAgICB9O1xuXG4gICAgLy9wdWJsaWNcbiAgICB2YXIgcHVibGljQXBpID0ge1xuICAgICAgICBnZXRLaWRzOiBnZXRLaWRzLFxuICAgICAgICBnZXRBZHVsdHM6IGdldEFkdWx0cyxcbiAgICAgICAgZ2V0Q29tcGFuaWVzOiBnZXRDb21wYW5pZXMsXG4gICAgICAgIG1ha2VEYXRhQ2FsbDogbWFrZURhdGFDYWxsLFxuICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxuICAgICAgICBjb21wYW5pZXM6IGNvbXBhbmllcyxcbiAgICAgICAgYWR1bHRzOiBhZHVsdHMsXG4gICAgICAgIGtpZHM6IGtpZHNcbiAgICB9O1xuICAgIHJldHVybiBwdWJsaWNBcGk7XG59XSk7IiwiLy8gUGxlYXNlIG5vdGUgdGhhdCAkbW9kYWxJbnN0YW5jZSByZXByZXNlbnRzIGEgbW9kYWwgd2luZG93IChpbnN0YW5jZSkgZGVwZW5kZW5jeS5cbi8vIEl0IGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgJHVpYk1vZGFsIHNlcnZpY2UgdXNlZCBhYm92ZS5cblxuLy9uZWVkZWQgZm9yIG1vZGFsPz8gcHJldHR5IHN1cmVcbmFwcC5jb250cm9sbGVyKCdNb2RhbEluc3RhbmNlQ3RybCcsWyckc2NvcGUnLCckbW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlKSB7XG5cbiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5zZWxlY3RlZC5pdGVtKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgfTtcbn1dKTsiLCJhcHAuY29udHJvbGxlcignbmF2Q3RybCcsIFsnYXV0aFNlcnZpY2UnLCckc2NvcGUnLCckcm9vdFNjb3BlJywnJGxvY2F0aW9uJywgZnVuY3Rpb24oYXV0aFNlcnZpY2UsICRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uKXtcbiAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG5cbiAgICBpZigkcm9vdFNjb3BlLnVzZXIgJiYgJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lKXtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9ob21lJyk7XG4gICAgfVxuXG4gICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XG4gICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICB9XG59XSk7XG4iLCIvLyBBamF4IGZvciBjcmVhdGluZyB0aGUgY29udGFjdCBsaXN0IGluIGNvbnN0YW50IGNvbnRhY3RcbmFwcC5jb250cm9sbGVyKCduZXdDb250YWN0TGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihuZXdDb250YWN0TGlzdERhdGEsICRzY29wZSwgJHJvb3RTY29wZSkge1xuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XG5cbiAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoaWRlJyk7XG4gICAgICAgICRyb290U2NvcGUuaGlkZSA9IHRydWU7XG4gICAgfTtcblxuICAgICRzY29wZS5saXN0bmFtZSA9IHt9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBsaXN0OiBcIiArICRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG4gICAgICAgIC8vcGFzc2VzIGxpc3QgbmFtZSBzZXJ2aWNlXG4gICAgICAgIG5ld0NvbnRhY3RMaXN0RGF0YS5wb3N0TGlzdCgkc2NvcGUubGlzdG5hbWUuaW5wdXQpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdsaXN0ICMnLG5ld0NvbnRhY3RMaXN0RGF0YS5saXN0TnVtKTtcblxuICAgICAgICAkc2NvcGUubGlzdG5hbWU9e307XG4gICAgfTtcbn1dKTtcblxuXG4iLCJcbmFwcC5zZXJ2aWNlKCduZXdDb250YWN0TGlzdERhdGEnLCBbJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnJGh0dHAnLFxuICAgIGZ1bmN0aW9uIChDb250YWN0TGlzdERhdGFTZXJ2aWNlLCAkaHR0cCkge1xuICAgICAgICB2YXIgbGlzdE51bSA9IFwiXCI7XG4gICAgICAgIHZhciBpbXBvcnREYXRhQXJyYXkgPVtdO1xuXG4gICAgICAgIHRoaXMucG9zdExpc3QgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJkaWQgdGhlIG5hbWUgbWFrZSBpdCB0byB0aGUgc2VydmljZT8gXCIgKyBuYW1lICk7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL25ld0NvbnRhY3RMaXN0Jywge25hbWU6IG5hbWV9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIGxpc3ROdW0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSWQ/IFwiLCBsaXN0TnVtKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpOyAvL2Vycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wb3BMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YU9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICBcImltcG9ydERhdGFBcnJheVwiOiBpbXBvcnREYXRhQXJyYXksXG4gICAgICAgICAgICAgICAgXCJsaXN0TnVtXCI6IGxpc3ROdW1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRvIHBvcExpc3QnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXBvcnREYXRhQXJyYXk6ICcsdGhpcy5pbXBvcnREYXRhQXJyYXksICdcXG50eXBlOiAnLCB0eXBlb2YgdGhpcy5pbXBvcnREYXRhQXJyYXkpO1xuICAgICAgICAgICAgZ2V0Q2hlY2tlZChsaXN0KTtcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9wb3B1bGF0ZUNvbnRhY3RMaXN0JywgdGhpcy5kYXRhT2JqZWN0KS50aGVuKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3N0ZWQnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW1wb3J0RGF0YUFycmF5OiAnLHRoaXMuaW1wb3J0RGF0YUFycmF5LCAnXFxudHlwZTogJywgdHlwZW9mIHRoaXMuaW1wb3J0RGF0YUFycmF5KTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuICAgICAgICB9O1xuICAgICAgICAvL2dldCBhbGwgdGhlIGNoZWNrZWQgZWxlbWVudHMgYW5kIHN0dWZmIHRoZW0gaW4gYW4gYXJyYXlcbiAgICAgICAgdmFyIGdldENoZWNrZWQgPSBmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldENoZWNrZWQgaXMgcnVubmluZycpO1xuICAgICAgICAgICAgbC5mb3JFYWNoKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdE9iamVjdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuZW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOm9iamVjdC5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogb2JqZWN0Lmxhc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tcGFueV9uYW1lXCI6IG9iamVjdC5jb21wYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkcmVzc2VzXCI6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHk6IG9iamVjdC5jaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGFjdE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnREYXRhQXJyYXkucHVzaCh0aGlzLmNvbnRhY3RPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuXG4iLCJhcHAuY29udHJvbGxlcigncG9wTGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywnJGh0dHAnLCBmdW5jdGlvbihuZXdDb250YWN0TGlzdERhdGEsICRzY29wZSwgJGh0dHApIHtcbiAgICAvL2RhdGEgdG8gY3JlYXRlIGEgbmV3IGNvbnRhY3QgbGlzdFxuXG5cbiAgICAkc2NvcGUubGlzdE5hbWUgPSB7fTtcblxuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBsaXN0OiBcIiArIHNjb3BlLmxpc3ROYW1lLmlucHV0KTtcbiAgICAgICAgLy9wYXNzZXMgaW4gc2VhcmNoIHRleHQgdG8gc2VydmljZVxuICAgICAgICBuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgpO1xuICAgICAgICAvL3ZhciBsaXN0RW5kID0ge1xuICAgICAgICAvLyAgICBcImxpc3RzXCI6IFtsaXN0TnVtXSxcbiAgICAgICAgLy8gICAgXCJjb2x1bW5fbmFtZXNcIjogW1xuICAgICAgICAvLyAgICBcIkVNQUlMXCIsXG4gICAgICAgIC8vICAgIFwiRklSU1QgTkFNRVwiLFxuICAgICAgICAvLyAgICBcIkxBU1QgTkFNRVwiLFxuICAgICAgICAvLyAgICBcIkNJVFlcIixcbiAgICAgICAgLy8gICAgXCJDT01QQU5ZIE5BTUVcIlxuICAgICAgICAvL119XG5cblxuICAgICAgICAkc2NvcGUubGlzdE5hbWU9e307XG4gICAgfTtcbn1dKTtcblxuIiwiXG4vL3JlZ2lzdGVyIGNvbnRyb2xsZXJcbmFwcC5jb250cm9sbGVyKCdyZWdpc3RlckN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9jYXRpb24pIHtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlZ2lzdGVyQ3RybFwiKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyQ29udHJvbGxlciBzdWJtaXQ6JywgJHNjb3BlLmZvcm0pO1xuICAgICAgICAkaHR0cC5wb3N0KCcvcmVnaXN0ZXInLCAkc2NvcGUuZm9ybSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9pbmRleFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufV0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ3Jlc2V0Q3RybCcsIFsgJyRzY29wZScsICckaHR0cCcsICckbG9jYXRpb24nLCAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbikge1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlZGl0IHBhc3N3b3JkOicsICRzY29wZS5mb3JtKTtcbiAgICAgICAgJGh0dHAucHV0KCcvYWRtaW4nLCAkc2NvcGUuZm9ybSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9pbmRleFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufV0pO1xuIiwiYXBwLnNlcnZpY2UoJ3ZhbGlkU2VydmljZScsIFtmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgdmFsaWRhdGVJbnB1dCA9IGZ1bmN0aW9uICh0eXBlLCBpZCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwidmFsaWRhdGVJbnB1dCgpXCIpO1xuICAgICAgICAvLyBzdG9yZXMgdGhlIGZvcm0gYmVpbmcgY2FsbGVkIG9uXG4gICAgICAgIHZhciBwYXR0ZXJuO1xuICAgICAgICB2YXIgJG9iaiA9IChpZCkgPyAkKCcjJysgaWQpIDogZmFsc2U7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib2JqZWN0IGlzIFwiLCAkb2JqLCB0eXBlLCBpZCk7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjaXR5XCI6XG4gICAgICAgICAgICBjYXNlIFwic3RhdGVcIjpcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgYW5kIGFscGhhIGNoYXJzLCBhcyB3ZWxsIGFzIHdoaXRlIHNwYWNlIGFuZCBhIGZldyBleHRyYSBjaGFyc1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLXpcXHMsLictXXswLDI4fS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29ycE5hbWVcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrLV17MCw3NX0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSYtXXswLDUwfS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiemlwXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eWzAtOV17NX0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwaG9uZVwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXihbKF1bMC05XXszfVspXXxbMC05XXszfSlbXFxzXFwtLl0/WzAtOV17M31bXFxzXFwtLl0/WzAtOV17NH0kLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTkuXyUrLV0rQFthLXpBLVowLTkuLV0rXFwuW2EtekEtWl17Mix9JC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibm90ZXNcIjpcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSY8PlxcW1xcXXt9XFwtPVwifGBcXFxcXFwvXXswLDI1MH0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImV4dFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHM6LV0rJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXjIwWzAtOV17Mn1bLV0oMFsxLTldfDFbMC0yXSlbLV0oMFsxLTldfFsxLTJdWzAtOV18M1swMV0pJC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYmlydGhkYXRlXCI6XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eKDE5OVswLTldfDIwWzAtOV17Mn0pWy1dKDBbMS05XXwxWzAtMl0pWy1dKDBbMS05XXxbMS0yXVswLTldfDNbMDFdKSQvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFtb3VudFwiOlxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXltcXCRdP1tcXGRdKyhbLl1bXFxkXXsyfSk/JC87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW52YWxpZCBjbGFzcyBzZWFyY2hcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgcmVxdWlyZWQgb3IgdHJpbW1lZCBsZW5ndGggaXMgbm90IDAsIHRoZW4gdmFsaWRhdGUgaW5mb1xuICAgICAgICBpZigkb2JqLmF0dHIoJ3JlcXVpcmVkJykgfHwgJG9iai52YWwoKSkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGlmIHZhbHVlIG1hdGNoZXMgcmVnZXggZm9yIGZpZWxkIHR5cGVcbiAgICAgICAgICAgIGlmKCFwYXR0ZXJuLnRlc3QoJG9iai52YWwoKS50cmltKCkpIHx8ICRvYmoudmFsKCkudHJpbSgpLmxlbmd0aCA9PSAwICYmICRvYmouYXR0cigncmVxdWlyZWQnKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGZhaWxzLCBhZGRzIGludmFsaWQgY2xhc3MgKGhpZ2hsaWdodGluZyksIGNoYW5nZXMgcGxhY2Vob2xkZXIgdG8gd2hhdCBzaG91bGQgYmUgZW50ZXJlZFxuICAgICAgICAgICAgICAgICRvYmouYWRkQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICRvYmouZGF0YSgnaW52YWxpZCcpKS52YWwoJycpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHR5cGUsICcgZmFpbGVkIHRlc3QnLCBwYXR0ZXJuKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBwYXNzZXMsIHJlbW92ZXMgaW52YWxpZCBjbGFzcywgcmVzZXRzIHBsYWNlaG9sZGVyIHRvIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAkb2JqLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkb2JqLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHR5cGUsICcgcGFzc2VkIHRlc3QnLCBwYXR0ZXJuKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG5cdHZhciB2YWxpZGF0ZUZvcm0gPSBmdW5jdGlvbiAoZm9ybXMpIHtcblx0XHR2YXIgcGFzcyA9IHRydWU7XG5cdFx0Zm9ybXMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xuXHRcdFx0JCgnIycrIHYgKycgLmpzLXZhbGlkYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmKHZhbGlkYXRlSW5wdXQoJCh0aGlzKS5kYXRhKCd0eXBlJyksICQodGhpcykuYXR0cignaWQnKSkgPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygkKHRoaXMpLmF0dHIoJ2lkJykgK1wiIGZhaWxlZCB0aGUgdGVzdCBcIisgJCh0aGlzKS5kYXRhKCd0eXBlJykgK1wiIGVudGVyZWQgaW5mbzogXCIrICQodGhpcykudmFsKCkpO1xuXHRcdFx0XHRcdHBhc3MgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHBhc3M7XG5cdH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWxpZGF0ZUlucHV0OiB2YWxpZGF0ZUlucHV0LFxuXHRcdHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtXG4gICAgfTtcbn1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
>>>>>>> 38e67cfe9a332fb5a56d86e69bcfe379471315ff
