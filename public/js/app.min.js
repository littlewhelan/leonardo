function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,n,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&n.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?n.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(n){if(n){var e=n.split(".")[1],o=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(n){t.localStorage.jwtToken=n},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var n=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=n.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,n,e,o,a){t.companies=o.companies,t.corp={contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.open=function(o,i){return console.log("corp call",i),a({method:"GET",url:"../corporation",params:{id:i}}).then(function(a){t.company=a.data;var i=n.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(n){t.selected=n},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?(console.log("insert corp",t.corp),a({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(n){console.log("Put corp, got id ",n.data),t.corp.id=n.data.id,t.corp.info=n.data.info?n.data.info:{},t.contact=n.data.contact?n.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=n.data.donations?n.data.donations:{}})):a({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(n){console.log("Posted corp, got id ",n.data),t.corp.id=n.data.id,t.corp.info=n.data.info?n.data.info:{},t.contact=n.data.contact?n.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=n.data.donations?n.data.donations:{}})},t.addDonation=function(){console.log("added donation",t.newDonation,t.corp.donations),t.corp.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService",function(t,n,e){t.type={},console.log("Where is this",t.corp,t.fam,t.zipCk,t.ageCk),t.emailList=[],t.searchListBtn=function(){if("zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(n){t.emailList=n,console.log(t.emailList)}),"ageCk"==t.type){var n=e.makeDataCall("age",t.age.data);n.then(function(n){console.log(n),t.emailList=n})}if("fam"==t.type){var o=e.makeDataCall("family","");o.then(function(n){t.emailList=n,console.log(n)})}if("corp"==t.type){var a=e.makeDataCall("company","");a.then(function(n){t.emailList=n,console.log(n)})}t.type={}}}]),app.factory("ContactListDataService",["$http","$q",function(t,n){function e(e,o){var a=n.defer();return console.log("this is in the make data call",e,o),t({method:"GET",url:"../createMailList",params:{type:e,search:o}}).then(function(t){data=t.data,a.resolve(t.data)}),a.promise}return{data:[],makeDataCall:e}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,n,e,o,a){t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),a({method:"GET",url:"../family",params:{id:i}}).then(function(a){t.family=a.data;var i=n.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(n){t.selected=n},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.id?(console.log("insert family",t.family),a({method:"PUT",url:"/family",data:{family:t.family}}).then(function(n){console.log("Put family, got id ",n.data),t.family.id=n.data.id,t.family.adultOne=n.data.adultOne?n.data.adultOne:{},t.family.adultTwo=n.data.adultTwo?n.data.adultTwo:{},t.family.emergency=n.data.emergency?n.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=n.data.children?n.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=n.data.donations?n.data.donations:[]})):a({method:"POST",url:"/family",data:{family:t.family}}).then(function(n){console.log("Posted family, got id ",n.data),t.family.id=n.data.id,t.family.adultOne=n.data.adultOne?n.data.adultOne:{},t.family.adultTwo=n.data.adultTwo?n.data.adultTwo:{},t.family.emergency=n.data.emergency?n.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=n.data.children?n.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=n.data.donations?n.data.donations:[]})},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1):t.family.children.push(t.newChild),t.newChild={}},t.editChild=function(n){t.editingChild=n,t.newChild=t.family.children[n]},t.removeChild=function(n){console.log("in remove child index",n," edit ",t.editingChild),t.family.children.splice(n,1),n==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){t.family.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,n,e,o,a){t.submit=function(){n.post("/login",t.form).then(function(t){e.saveToken(t.data),a.user=e.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,n,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var n=[],e=[],o=[],a=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){n=t.data,l(n),r(n),c(n)})},l=function(t){var n=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return n(t),console.log("this is getElement1",o),o},c=function(t){var n=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return n(t),console.log("this is in getElement2",e),e},r=function(t){var n=function(t){a.splice(0,a.length),t.forEach(function(t){"child"==t.type&&a.push(t)})};return n(t),console.log("this is getElements3",a),a},s={getKids:r,getAdults:c,getCompanies:l,makeDataCall:i,results:n,companies:o,adults:e,kids:a};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,n){t.ok=function(){n.close(t.selected.item)},t.cancel=function(){n.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,n,e,o){e.user=t.getUser(),e.user&&e.user.username&&o.path("/home"),n.logout=function(){t.logout(),e.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope",function(t,n){n.listname={},n.createList=function(){console.log("create list: "+n.listname.input),t.postList(n.listname.input),console.log("list #",t.listNum),n.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,n){this.newContactList=[],this.listNum="0",this.postList=function(t){return console.log("did the name make it to the service? "+t),n.post("/newContactList",{name:t}).then(function(t){console.log(t.data),listNum=t.data,console.log("Id? ",listNum)},function(t){console.log(t)})},this.importDataArray=[{email_addresses:["user1@example.com"],first_name:"John",last_name:"Smith",company_name:"Company X",addresses:[{city:"anytown"}]},{email_addresses:["user2@example.com"],first_name:"Jane",last_name:"Smithy",company_name:"Company Y",addresses:[{city:"sometown"}]}],this.popList=function(){e(),n.post("/populateContactList.js",importDataArray,listNum).then(function(t,n,e,o){console.log(t)}),console.log(options)};var e=function(){$(":checked.type-element").each(function(){if(id==t.results.id){var n={email_addresses:[$(this).email],first_name:$(this).firstName,last_name:$(this).lastName,company_name:$(this).company,addresses:[{city:$(this).city}]};importDataArray.push(n)}})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,n,e){n.listName={},n.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),n.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,n,e){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),n.post("/register",t.form).then(function(t){console.log(t),e.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,n,e){t.submit=function(){console.log("edit password:",t.form),n.put("/admin",t.form).then(function(t){console.log(t),e.path("/index")})}}]);
//# sourceMappingURL=data:application/json;base64,
