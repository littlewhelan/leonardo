var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"leo/static/login.html"}).when("/search",{templateUrl:"leo/private/search.html"}).when("/register",{templateUrl:"leo/static/register.html"}).when("/contactList",{templateUrl:"leo/private/contactList.html"}).when("/addfamily",{templateUrl:"leo/private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"leo/private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"leo/private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,a,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&a.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?a.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(a){if(a){var e=a.split(".")[1],o=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(a){t.localStorage.jwtToken=a},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var a=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=a.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService","toastr",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(a){r.error("Cancelled"),t.corp={info:{},contact:{},donations:[]},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){n.data.donations.forEach(function(t,a,e){e[a].date=l.fromDB(t.date)}),t.corp=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.donations.length&&t.corp.donations.forEach(function(t,a,e){e[a].date=l.toDB(t.date)}),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Put corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Posted corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{},r.success("Corporation added!")},function(){r.error("Failed to add corporation")}):(r.error("Unauthorized character"),console.log("Add corp input tests failed"))},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("donation",t.newDonation),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.corp.donations))}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,a,e,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var a=e.makeDataCall("age",t.age.data);a.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=e.makeDataCall("family","");o.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=e.makeDataCall("company","");i.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(a){var e=angular.element(a.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],e.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),e.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,a){function e(e,o){var n=a.defer();return console.log("this is in the make data call",e,o),t({method:"GET",url:"../createMailList",params:{type:e,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:e}}]),app.service("dateService",["MomentJS",function(t){var a="YYYY-MM-DD",e="M/D/YYYY",o=function(e){return t(e).format(a)},n=function(a){return t(a).format(e)};return{toDB:o,fromDB:n}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","toastr","dateService",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(a){l.error("Cancelled"),t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){console.log(n.data),n.data.children.forEach(function(t,a,e){console.log("reformatted",r.fromDB(e[a].birthdate)),e[a].birthdate=r.fromDB(t.birthdate)}),n.data.donations.forEach(function(t,a,e){e[a].date=r.fromDB(t.date)}),t.family=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.children.length&&t.family.children.forEach(function(t,a,e){e[a].birthdate=r.toDB(t.birthdate)}),t.family.donations.length&&t.family.donations.forEach(function(t,a,e){e[a].date=r.toDB(t.date)}),console.log("Saving family, after toDB birthdates",t.family),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("update family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(a){console.log("Put family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/family",data:{family:t.family}}).then(function(a){console.log("Posted family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[],l.success("Family saved!")},function(){l.error("Failed to add family")}):(l.error("Unauthorized character"),console.log("Add family failed input tests"))},t.addChild=function(){t.newChild.firstName&&(console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1,l.success("Child updated!")):(t.family.children.push(t.newChild),l.success("Child added!")),t.newChild={})},t.editChild=function(a){t.editingChild=a,t.newChild=t.family.children[a]},t.removeChild=function(a){console.log("in remove child index",a," edit ",t.editingChild),t.family.children.splice(a,1),a==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("add donation",t.newDonation),t.family.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.family.donations))}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope","toastr",function(t,a,e,o,n,i){t.submit=function(){a.post("/login",t.form).then(function(t){e.saveToken(t.data),n.user=e.getUser(),o.path("/search")},function(){i.error("incorrect username or password")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,a,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var a=[],e=[],o=[],n=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){a=t.data,l(a),c(a),r(a)})},l=function(t){var a=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return a(t),console.log("this is getElement1",o),o},r=function(t){var a=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return a(t),console.log("this is in getElement2",e),e},c=function(t){var a=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return a(t),console.log("this is getElements3",n),n},s={getKids:c,getAdults:r,getCompanies:l,makeDataCall:i,results:a,companies:o,adults:e,kids:n};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,a){t.ok=function(){a.close(t.selected.item)},t.cancel=function(){a.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,a,e,o){e.user=t.getUser(),e.user&&e.user.username&&o.path("/home"),a.logout=function(){t.logout(),e.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope","toastr",function(t,a,e,o){a.hide=function(){console.log("hide"),e.hide=!0},a.listname={},a.createList=function(){console.log("create list: "+a.listname.input),t.postList(a.listname.input,function(t){t===!0?(a.listname={},o.success("Successfully created list"),a.hide()):(console.log("failed to create list"),o.error("Failed to create list"))})}}]),app.service("newContactListData",["ContactListDataService","$http","$timeout",function(t,a,e){var o="",n=[];this.postList=function(t,e){console.log("did the name make it to the service? "+t),a.post("/newContactList",{name:t}).then(function(t){console.log(t.data),o=t.data,console.log("Id? ",o),e(!0)},function(t){console.log("failed to create",t),e(!1)})},this.popList=function(t){this.dataObject={importDataArray:n,listNum:o},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),i(t),a.post("/populateContactList",this.dataObject).then(function(t,a,e,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0},function(){return!1})};var i=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email||""],first_name:t.firstName||"",last_name:t.lastName||"",company_name:t.company||"",addresses:[{city:t.city||""}]},console.log(this.contactObject),n.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,a,e){a.listName={},a.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),a.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location","toastr","validService",function(t,a,e,o,n){t.validateInput=n.validateInput,t.submit=function(){a.post("/register",t.form).then(function(t){e.path("/index"),o.success("admin created")},function(){o.error("failed to add admin")})}}]),app.controller("resetCtrl",["$scope","$http","$location","authService","toastr",function(t,a,e,o,n){t.submit=function(){console.log("edit password:",t.form);var i=o.getUser();console.log("auth user",i);var l=t.form;l.id=i.id,l.username=i.username,console.log("prepared",l),a.put("/admin",l).then(function(t){console.log(t),n.success("password changed"),e.path("/index")},function(){n.error("failed to update password")})}}]),app.service("validService",[function(){var t=function(t,a){var e,o=a?$("#"+a):!1;switch(t){case"name":case"city":case"state":e=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":e=/^[0-9]{5}$/;break;case"phone":e=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":e=/^[a-zA-Z0-9\s:-]{0,15}$/;break;case"date":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/20[0-9]{2}$/;break;case"birthdate":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/((199[0-9]|20)[0-9]{2})$/;break;case"amount":e=/^([\$]?[\d]+([.][\d]{2})?){1,10}$/;break;case"username":e=/^(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d_\-]{8,20}$/;break;case"password":e=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,20}$/;break;case"search":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}$/;break;case"age":e=/^[0-9]{1,2}$/;break;default:return!1}return o.attr("required")||o.val()?!e.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),!0):void 0},a=function(a){var e=!0;return a.forEach(function(a,o,n){$("#"+a+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(e=!1)})}),e};return{validateInput:t,validateForm:a}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udHJvbGxlci5qcyIsImNyZWF0ZUxpc3RTZXJ2aWNlLmpzIiwiZGF0ZVNlcnZpY2UuanMiLCJmYW1pbHlDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwibWFpblNlYXJjaENvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoU2VydmljZS5qcyIsIm1vZGFsSW5zdGFuY2VDb250cm9sbGVyLmpzIiwibmF2Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0U2VydmljZS5qcyIsInBvcExpc3RDb250cm9sbGVyLmpzIiwicmVnaXN0ZXJDb250cm9sbGVyLmpzIiwicmVzZXRDb250cm9sbGVyLmpzIiwidmFsaWRTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsIiRzY29wZSIsIiR1aWJNb2RhbCIsIiRsb2ciLCJSZXN1bHRTZXJ2aWNlIiwiJGh0dHAiLCJ2YWxpZFNlcnZpY2UiLCJkYXRlU2VydmljZSIsInRvYXN0ciIsInZhbGlkYXRlSW5wdXQiLCJjb21wYW5pZXMiLCJjb3JwIiwiaW5mbyIsImNvbnRhY3QiLCJkb25hdGlvbnMiLCJuZXdEb25hdGlvbiIsImFuaW1hdGlvbnNFbmFibGVkIiwiY2xlYXJDb3JwIiwiZm9ybXNBcnJheSIsImVycm9yIiwiZm9yRWFjaCIsInYiLCIkIiwiZWFjaCIsInJlbW92ZUNsYXNzIiwiYXR0ciIsImRhdGEiLCJvcGVuIiwic2l6ZSIsImlkIiwibWV0aG9kIiwidXJsIiwidGhlbiIsImkiLCJhIiwiZGF0ZSIsImZyb21EQiIsIm1vZGFsSW5zdGFuY2UiLCJhbmltYXRpb24iLCJzY29wZSIsInJlc29sdmUiLCJpdGVtcyIsInJlc3VsdCIsInNlbGVjdGVkSXRlbSIsInNlbGVjdGVkIiwidG9nZ2xlQW5pbWF0aW9uIiwic2F2ZSIsImxlbmd0aCIsInRvREIiLCJ2YWxpZGF0ZUZvcm0iLCJyZXMiLCJzdWNjZXNzIiwiYWRkRG9uYXRpb24iLCJ0ZXN0IiwiYW1vdW50IiwicHVzaCIsIkNvbnRhY3RMaXN0RGF0YVNlcnZpY2UiLCJuZXdDb250YWN0TGlzdERhdGEiLCIkcm9vdFNjb3BlIiwidHlwZSIsImFnZSIsInppcCIsImVtYWlscyIsImluY2x1ZGVkRW1haWxzIiwidG90YWxEaXNwbGF5ZWQiLCJ0b3RhbFJlc3VsdHMiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsInBvcExpc3QiLCJsb2FkTW9yZSIsInNob3dBbGwiLCJjaGVja0FsbCIsImV2ZW50IiwiJGJ1dHRvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJ2YWwiLCJjb3B5IiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwibW9tZW50IiwiZGJGb3JtYXQiLCJ1aUZvcm1hdCIsInRvRGJGb3JtYXQiLCJmb3JtYXQiLCJmcm9tRGJGb3JtYXQiLCJhZHVsdHMiLCJraWRzIiwiZmFtaWx5IiwiYWR1bHRPbmUiLCJhZHVsdFR3byIsImVtZXJnZW5jeSIsImNoaWxkcmVuIiwibmV3Q2hpbGQiLCJjbGVhckZhbWlseSIsImJpcnRoZGF0ZSIsImFkZENoaWxkIiwiZmlyc3ROYW1lIiwiZWRpdGluZ0NoaWxkIiwiZWRpdENoaWxkIiwiaW5kZXgiLCJyZW1vdmVDaGlsZCIsInNwbGljZSIsImNsZWFyQ2hpbGQiLCJsYXN0TmFtZSIsInNjaG9vbCIsIm5vdGVzIiwic3VibWl0IiwicG9zdCIsImZvcm0iLCJ1c2VyIiwiZm9ybUlucHV0Iiwic2VhcmNoQnRuIiwicmVzdWx0cyIsImdldENvbXBhbmllcyIsImdldEtpZHMiLCJnZXRBZHVsdHMiLCJhcnJheSIsImdldEVsZW1lbnQxIiwiZ2V0RWxlbWVudDIiLCJnZXRFbGVtZW50MyIsInB1YmxpY0FwaSIsIiRtb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwidXNlcm5hbWUiLCJoaWRlIiwibGlzdG5hbWUiLCJjcmVhdGVMaXN0IiwiaW5wdXQiLCJwb3N0TGlzdCIsIiR0aW1lb3V0IiwibGlzdE51bSIsImltcG9ydERhdGFBcnJheSIsIm5hbWUiLCJjYiIsImxpc3QiLCJkYXRhT2JqZWN0IiwiZ2V0Q2hlY2tlZCIsImwiLCJvYmplY3QiLCJjb250YWN0T2JqZWN0IiwiZW1haWxfYWRkcmVzc2VzIiwiZW1haWwiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiY29tcGFueV9uYW1lIiwiY29tcGFueSIsImFkZHJlc3NlcyIsImNpdHkiLCJsaXN0TmFtZSIsInRlbXBVc2VyIiwicHV0IiwicGF0dGVybiIsIiRvYmoiLCJ0cmltIiwiYWRkQ2xhc3MiLCJmb3JtcyIsInBhc3Mi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QUFBcUYsU0FBQSxHQUFBRCxFQUFBcEYsTUFBQXFGLE9BQUF0SCxRQUFBcUgsRUFBQTNJLEtBQUEsYUFFQTJJLEVBQUFFLFNBQUEsV0FBQTdJLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLFlBQUFzRCxJQUFBLEtBRUEsSUFHQW9GLEVBQUE1SSxZQUFBLFdBQUFDLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLGlCQUVBLEdBWEEsUUFnQkF1QixFQUFBLFNBQUFzSCxHQUNBLEdBQUFDLElBQUEsQ0FTQSxPQVJBRCxHQUFBbkosUUFBQSxTQUFBQyxFQUFBWSxFQUFBQyxHQUNBWixFQUFBLElBQUFELEVBQUEsaUJBQUFFLEtBQUEsV0FDQSxHQUFBZCxFQUFBYSxFQUFBM0MsTUFBQStDLEtBQUEsUUFBQUosRUFBQTNDLE1BQUE4QyxLQUFBLFNBRUErSSxHQUFBLE9BSUFBLEVBR0EsUUFDQS9KLGNBQUFBLEVBQ0F3QyxhQUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdsZW8nLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCcsICdjaGVja2xpc3QtbW9kZWwnLCAndG9hc3RyJywgJ2FuZ3VsYXItbW9tZW50anMnXSk7XHJcblxyXG5cclxuYXBwLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJyxcclxuICAgIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIuXHJcbiAgICAgICAgICAgIHdoZW4oJy8nLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xlby9zdGF0aWMvbG9naW4uaHRtbCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9zZWFyY2gnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xlby9wcml2YXRlL3NlYXJjaC5odG1sJ1xyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgd2hlbignL3JlZ2lzdGVyJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsZW8vc3RhdGljL3JlZ2lzdGVyLmh0bWwnXHJcbiAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICB3aGVuKCcvY29udGFjdExpc3QnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xlby9wcml2YXRlL2NvbnRhY3RMaXN0Lmh0bWwnXHJcbiAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICB3aGVuKCcvYWRkZmFtaWx5Jywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsZW8vcHJpdmF0ZS9hZGRmYW1pbHkuaHRtbCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ2VkaXRGYW1pbHlDdHJsJ1xyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgd2hlbignL2FkZGNvcnAnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xlby9wcml2YXRlL2FkZGNvcnAuaHRtbCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ2VkaXRDb3JwQ3RybCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9jb250YWN0bGlzdCcsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbGVvL3ByaXZhdGUvY29udGFjdGxpc3QuaHRtbCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIG90aGVyd2lzZSh7XHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnL3NlYXJjaCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcblxyXG5cclxuXHJcblxyXG4iLCJhcHAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgWyckcScsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG4gICAgICAgICAgICBpZiAoYXV0aFNlcnZpY2UuaXNBdXRoZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIGF1dGhTZXJ2aWNlLmdldFRva2VuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgdXNlciBpcyBub3QgYXV0aGVudGljYXRlZFxyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcclxuICAgICAgICB9LCByZXNwb25zZUVycm9yOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkXHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XSkiLCJhcHAuc2VydmljZSgnYXV0aFNlcnZpY2UnLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xyXG5cclxuICAgIHRoaXMucGFyc2VKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XHJcbiAgICAgICAgICAgIHZhciBiYXNlNjQgPSBiYXNlNjRVcmwucmVwbGFjZSgnLScsICcrJykucmVwbGFjZSgnXycsICcvJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKCR3aW5kb3cuYXRvYihiYXNlNjQpKTtcclxuICAgICAgICB9IGVsc2UgcmV0dXJuIHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNhdmVUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuID0gdG9rZW47XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnU2F2ZWQgdG9rZW46Jywkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0VG9rZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlzQXV0aGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oKTtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VKd3QodG9rZW4pO1xyXG4gICAgICAgICAgICB2YXIgbm90RXhwaXJlZCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSA8PSBwYXJhbXMuZXhwO1xyXG4gICAgICAgICAgICBpZiAoIW5vdEV4cGlyZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vdEV4cGlyZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGVsZXRlICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBleHBvc2UgdXNlciBhcyBhbiBvYmplY3RcclxuICAgIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUp3dCh0aGlzLmdldFRva2VuKCkpXHJcbiAgICB9O1xyXG59XSk7IiwiLy9lZGl0IGNvcnBvcmF0aW9uIG1vZGFsIHRlbXBsYXRlXHJcbmFwcC5jb250cm9sbGVyKCdlZGl0Q29ycEN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWwnLCAnJGxvZycsICdSZXN1bHRTZXJ2aWNlJywgJyRodHRwJywgJ3ZhbGlkU2VydmljZScsICdkYXRlU2VydmljZScsICd0b2FzdHInLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwLCB2YWxpZFNlcnZpY2UsIGRhdGVTZXJ2aWNlLCB0b2FzdHIpIHtcclxuXHJcblx0Ly8gc2V0cyB2YWxpZGF0aW9uIGZyb20gc2VydmljZSBmb3IgZG9tIGNhbGxzXHJcblx0JHNjb3BlLnZhbGlkYXRlSW5wdXQgPSB2YWxpZFNlcnZpY2UudmFsaWRhdGVJbnB1dDtcclxuXHQvL3NlbmRzIHRoZSBjb21wYW5pZXMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxyXG5cdCRzY29wZS5jb21wYW5pZXMgPSBSZXN1bHRTZXJ2aWNlLmNvbXBhbmllcztcclxuXHQkc2NvcGUuY29ycCA9IHtcclxuXHRcdGluZm86IHt9LFxyXG5cdFx0Y29udGFjdDoge30sXHJcblx0XHRkb25hdGlvbnM6IFtdXHJcblx0fTtcclxuXHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcclxuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xyXG5cclxuXHQkc2NvcGUuY2xlYXJDb3JwID0gZnVuY3Rpb24gKGZvcm1zQXJyYXkpIHtcclxuXHRcdHRvYXN0ci5lcnJvcignQ2FuY2VsbGVkJyk7XHJcblx0XHQkc2NvcGUuY29ycCA9IHtcclxuXHRcdFx0aW5mbzp7fSxcclxuXHRcdFx0Y29udGFjdDp7fSxcclxuXHRcdFx0ZG9uYXRpb25zOltdXHJcblx0XHR9O1xyXG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XHJcblx0XHRmb3Jtc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0JCgnIycrIHYgKycgLmpzLXZhbGlkYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJCh0aGlzKS5kYXRhKCdwbGFjZWhvbGRlcicpKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzaXplLCBpZCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ2NvcnAgY2FsbCcsIGlkKTtcclxuXHRcdHJldHVybiAkaHR0cCh7XHJcblx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdHVybDogJy4uL2NvcnBvcmF0aW9uJyxcclxuXHRcdFx0cGFyYW1zOiB7aWQ6IGlkfVxyXG5cdFx0fSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcblx0XHRcdHJlc3BvbnNlLmRhdGEuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS5mcm9tREIodi5kYXRlKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHQkc2NvcGUuY29ycCA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG5cdFx0XHRcdGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxyXG5cdFx0XHRcdHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9lZGl0Y29ycC5odG1sJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxyXG5cdFx0XHRcdHNpemU6IHNpemUsXHJcblx0XHRcdFx0c2NvcGU6ICRzY29wZSxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJHNjb3BlLmNvcnA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xyXG5cdFx0XHRcdCRzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkSXRlbTtcclxuXHRcdFx0fSwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdCRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLnRvZ2dsZUFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9ICEkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQ7XHJcblx0fTtcclxuXHJcblx0Ly8gc2F2ZSBjb3JwXHJcblx0JHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcIlNhdmUgc3VibWl0dGVkXCIsICRzY29wZS5jb3JwKTtcclxuXHRcdC8vYWxlcnQoXCJTdWJtaXR0ZWRcIik7XHJcblxyXG5cdFx0Ly8gY2hlY2sgZm9yIGRvbmF0aW9uLCBydW4gdG9EQiBmb3JtYXR0aW5nIGJlZm9yZSBzZW5kaW5nXHJcblx0XHRpZigkc2NvcGUuY29ycC5kb25hdGlvbnMubGVuZ3RoKSB7XHJcblx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcblx0XHRcdFx0YVtpXS5kYXRlID0gZGF0ZVNlcnZpY2UudG9EQih2LmRhdGUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBpZiBoYXMgaWQsIHRoZW4gcHV0XHJcblx0XHRpZighJHNjb3BlLmNvcnAuaWQpIHtcclxuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJBZGRDb3JwSW5mb0Zvcm1cIiwgXCJBZGRDb3JwQ29udGFjdEZvcm1cIl0pKSB7XHJcblx0XHRcdFx0JGh0dHAoe1xyXG5cdFx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdFx0XHR1cmw6ICcvY29ycG9yYXRpb24nLFxyXG5cdFx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxyXG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQb3N0ZWQgY29ycCwgZ290IGlkIFwiLCByZXMuZGF0YSk7XHJcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pZCA9IHJlcy5kYXRhLmlkO1xyXG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaW5mbyA9IChyZXMuZGF0YS5pbmZvKSA/IHJlcy5kYXRhLmluZm8gOiB7fTtcclxuXHRcdFx0XHRcdCRzY29wZS5jb250YWN0ID0gKHJlcy5kYXRhLmNvbnRhY3QpID8gcmVzLmRhdGEuY29udGFjdCA6IHt9O1xyXG5cdFx0XHRcdFx0Ly8gaW5pdGlhbGl6ZSBkb25hdGlvbnMgaWYgdGhlcmUgYXJlIGFueVxyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLmNvcnAuZG9uYXRpb25zID0gW107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkc2NvcGUuZG9uYXRpb25zID0gKHJlcy5kYXRhLmRvbmF0aW9ucykgPyByZXMuZGF0YS5kb25hdGlvbnMgOiB7fTtcclxuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdDb3Jwb3JhdGlvbiBhZGRlZCEnKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBhZGQgY29ycG9yYXRpb24nKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdHRvYXN0ci5lcnJvcignVW5hdXRob3JpemVkIGNoYXJhY3RlcicpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQWRkIGNvcnAgaW5wdXQgdGVzdHMgZmFpbGVkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZSB7XHJcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiRWRpdENvcnBJbmZvRm9ybVwiLCBcIkVkaXRDb3JwQ29udGFjdEZvcm1cIl0pKSB7XHJcblx0XHRcdFx0Ly8gaW5zZXJ0IGNvcnAgLSBoYXMgbm8gaWRcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcInVwZGF0ZSBjb3JwXCIsICRzY29wZS5jb3JwKTtcclxuXHRcdFx0XHQkaHR0cCh7XHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxyXG5cdFx0XHRcdFx0dXJsOiAnL2NvcnBvcmF0aW9uJyxcclxuXHRcdFx0XHRcdGRhdGE6IHtjb3JwOiAkc2NvcGUuY29ycH1cclxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGNvcnAsIGdvdCBpZCBcIiwgcmVzLmRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XHJcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pbmZvID0gKHJlcy5kYXRhLmluZm8pID8gcmVzLmRhdGEuaW5mbyA6IHt9O1xyXG5cdFx0XHRcdFx0JHNjb3BlLmNvbnRhY3QgPSAocmVzLmRhdGEuY29udGFjdCkgPyByZXMuZGF0YS5jb250YWN0IDoge307XHJcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmNvcnAuZG9uYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdCRzY29wZS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IHt9O1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJFZGl0IGNvcnAgaW5wdXQgdGVzdHMgZmFpbGVkXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gYWRkcyBkb25hdGlvbiB0byBmYW1pbHkgb2JqZWN0XHJcblx0JHNjb3BlLmFkZERvbmF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Ly8gcmVnZXggY2hlY2sgbmVlZGVkIGZvciBhdXRvIGFkZCBpZiBjbGljayBzYXZlIGluc3RlYWQgb2YgYWRkIGZpcnN0XHJcblx0XHRpZigvXlswLTldKyguWzAtOV17MCwyfSk/JC8udGVzdCgkc2NvcGUubmV3RG9uYXRpb24uYW1vdW50KSkge1xyXG5cdFx0XHQvL3ZhciB0ZW1wID0gJHNjb3BlLm5ld0RvbmF0aW9uO1xyXG5cdFx0XHQvL3RlbXAuZGF0ZSA9IGRhdGVTZXJ2aWNlLnRvREIodGVtcC5kYXRlKTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJkb25hdGlvblwiLCAkc2NvcGUubmV3RG9uYXRpb24pO1xyXG5cdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMucHVzaCgkc2NvcGUubmV3RG9uYXRpb24pO1xyXG5cdFx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJhZGRlZCBkb25hdGlvblwiLCAkc2NvcGUuY29ycC5kb25hdGlvbnMpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG59XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ2NyZWF0ZUxpc3RTZWFyY2gnLCBbJyRzY29wZScsICckaHR0cCcsICdDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgJ25ld0NvbnRhY3RMaXN0RGF0YScsICd0b2FzdHInLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBDb250YWN0TGlzdERhdGFTZXJ2aWNlLG5ld0NvbnRhY3RMaXN0RGF0YSwgdG9hc3RyLCAkcm9vdFNjb3BlKSB7XHJcbiAgICAkc2NvcGUudHlwZSA9e307XHJcbiAgICAkc2NvcGUuYWdlPXt9O1xyXG4gICAgJHNjb3BlLnppcD17fTtcclxuXHQvLyBpbmNsdWRlIGxpc3QgbmVlZHMgdG8gYmUgd2l0aGluIGFuIG9iamVjdCBkdWUgdG8gdGhlIGNoZWNrYm94ZXMgYmVpbmcgaW4gYSB0YWJsZVxyXG5cdCRzY29wZS5lbWFpbHMgPSB7fTtcclxuICAgICRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBbXTtcclxuXHQkc2NvcGUuaW5jbHVkZWRFbWFpbHMgPSBbXTtcclxuXHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgPSA1MDtcclxuXHQkc2NvcGUudG90YWxSZXN1bHRzID0gMDtcclxuICAgIC8vJHJvb3RTY29wZS5oaWRlID0gdHJ1ZTtcclxuXHJcblxyXG5cclxuICAgICRzY29wZS5lbWFpbExpc3QgPSBbIF07XHJcbiAgICAkc2NvcGUuc2VhcmNoTGlzdEJ0biA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdCRzY29wZS5lbWFpbExpc3QgPSBbXTtcclxuXHJcblxyXG4gICAgICAgIC8vVEhJUyBXT1JLUyAgLS0gd2lsbCBzZWFyY2ggYnkgemlwXHJcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICd6aXBDaycpIHtcclxuXHJcbiAgICAgICAgICAgIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCd6aXAnLCAkc2NvcGUuemlwLmRhdGEpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xyXG5cdFx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJHNjb3BlLmVtYWlsTGlzdCk7XHJcblx0XHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XHJcblx0XHRcdFx0fSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy9USElTIFdPUktTIC0gd2lsbCBzZWFyY2ggYnkgYWdlXHJcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdhZ2VDaycpIHtcclxuICAgICAgICAgICAgdmFyIGFnZSA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdhZ2UnLCAkc2NvcGUuYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICBhZ2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xyXG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcclxuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XHJcblx0XHRcdH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9USElTIFdPUktTIC0tZ2V0IGFsbCBmYW1pbGllcyBpZiBmYW0gaXMgdHJ1ZVxyXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnZmFtJykge1xyXG4gICAgICAgICAgICB2YXIgZmFtID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2ZhbWlseScsICcnKTtcclxuICAgICAgICAgICAgZmFtLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xyXG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xyXG5cdFx0XHR9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZ2V0IGFsbCBjb3JwIGlmIGNvcnAgaXMgdHJ1ZVxyXG4gICAgICAgIGlmICgkc2NvcGUudHlwZSA9PSAnY29ycCcpIHtcclxuICAgICAgICAgICAgdmFyIGNvbXAgPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnY29tcGFueScsICcnKTtcclxuICAgICAgICAgICAgY29tcC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcclxuXHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2VtcHR5IHRoZSBzZWFyY2ggYm94XHJcbiAgICAgICAkc2NvcGUudHlwZT17fTtcclxuICAgICAgICAkc2NvcGUuYWdlPXt9O1xyXG4gICAgICAgICRzY29wZS56aXA9e307XHJcblxyXG4gICAgfTtcclxuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vYWxlcnQoJ3dvcmtpbmcnKTtcclxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzKTtcclxuICAgICAgICBpZihuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzKSkge1xyXG5cdFx0XHR0b2FzdHIuc3VjY2VzcygnU3VjY2Vzc2Z1bGx5IGRlcGxveWVkIGNvbnRhY3QgbGlzdC4nKTtcclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gZGVwbG95IGNvbnRhY3QgbGlzdC4nKTtcclxuXHRcdH1cclxuICB9O1xyXG5cclxuXHQkc2NvcGUubG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgKz0gNTA7XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLnNob3dBbGwgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHQkc2NvcGUudG90YWxEaXNwbGF5ZWQgPSAkc2NvcGUudG90YWxSZXN1bHRzO1xyXG5cdH07XHJcblxyXG5cdCRzY29wZS5jaGVja0FsbCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgJGJ1dHRvbiA9IGFuZ3VsYXIuZWxlbWVudChldmVudC50YXJnZXQpO1xyXG5cdFx0aWYoJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscy5sZW5ndGggPT0gJHNjb3BlLnRvdGFsUmVzdWx0cykge1xyXG5cdFx0XHQkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzID0gW107XHJcblx0XHRcdCRidXR0b24udmFsKFwiQ2hlY2sgQWxsXCIpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmVtYWlsTGlzdCk7XHJcblx0XHRcdCRidXR0b24udmFsKFwiVW5jaGVjayBBbGxcIik7XHJcblx0XHR9XHJcblx0fTtcclxufV0pO1xyXG5cclxuXHJcbiIsImFwcC5mYWN0b3J5KCdDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlRGF0YUNhbGwodHlwZSwgcGFzc2VkRGF0YSkge1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgaW4gdGhlIG1ha2UgZGF0YSBjYWxsJywgdHlwZSwgcGFzc2VkRGF0YSk7XHJcbiAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICB1cmw6ICcuLi9jcmVhdGVNYWlsTGlzdCcsXHJcbiAgICAgICAgICAgIHBhcmFtczoge3R5cGU6IHR5cGUsIHNlYXJjaDogcGFzc2VkRGF0YX1cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgIG1ha2VEYXRhQ2FsbDogbWFrZURhdGFDYWxsXHJcbiAgICB9O1xyXG5cclxuXHJcbn1dKTsiLCJhcHAuc2VydmljZSgnZGF0ZVNlcnZpY2UnLCBbJ01vbWVudEpTJywgZnVuY3Rpb24gKG1vbWVudCkge1xyXG5cdHZhciBkYkZvcm1hdCA9IFwiWVlZWS1NTS1ERFwiO1xyXG5cdHZhciB1aUZvcm1hdCA9IFwiTS9EL1lZWVlcIjtcclxuXHJcblx0dmFyIHRvRGJGb3JtYXQgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG5cdFx0cmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoZGJGb3JtYXQpO1xyXG5cdH07XHJcblxyXG5cdHZhciBmcm9tRGJGb3JtYXQgPSBmdW5jdGlvbiAoZGF0ZSkge1xyXG5cdFx0cmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQodWlGb3JtYXQpO1xyXG5cdH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b0RCOiB0b0RiRm9ybWF0LFxyXG5cdFx0ZnJvbURCOiBmcm9tRGJGb3JtYXRcclxuICAgIH07XHJcbn1dKTsiLCIvL2VkaXQgZmFtaWx5IG1vZGFsIHRlbXBsYXRlXHJcbmFwcC5jb250cm9sbGVyKCdlZGl0RmFtaWx5Q3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCAndmFsaWRTZXJ2aWNlJywgJ3RvYXN0cicsJ2RhdGVTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsLCAkbG9nLCBSZXN1bHRTZXJ2aWNlLCAkaHR0cCwgdmFsaWRTZXJ2aWNlLCB0b2FzdHIsIGRhdGVTZXJ2aWNlKSB7XHJcblx0Ly8gc2V0cyB2YWxpZGF0aW9uIGZyb20gc2VydmljZSBmb3IgZG9tIGNhbGxzXHJcblx0JHNjb3BlLnZhbGlkYXRlSW5wdXQgPSB2YWxpZFNlcnZpY2UudmFsaWRhdGVJbnB1dDtcclxuXHQvL3NlbmRzIHRoZSBhZHVsdHMgYW5kIGtpZHMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxyXG5cdCRzY29wZS5hZHVsdHMgPSBSZXN1bHRTZXJ2aWNlLmFkdWx0cztcclxuXHQkc2NvcGUua2lkcyA9IFJlc3VsdFNlcnZpY2Uua2lkcztcclxuXHQkc2NvcGUuZmFtaWx5ID0ge1xyXG5cdFx0YWR1bHRPbmU6IHt9LFxyXG5cdFx0YWR1bHRUd286IHt9LFxyXG5cdFx0ZW1lcmdlbmN5OiB7fSxcclxuXHRcdGNoaWxkcmVuOiBbXSxcclxuXHRcdGRvbmF0aW9uczogW11cclxuXHR9O1xyXG5cdCRzY29wZS5uZXdDaGlsZCA9IHt9O1xyXG5cdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xyXG5cclxuXHQkc2NvcGUuY2xlYXJGYW1pbHkgPSBmdW5jdGlvbiAoZm9ybXNBcnJheSkge1xyXG5cdFx0dG9hc3RyLmVycm9yKCdDYW5jZWxsZWQnKTtcclxuXHRcdCRzY29wZS5mYW1pbHkgPSB7XHJcblx0XHRcdGFkdWx0T25lOiB7fSxcclxuXHRcdFx0YWR1bHRUd286IHt9LFxyXG5cdFx0XHRlbWVyZ2VuY3k6IHt9LFxyXG5cdFx0XHRjaGlsZHJlbjogW10sXHJcblx0XHRcdGRvbmF0aW9uczogW11cclxuXHRcdH07XHJcblx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcclxuXHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xyXG5cdFx0Zm9ybXNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XHJcblx0XHRcdCQoJyMnKyB2ICsnIC5qcy12YWxpZGF0ZScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdCQodGhpcykucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICQodGhpcykuZGF0YSgncGxhY2Vob2xkZXInKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xyXG5cdCRzY29wZS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIGlkKSB7XHJcblx0XHRjb25zb2xlLmxvZygnZmFtaWx5IGNhbGwnLCBpZCk7XHJcblx0XHRyZXR1cm4gJGh0dHAoe1xyXG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHR1cmw6ICcuLi9mYW1pbHknLFxyXG5cdFx0XHRwYXJhbXM6IHtpZDogaWR9XHJcblx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcclxuXHRcdFx0cmVzcG9uc2UuZGF0YS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJyZWZvcm1hdHRlZFwiLCBkYXRlU2VydmljZS5mcm9tREIoYVtpXS5iaXJ0aGRhdGUpKTtcclxuXHRcdFx0XHRhW2ldLmJpcnRoZGF0ZSA9IGRhdGVTZXJ2aWNlLmZyb21EQih2LmJpcnRoZGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXNwb25zZS5kYXRhLmRvbmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcblx0XHRcdFx0YVtpXS5kYXRlID0gZGF0ZVNlcnZpY2UuZnJvbURCKHYuZGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQkc2NvcGUuZmFtaWx5ID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0YW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwcml2YXRlL2VkaXRmYW1pbHkuaHRtbCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ01vZGFsSW5zdGFuY2VDdHJsJyxcclxuXHRcdFx0XHRzaXplOiBzaXplLFxyXG5cdFx0XHRcdHNjb3BlOiAkc2NvcGUsXHJcblx0XHRcdFx0cmVzb2x2ZToge1xyXG5cdFx0XHRcdFx0aXRlbXM6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICRzY29wZS5mYW1pbHk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xyXG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQkc2NvcGUudG9nZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gISRzY29wZS5hbmltYXRpb25zRW5hYmxlZDtcclxuXHR9O1xyXG5cclxuXHQvLyBzYXZlIGZhbWlseVxyXG5cdCRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJTYXZlIHN1Ym1pdHRlZFwiLCAkc2NvcGUuZmFtaWx5KTtcclxuXHJcblx0XHQvLyBjaGVjayBmb3IgY2hpbGRyZW4sIHJ1biB0b0RCIGZvcm1hdHRpbmcgYmVmb3JlIHNlbmRpbmdcclxuXHRcdGlmKCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcblx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xyXG5cdFx0XHRcdGFbaV0uYmlydGhkYXRlID0gZGF0ZVNlcnZpY2UudG9EQih2LmJpcnRoZGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNoZWNrIGZvciBkb25hdGlvbiwgcnVuIHRvREIgZm9ybWF0dGluZyBiZWZvcmUgc2VuZGluZ1xyXG5cdFx0aWYoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XHJcblx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHYuZGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnNvbGUubG9nKFwiU2F2aW5nIGZhbWlseSwgYWZ0ZXIgdG9EQiBiaXJ0aGRhdGVzXCIsICRzY29wZS5mYW1pbHkpO1xyXG5cclxuXHRcdC8vIGlmIGhhcyBpZCwgdGhlbiBwb3N0XHJcblxyXG5cdFx0aWYoISRzY29wZS5mYW1pbHkuaWQpIHtcclxuXHJcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiQWRkRmFtSW5mb0Zvcm1cIiwgXCJBZGRGYW1FbWVyRm9ybVwiXSkpIHtcclxuXHRcdFx0XHQkaHR0cCh7XHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxyXG5cdFx0XHRcdFx0ZGF0YToge2ZhbWlseTogJHNjb3BlLmZhbWlseX1cclxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUG9zdGVkIGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmlkID0gcmVzLmRhdGEuaWQ7XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0T25lID0gKHJlcy5kYXRhLmFkdWx0T25lKSA/IHJlcy5kYXRhLmFkdWx0T25lIDoge307XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmVtZXJnZW5jeSA9IChyZXMuZGF0YS5lbWVyZ2VuY3kpID8gcmVzLmRhdGEuZW1lcmdlbmN5IDoge307XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IChyZXMuZGF0YS5jaGlsZHJlbikgPyByZXMuZGF0YS5jaGlsZHJlbiA6IFtdO1xyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xyXG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0ZhbWlseSBzYXZlZCEnKTtcclxuXHRcdFx0XHR9LCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBhZGQgZmFtaWx5Jyk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ1VuYXV0aG9yaXplZCBjaGFyYWN0ZXInKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkFkZCBmYW1pbHkgZmFpbGVkIGlucHV0IHRlc3RzXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZSB7XHJcblx0XHRcdGlmKHZhbGlkU2VydmljZS52YWxpZGF0ZUZvcm0oW1wiRWRpdEZhbUluZm9Gb3JtXCIsIFwiRWRpdEZhbUVtZXJGb3JtXCJdKSkge1xyXG5cdFx0XHRcdC8vIHVwZGF0ZSBmYW1pbHkgLSBoYXMgbm8gaWRcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcInVwZGF0ZSBmYW1pbHlcIiwgJHNjb3BlLmZhbWlseSk7XHJcblx0XHRcdFx0JGh0dHAoe1xyXG5cdFx0XHRcdFx0bWV0aG9kOiAnUFVUJyxcclxuXHRcdFx0XHRcdHVybDogJy9mYW1pbHknLFxyXG5cdFx0XHRcdFx0ZGF0YToge2ZhbWlseTogJHNjb3BlLmZhbWlseX1cclxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUHV0IGZhbWlseSwgZ290IGlkIFwiLCByZXMuZGF0YSk7XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmlkID0gcmVzLmRhdGEuaWQ7XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0T25lID0gKHJlcy5kYXRhLmFkdWx0T25lKSA/IHJlcy5kYXRhLmFkdWx0T25lIDoge307XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmFkdWx0VHdvID0gKHJlcy5kYXRhLmFkdWx0VHdvKSA/IHJlcy5kYXRhLmFkdWx0VHdvIDoge307XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmVtZXJnZW5jeSA9IChyZXMuZGF0YS5lbWVyZ2VuY3kpID8gcmVzLmRhdGEuZW1lcmdlbmN5IDoge307XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbiA9IChyZXMuZGF0YS5jaGlsZHJlbikgPyByZXMuZGF0YS5jaGlsZHJlbiA6IFtdO1xyXG5cdFx0XHRcdFx0aWYgKCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IFtdO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJFZGl0IGZhbWlseSBmYWlsZWQgaW5wdXQgdGVzdHNcIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBmb3IgYXBwZW5kaW5nIGNoaWxkcmVuIHRvIG1vZGVsIGJlZm9yZSBzYXZpbmcgbmV3IGZhbWlseVxyXG5cdCRzY29wZS5hZGRDaGlsZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vIGV4aXN0cyBjaGVjayBuZWVkZWQgZm9yIGF1dG8gYWRkIGlmIGNsaWNrIHNhdmUgaW5zdGVhZCBvZiBhZGQgZmlyc3RcclxuXHRcdGlmKCRzY29wZS5uZXdDaGlsZC5maXJzdE5hbWUpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJjaGlsZCBhZGRlZFwiLCAkc2NvcGUubmV3Q2hpbGQsICRzY29wZS5mYW1pbHkuY2hpbGRyZW4pO1xyXG5cdFx0XHQvLyBpZiB0cnVlLCB0aGVuIHVwZGF0ZSB0aGF0IGluZGV4XHJcblx0XHRcdGlmKCRzY29wZS5lZGl0aW5nQ2hpbGQpIHtcclxuXHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuWyRzY29wZS5lZGl0aW5nQ2hpbGRdID0gJHNjb3BlLm5ld0NoaWxkO1xyXG5cdFx0XHRcdCRzY29wZS5lZGl0aW5nQ2hpbGQgPSBmYWxzZTtcclxuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnQ2hpbGQgdXBkYXRlZCEnKTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdC8vIGVsc2UgcHVzaCB0byBhcnJheVxyXG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW4ucHVzaCgkc2NvcGUubmV3Q2hpbGQpO1xyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdDaGlsZCBhZGRlZCEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7fTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBlZGl0IGNoaWxkIG9uIHRoZSBhZGQgY2hpbGRyZW4gdGFiIG9mIGFkZCBmYW1pbHlcclxuXHQkc2NvcGUuZWRpdENoaWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcblx0XHQvLyBzYXZlIGluZGV4IG9mIGNoaWxkIGVkaXRpbmdcclxuXHRcdCRzY29wZS5lZGl0aW5nQ2hpbGQgPSBpbmRleDtcclxuXHRcdCRzY29wZS5uZXdDaGlsZCA9ICRzY29wZS5mYW1pbHkuY2hpbGRyZW5baW5kZXhdO1xyXG5cdH07XHJcblxyXG5cdCRzY29wZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJpbiByZW1vdmUgY2hpbGQgaW5kZXhcIiwgaW5kZXgsIFwiIGVkaXQgXCIsICRzY29wZS5lZGl0aW5nQ2hpbGQpO1xyXG5cdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0aWYoaW5kZXggPT0gJHNjb3BlLmVkaXRpbmdDaGlsZCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcImVkaXQgbWF0Y2hcIik7XHJcblx0XHRcdCRzY29wZS5jbGVhckNoaWxkKCk7XHJcblx0XHR9ZWxzZSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwibm8gZWRpdCBtYXRjaFwiKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBjbGVhcnMgdGV4dCBib3hlcyBpbiBhZGQgZmFtaWx5LT5jaGlsZHJlbiB0YWJcclxuXHQkc2NvcGUuY2xlYXJDaGlsZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiaW4gY2xlYXIgY2hpbGRcIik7XHJcblx0XHQkc2NvcGUubmV3Q2hpbGQgPSB7XHJcblx0XHRcdGZpcnN0TmFtZTogJycsXHJcblx0XHRcdGxhc3ROYW1lOiAnJyxcclxuXHRcdFx0YmlydGhkYXRlOiAnJyxcclxuXHRcdFx0c2Nob29sOiAnJyxcclxuXHRcdFx0bm90ZXM6ICcnXHJcblx0XHR9O1xyXG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGZhbHNlO1xyXG5cdH07XHJcblxyXG5cclxuXHQvLyBhZGRzIGRvbmF0aW9uIHRvIGZhbWlseSBvYmplY3RcclxuXHJcbi8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxyXG5cdCRzY29wZS5hZGREb25hdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vY29uc29sZS5sb2coXCJhZGQgZG9uYXRpb25cIiwgJHNjb3BlLm5ld0RvbmF0aW9uKTtcclxuXHRcdC8vIHJlZ2V4IGNoZWNrIG5lZWRlZCBmb3IgYXV0byBhZGQgaWYgY2xpY2sgc2F2ZSBpbnN0ZWFkIG9mIGFkZCBmaXJzdFxyXG5cdFx0aWYoL15bMC05XSsoLlswLTldezAsMn0pPyQvLnRlc3QoJHNjb3BlLm5ld0RvbmF0aW9uLmFtb3VudCkpIHtcclxuXHRcdFx0Ly92YXIgdGVtcCA9ICRzY29wZS5uZXdEb25hdGlvbjtcclxuXHRcdFx0Ly90ZW1wLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHRlbXAuZGF0ZSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiYWRkIGRvbmF0aW9uXCIsICRzY29wZS5uZXdEb25hdGlvbik7XHJcblx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zLnB1c2goJHNjb3BlLm5ld0RvbmF0aW9uKTtcclxuXHRcdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiYWRkZWQgZG9uYXRpb25cIiwgJHNjb3BlLmZhbWlseS5kb25hdGlvbnMpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vLy8gcHJldmVudCBhY2NpZGVudGFsIGJhY2tzXHJcblx0Ly8kc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oIGV2ZW50LCBvbGRVcmwgKSB7XHJcblx0Ly9cdGNvbnNvbGUubG9nKFwib2xkIHVybDogXCIsIG9sZFVybCk7XHJcblx0Ly9cdGlmKC8oYWRkZmFtaWx5KS8udGVzdChvbGRVcmwpKSB7XHJcblx0Ly9cdFx0dmFyIGFuc3dlciA9IGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlP1wiKTtcclxuXHQvL1x0XHRpZiAoIWFuc3dlcikge1xyXG5cdC8vXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHQvL1x0XHR9XHJcblx0Ly9cdH1cclxuXHQvL30pO1xyXG5cclxufV0pOyIsIi8vY29udHJvbGxlcnMgZm9yIGxvZ2luXHJcbmFwcC5jb250cm9sbGVyKCdsb2dpbkN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsICdhdXRoU2VydmljZScsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsICd0b2FzdHInLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBhdXRoU2VydmljZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCB0b2FzdHIpe1xyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJGh0dHAucG9zdCgnL2xvZ2luJywgJHNjb3BlLmZvcm0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgYXV0aFNlcnZpY2Uuc2F2ZVRva2VuKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvc2VhcmNoXCIpO1xyXG4gICAgICAgICAgICB9LGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ2luY29ycmVjdCB1c2VybmFtZSBvciBwYXNzd29yZCcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfTtcclxufV0pO1xyXG4iLCJcclxuLy9UaGlzIHNob3VsZCBnZXQgdGhlIHNlYXJjaCBpdGVtXHJcbmFwcC5jb250cm9sbGVyKCdzZWFyY2hGdW5jdGlvbicsIFsnJHNjb3BlJywgJyRodHRwJywgJ1Jlc3VsdFNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgUmVzdWx0U2VydmljZSkge1xyXG4gICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcclxuXHJcbiAgICAkc2NvcGUuc2VhcmNoQnRuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcclxuICAgICAgIFJlc3VsdFNlcnZpY2UubWFrZURhdGFDYWxsKCRzY29wZS5mb3JtSW5wdXQuZGF0YSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgdGhlIGlucHV0IHRleHQnLCAkc2NvcGUuZm9ybUlucHV0KTtcclxuICAgICAgICAvL2VtcHR5cyB0aGUgc2VhcmNoIGJveFxyXG4gICAgICAgICRzY29wZS5mb3JtSW5wdXQ9e307XHJcbiAgICB9O1xyXG5cclxufV0pO1xyXG4iLCIvL1RoaXMgc2VydmljZSBzaG91bGQgcGFzcyBkYXRhIGJldHdlZW4gY29udHJvbGxlcnNcclxuYXBwLmZhY3RvcnkoJ1Jlc3VsdFNlcnZpY2UnLCBbJyRodHRwJyxmdW5jdGlvbigkaHR0cCkge1xyXG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgIHZhciBhZHVsdHMgPSBbXTtcclxuICAgIHZhciBjb21wYW5pZXMgPSBbXTtcclxuICAgIHZhciBraWRzID0gW107XHJcblxyXG4gICAgdmFyIG1ha2VEYXRhQ2FsbCA9IGZ1bmN0aW9uKHBhc3NlZERhdGEpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICB1cmw6ICcuLi9zZWFyY2gnLFxyXG4gICAgICAgICAgICBwYXJhbXM6e3NlYXJjaDpwYXNzZWREYXRhfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICBnZXRDb21wYW5pZXMocmVzdWx0cyk7XHJcbiAgICAgICAgICAgIGdldEtpZHMocmVzdWx0cyk7XHJcbiAgICAgICAgICAgIGdldEFkdWx0cyhyZXN1bHRzKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2YXIgZ2V0Q29tcGFuaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICB2YXIgZ2V0RWxlbWVudDEgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgICAgICBjb21wYW5pZXMuc3BsaWNlKDAsY29tcGFuaWVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdjb21wYW55JylcclxuICAgICAgICAgICAgICAgIGNvbXBhbmllcy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQxKGFycmF5KTtcclxuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBnZXRFbGVtZW50MScsY29tcGFuaWVzKTtcclxuICAgICAgICByZXR1cm4gY29tcGFuaWVzXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXRBZHVsdHMgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgIHZhciBnZXRFbGVtZW50MiA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICAgICAgICAgIGFkdWx0cy5zcGxpY2UoMCxhZHVsdHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2FkdWx0JylcclxuICAgICAgICAgICAgICAgICAgICBhZHVsdHMucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGdldEVsZW1lbnQyKGFycmF5KTtcclxuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiBnZXRFbGVtZW50MicsIGFkdWx0cyk7XHJcbiAgICAgICAgcmV0dXJuIGFkdWx0c1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ2V0S2lkcyA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIGdldEVsZW1lbnQzID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICAgICAga2lkcy5zcGxpY2UoMCxraWRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09ICdjaGlsZCcpXHJcbiAgICAgICAgICAgICAgICAgICAga2lkcy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZ2V0RWxlbWVudDMoYXJyYXkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnRzMycsIGtpZHMpO1xyXG4gICAgICAgIHJldHVybiBraWRzXHJcbiAgICB9O1xyXG5cclxuICAgIC8vcHVibGljXHJcbiAgICB2YXIgcHVibGljQXBpID0ge1xyXG4gICAgICAgIGdldEtpZHM6IGdldEtpZHMsXHJcbiAgICAgICAgZ2V0QWR1bHRzOiBnZXRBZHVsdHMsXHJcbiAgICAgICAgZ2V0Q29tcGFuaWVzOiBnZXRDb21wYW5pZXMsXHJcbiAgICAgICAgbWFrZURhdGFDYWxsOiBtYWtlRGF0YUNhbGwsXHJcbiAgICAgICAgcmVzdWx0czogcmVzdWx0cyxcclxuICAgICAgICBjb21wYW5pZXM6IGNvbXBhbmllcyxcclxuICAgICAgICBhZHVsdHM6IGFkdWx0cyxcclxuICAgICAgICBraWRzOiBraWRzXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHB1YmxpY0FwaTtcclxufV0pOyIsIi8vIFBsZWFzZSBub3RlIHRoYXQgJG1vZGFsSW5zdGFuY2UgcmVwcmVzZW50cyBhIG1vZGFsIHdpbmRvdyAoaW5zdGFuY2UpIGRlcGVuZGVuY3kuXHJcbi8vIEl0IGlzIG5vdCB0aGUgc2FtZSBhcyB0aGUgJHVpYk1vZGFsIHNlcnZpY2UgdXNlZCBhYm92ZS5cclxuXHJcbi8vbmVlZGVkIGZvciBtb2RhbD8/IHByZXR0eSBzdXJlXHJcbmFwcC5jb250cm9sbGVyKCdNb2RhbEluc3RhbmNlQ3RybCcsWyckc2NvcGUnLCckbW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlKSB7XHJcblxyXG4gICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5zZWxlY3RlZC5pdGVtKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgIH07XHJcbn1dKTsiLCJhcHAuY29udHJvbGxlcignbmF2Q3RybCcsIFsnYXV0aFNlcnZpY2UnLCckc2NvcGUnLCckcm9vdFNjb3BlJywnJGxvY2F0aW9uJywgZnVuY3Rpb24oYXV0aFNlcnZpY2UsICRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uKXtcclxuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcclxuXHJcbiAgICBpZigkcm9vdFNjb3BlLnVzZXIgJiYgJHJvb3RTY29wZS51c2VyLnVzZXJuYW1lKXtcclxuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2hvbWUnKTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBhdXRoU2VydmljZS5sb2dvdXQoKTtcclxuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xyXG4gICAgfVxyXG59XSk7XHJcbiIsIi8vIEFqYXggZm9yIGNyZWF0aW5nIHRoZSBjb250YWN0IGxpc3QgaW4gY29uc3RhbnQgY29udGFjdFxyXG5hcHAuY29udHJvbGxlcignbmV3Q29udGFjdExpc3RDb250cm9sbGVyJyxbJ25ld0NvbnRhY3RMaXN0RGF0YScsJyRzY29wZScsICckcm9vdFNjb3BlJywgJ3RvYXN0cicsIGZ1bmN0aW9uKG5ld0NvbnRhY3RMaXN0RGF0YSwgJHNjb3BlLCAkcm9vdFNjb3BlLCB0b2FzdHIpIHtcclxuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XHJcblxyXG4gICAgJHNjb3BlLmhpZGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdoaWRlJyk7XHJcbiAgICAgICAgJHJvb3RTY29wZS5oaWRlID0gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmxpc3RuYW1lID0ge307XHJcblxyXG4gICAgJHNjb3BlLmNyZWF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIGxpc3Q6IFwiICsgJHNjb3BlLmxpc3RuYW1lLmlucHV0KTtcclxuICAgICAgICAvL3Bhc3NlcyBsaXN0IG5hbWUgc2VydmljZVxyXG4gICAgICAgIG5ld0NvbnRhY3RMaXN0RGF0YS5wb3N0TGlzdCgkc2NvcGUubGlzdG5hbWUuaW5wdXQsIGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuXHRcdFx0aWYoc3RhdHVzID09PSB0cnVlKSB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnbGlzdCAjJyxuZXdDb250YWN0TGlzdERhdGEubGlzdE51bSk7XHJcblx0XHRcdFx0JHNjb3BlLmxpc3RuYW1lPXt9O1xyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdTdWNjZXNzZnVsbHkgY3JlYXRlZCBsaXN0Jyk7XHJcblx0XHRcdFx0JHNjb3BlLmhpZGUoKTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIGNyZWF0ZSBsaXN0XCIpO1xyXG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBsaXN0Jyk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHJcbiAgICB9O1xyXG59XSk7XHJcblxyXG5cclxuIiwiXHJcbmFwcC5zZXJ2aWNlKCduZXdDb250YWN0TGlzdERhdGEnLCBbJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLFxyXG4gICAgZnVuY3Rpb24gKENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsICRodHRwLCAkdGltZW91dCkge1xyXG4gICAgICAgIHZhciBsaXN0TnVtID0gXCJcIjtcclxuICAgICAgICB2YXIgaW1wb3J0RGF0YUFycmF5ID1bXTtcclxuXHJcbiAgICAgICAgdGhpcy5wb3N0TGlzdCA9IGZ1bmN0aW9uIChuYW1lLCBjYikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRpZCB0aGUgbmFtZSBtYWtlIGl0IHRvIHRoZSBzZXJ2aWNlPyBcIiArIG5hbWUgKTtcclxuXHJcblx0XHRcdC8vJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTt9LCA1MDAwKTtcclxuXHRcdFx0Ly9yZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL25ld0NvbnRhY3RMaXN0Jywge25hbWU6IG5hbWV9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBsaXN0TnVtID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSWQ/IFwiLCBsaXN0TnVtKTtcclxuXHRcdFx0XHRjYih0cnVlKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBjcmVhdGVcIiwgZGF0YSk7IC8vZXJyb3JcclxuXHRcdFx0XHQvL3JldHVybiBmYWxzZTtcclxuXHRcdFx0XHRjYihmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5wb3BMaXN0ID0gZnVuY3Rpb24gKGxpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgXCJpbXBvcnREYXRhQXJyYXlcIjogaW1wb3J0RGF0YUFycmF5LFxyXG4gICAgICAgICAgICAgICAgXCJsaXN0TnVtXCI6IGxpc3ROdW1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvdCB0byBwb3BMaXN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXBvcnREYXRhQXJyYXk6ICcsdGhpcy5pbXBvcnREYXRhQXJyYXksICdcXG50eXBlOiAnLCB0eXBlb2YgdGhpcy5pbXBvcnREYXRhQXJyYXkpO1xyXG4gICAgICAgICAgICBnZXRDaGVja2VkKGxpc3QpO1xyXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvcG9wdWxhdGVDb250YWN0TGlzdCcsIHRoaXMuZGF0YU9iamVjdCkudGhlbihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwb3N0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ltcG9ydERhdGFBcnJheTogJyx0aGlzLmltcG9ydERhdGFBcnJheSwgJ1xcbnR5cGU6ICcsIHR5cGVvZiB0aGlzLmltcG9ydERhdGFBcnJheSk7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9nZXQgYWxsIHRoZSBjaGVja2VkIGVsZW1lbnRzIGFuZCBzdHVmZiB0aGVtIGluIGFuIGFycmF5XHJcbiAgICAgICAgdmFyIGdldENoZWNrZWQgPSBmdW5jdGlvbiAobCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0Q2hlY2tlZCBpcyBydW5uaW5nJyk7XHJcbiAgICAgICAgICAgIGwuZm9yRWFjaChcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3RPYmplY3QgPVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbF9hZGRyZXNzZXNcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmVtYWlsIHx8ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOm9iamVjdC5maXJzdE5hbWUgfHwgJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdF9uYW1lXCI6IG9iamVjdC5sYXN0TmFtZSB8fCAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogb2JqZWN0LmNvbXBhbnkgfHwgJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkcmVzc2VzXCI6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiBvYmplY3QuY2l0eSB8fCAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jb250YWN0T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICBpbXBvcnREYXRhQXJyYXkucHVzaCh0aGlzLmNvbnRhY3RPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1dKTtcclxuXHJcblxyXG4iLCJhcHAuY29udHJvbGxlcigncG9wTGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywnJGh0dHAnLCBmdW5jdGlvbihuZXdDb250YWN0TGlzdERhdGEsICRzY29wZSwgJGh0dHApIHtcclxuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XHJcblxyXG5cclxuICAgICRzY29wZS5saXN0TmFtZSA9IHt9O1xyXG5cclxuICAgICRzY29wZS5wb3B1bGF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIGxpc3Q6IFwiICsgc2NvcGUubGlzdE5hbWUuaW5wdXQpO1xyXG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcclxuICAgICAgICBuZXdDb250YWN0TGlzdERhdGEucG9wTGlzdCgpO1xyXG4gICAgICAgIC8vdmFyIGxpc3RFbmQgPSB7XHJcbiAgICAgICAgLy8gICAgXCJsaXN0c1wiOiBbbGlzdE51bV0sXHJcbiAgICAgICAgLy8gICAgXCJjb2x1bW5fbmFtZXNcIjogW1xyXG4gICAgICAgIC8vICAgIFwiRU1BSUxcIixcclxuICAgICAgICAvLyAgICBcIkZJUlNUIE5BTUVcIixcclxuICAgICAgICAvLyAgICBcIkxBU1QgTkFNRVwiLFxyXG4gICAgICAgIC8vICAgIFwiQ0lUWVwiLFxyXG4gICAgICAgIC8vICAgIFwiQ09NUEFOWSBOQU1FXCJcclxuICAgICAgICAvL119XHJcblxyXG5cclxuICAgICAgICAkc2NvcGUubGlzdE5hbWU9e307XHJcbiAgICB9O1xyXG59XSk7XHJcblxyXG4iLCJcclxuLy9yZWdpc3RlciBjb250cm9sbGVyXHJcbmFwcC5jb250cm9sbGVyKCdyZWdpc3RlckN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgJ3RvYXN0cicsICd2YWxpZFNlcnZpY2UnLCAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgdG9hc3RyLCB2YWxpZFNlcnZpY2UpIHtcclxuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcclxuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwicmVnaXN0ZXJDdHJsXCIpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3JlZ2lzdGVyQ29udHJvbGxlciBzdWJtaXQ6JywgJHNjb3BlLmZvcm0sICRzY29wZS5mb3JtLnVzZXJuYW1lKTtcclxuICAgICAgICAkaHR0cC5wb3N0KCcvcmVnaXN0ZXInLCAkc2NvcGUuZm9ybSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2luZGV4XCIpO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJhZG1pbiBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICB9LGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ2ZhaWxlZCB0byBhZGQgYWRtaW4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1dKTtcclxuIiwiYXBwLmNvbnRyb2xsZXIoJ3Jlc2V0Q3RybCcsIFsgJyRzY29wZScsICckaHR0cCcsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCAndG9hc3RyJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UsIHRvYXN0cikge1xyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZWRpdCBwYXNzd29yZDonLCAkc2NvcGUuZm9ybSk7XHJcblx0XHR2YXIgdGVtcFVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XHJcblx0XHRjb25zb2xlLmxvZyhcImF1dGggdXNlclwiLCB0ZW1wVXNlcik7XHJcblx0XHQvLyBhZGQgaW4gaWQsIHVzZXJuYW1lXHJcblx0XHR2YXIgdXNlciA9ICRzY29wZS5mb3JtO1xyXG5cdFx0dXNlci5pZCA9IHRlbXBVc2VyLmlkO1xyXG5cdFx0dXNlci51c2VybmFtZSA9IHRlbXBVc2VyLnVzZXJuYW1lO1xyXG5cdFx0Y29uc29sZS5sb2coXCJwcmVwYXJlZFwiLCB1c2VyKTtcclxuICAgICAgICAkaHR0cC5wdXQoJy9hZG1pbicsIHVzZXIpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ3Bhc3N3b3JkIGNoYW5nZWQnKTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL2luZGV4XCIpO1xyXG4gICAgICAgICAgICB9LGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRvYXN0ci5lcnJvcignZmFpbGVkIHRvIHVwZGF0ZSBwYXNzd29yZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufV0pO1xyXG4iLCJhcHAuc2VydmljZSgndmFsaWRTZXJ2aWNlJywgW2Z1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgdmFsaWRhdGVJbnB1dCA9IGZ1bmN0aW9uICh0eXBlLCBpZCkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJ2YWxpZGF0ZUlucHV0KClcIik7XHJcbiAgICAgICAgLy8gc3RvcmVzIHRoZSBmb3JtIGJlaW5nIGNhbGxlZCBvblxyXG4gICAgICAgIHZhciBwYXR0ZXJuO1xyXG4gICAgICAgIHZhciAkb2JqID0gKGlkKSA/ICQoJyMnKyBpZCkgOiBmYWxzZTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwib2JqZWN0IGlzIFwiLCAkb2JqLCB0eXBlLCBpZCk7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaXR5XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdGF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIGFuZCBhbHBoYSBjaGFycywgYXMgd2VsbCBhcyB3aGl0ZSBzcGFjZSBhbmQgYSBmZXcgZXh0cmEgY2hhcnNcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLXpcXHMsLictXXswLDI4fS87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNvcnBOYW1lXCI6XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrLV17MCw3NX0vO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSYtXXswLDUwfS87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInppcFwiOlxyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eWzAtOV17NX0kLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGhvbmVcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXihbKF1bMC05XXszfVspXXxbMC05XXszfSlbXFxzXFwtLl0/WzAtOV17M31bXFxzXFwtLl0/WzAtOV17NH0kLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZW1haWxcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTkuXyUrLV0rQFthLXpBLVowLTkuLV0rXFwuW2EtekEtWl17Mix9JC87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm5vdGVzXCI6XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bYS16QS1aMC05XFxzLC4/QCEjJ34qXzsrOigpJSY8PlxcW1xcXXt9XFwtPVwifGBcXFxcXFwvXXswLDI1MH0vO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJleHRcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHM6LV17MCwxNX0kLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgLy9wYXR0ZXJuID0gL14yMFswLTldezJ9Wy1dKDBbMS05XXwxWzAtMl0pWy1dKDBbMS05XXxbMS0yXVswLTldfDNbMDFdKSQvO1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eKDA/WzEtOV18MVswLTJdKVxcLygwP1sxLTldfFsxLTJdWzAtOV18M1swMV0pXFwvMjBbMC05XXsyfSQvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJiaXJ0aGRhdGVcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXigwP1sxLTldfDFbMC0yXSlcXC8oMD9bMS05XXxbMS0yXVswLTldfDNbMDFdKVxcLygoMTk5WzAtOV18MjApWzAtOV17Mn0pJC87XHJcbiAgICAgICAgICAgICAgICAvL3BhdHRlcm4gPSAvXigxOTlbMC05XXwyMFswLTldezJ9KVstXSgwWzEtOV18MVswLTJdKVstXSgwWzEtOV18WzEtMl1bMC05XXwzWzAxXSkkLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYW1vdW50XCI6XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oW1xcJF0/W1xcZF0rKFsuXVtcXGRdezJ9KT8pezEsMTB9JC87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHRcdFx0Y2FzZSBcInVzZXJuYW1lXCI6XHJcblx0XHRcdFx0cGF0dGVybiA9IC9eKD89LipbYS16XSkoPz0uKltBLVpdKVthLXpBLVpcXGRfXFwtXXs4LDIwfSQvO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwicGFzc3dvcmRcIjpcclxuXHRcdFx0XHQvL3BhdHRlcm4gPSAvXihbYS16XStbQS1aXStbMC05XStbLV9dPyl7OCwyMH0kLztcclxuXHRcdFx0XHRwYXR0ZXJuID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpW2EtekEtWlxcZF17OCwyMH0kLztcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSBcInNlYXJjaFwiOlxyXG5cdFx0XHRcdHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOystXXswLDc1fSQvO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwiYWdlXCI6XHJcblx0XHRcdFx0cGF0dGVybiA9IC9eWzAtOV17MSwyfSQvO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImludmFsaWQgY2xhc3Mgc2VhcmNoXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiByZXF1aXJlZCBvciB0cmltbWVkIGxlbmd0aCBpcyBub3QgMCwgdGhlbiB2YWxpZGF0ZSBpbmZvXHJcbiAgICAgICAgaWYoJG9iai5hdHRyKCdyZXF1aXJlZCcpIHx8ICRvYmoudmFsKCkpIHtcclxuICAgICAgICAgICAgLy8gY2hlY2tzIGlmIHZhbHVlIG1hdGNoZXMgcmVnZXggZm9yIGZpZWxkIHR5cGVcclxuICAgICAgICAgICAgaWYoIXBhdHRlcm4udGVzdCgkb2JqLnZhbCgpLnRyaW0oKSkgfHwgJG9iai52YWwoKS50cmltKCkubGVuZ3RoID09IDAgJiYgJG9iai5hdHRyKCdyZXF1aXJlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBmYWlscywgYWRkcyBpbnZhbGlkIGNsYXNzIChoaWdobGlnaHRpbmcpLCBjaGFuZ2VzIHBsYWNlaG9sZGVyIHRvIHdoYXQgc2hvdWxkIGJlIGVudGVyZWRcclxuICAgICAgICAgICAgICAgICRvYmouYWRkQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICRvYmouZGF0YSgnaW52YWxpZCcpKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0eXBlLCAnIGZhaWxlZCB0ZXN0JywgcGF0dGVybik7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgcGFzc2VzLCByZW1vdmVzIGludmFsaWQgY2xhc3MsIHJlc2V0cyBwbGFjZWhvbGRlciB0byBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAkb2JqLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkb2JqLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0eXBlLCAnIHBhc3NlZCB0ZXN0JywgcGF0dGVybik7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHR2YXIgdmFsaWRhdGVGb3JtID0gZnVuY3Rpb24gKGZvcm1zKSB7XHJcblx0XHR2YXIgcGFzcyA9IHRydWU7XHJcblx0XHRmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcblx0XHRcdCQoJyMnKyB2ICsnIC5qcy12YWxpZGF0ZScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGlmKHZhbGlkYXRlSW5wdXQoJCh0aGlzKS5kYXRhKCd0eXBlJyksICQodGhpcykuYXR0cignaWQnKSkgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJCh0aGlzKS5hdHRyKCdpZCcpICtcIiBmYWlsZWQgdGhlIHRlc3QgXCIrICQodGhpcykuZGF0YSgndHlwZScpICtcIiBlbnRlcmVkIGluZm86IFwiKyAkKHRoaXMpLnZhbCgpKTtcclxuXHRcdFx0XHRcdHBhc3MgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcGFzcztcclxuXHR9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWRhdGVJbnB1dDogdmFsaWRhdGVJbnB1dCxcclxuXHRcdHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtXHJcbiAgICB9O1xyXG59XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
