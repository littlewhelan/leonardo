var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model","toastr","angular-momentjs"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,a,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&a.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?a.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(a){if(a){var e=a.split(".")[1],o=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(a){t.localStorage.jwtToken=a},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var a=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=a.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","dateService","toastr",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={info:{},contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.clearCorp=function(a){r.error("Cancelled"),t.corp={info:{},contact:{},donations:[]},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){n.data.donations.forEach(function(t,a,e){e[a].date=l.fromDB(t.date)}),t.corp=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.corp}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.donations.length&&t.corp.donations.forEach(function(t,a,e){e[a].date=l.toDB(t.date)}),t.corp.id?i.validateForm(["EditCorpInfoForm","EditCorpContactForm"])?(console.log("update corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Put corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})):console.log("Edit corp input tests failed"):i.validateForm(["AddCorpInfoForm","AddCorpContactForm"])?n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Posted corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{},r.success("Corporation added!")},function(){r.error("Failed to add corporation")}):(r.error("Unauthorized character"),console.log("Add corp input tests failed"))},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("donation",t.newDonation),t.corp.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.corp.donations))}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData","toastr","$rootScope",function(t,a,e,o,n,i){t.type={},t.age={},t.zip={},t.emails={},t.emails.includedEmails=[],t.includedEmails=[],t.totalDisplayed=50,t.totalResults=0,t.emailList=[],t.searchListBtn=function(){if(t.emailList=[],"zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")}),"ageCk"==t.type){var a=e.makeDataCall("age",t.age.data);a.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("fam"==t.type){var o=e.makeDataCall("family","");o.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}if("corp"==t.type){var i=e.makeDataCall("company","");i.then(function(a){t.emailList=a,t.totalResults=a.length,n.success("Loaded "+t.totalResults+" results")})["catch"](function(){n.error("Failed to load results")})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.emails.includedEmails),o.popList(t.emails.includedEmails)?n.success("Successfully deployed contact list."):n.error("Failed to deploy contact list.")},t.loadMore=function(){t.totalDisplayed+=50},t.showAll=function(){t.totalDisplayed=t.totalResults},t.checkAll=function(a){var e=angular.element(a.target);t.emails.includedEmails.length==t.totalResults?(t.emails.includedEmails=[],e.val("Check All")):(t.emails.includedEmails=angular.copy(t.emailList),e.val("Uncheck All"))}}]),app.factory("ContactListDataService",["$http","$q",function(t,a){function e(e,o){var n=a.defer();return console.log("this is in the make data call",e,o),t({method:"GET",url:"../createMailList",params:{type:e,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:e}}]),app.service("dateService",["MomentJS",function(t){var a="YYYY-MM-DD",e="M/D/YYYY",o=function(e){return t(e).format(a)},n=function(a){return t(a).format(e)};return{toDB:o,fromDB:n}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService","toastr","dateService",function(t,a,e,o,n,i,l,r){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.clearFamily=function(a){l.error("Cancelled"),t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},a.forEach(function(t){$("#"+t+" .js-validate").each(function(){$(this).removeClass("invalid").attr("placeholder",$(this).data("placeholder"))})})},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){console.log(n.data),n.data.children.forEach(function(t,a,e){console.log("reformatted",r.fromDB(e[a].birthdate)),e[a].birthdate=r.fromDB(t.birthdate)}),n.data.donations.forEach(function(t,a,e){e[a].date=r.fromDB(t.date)}),t.family=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.children.length&&t.family.children.forEach(function(t,a,e){e[a].birthdate=r.toDB(t.birthdate)}),t.family.donations.length&&t.family.donations.forEach(function(t,a,e){e[a].date=r.toDB(t.date)}),console.log("Saving family, after toDB birthdates",t.family),t.family.id?i.validateForm(["EditFamInfoForm","EditFamEmerForm"])?(console.log("update family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(a){console.log("Put family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})):console.log("Edit family failed input tests"):i.validateForm(["AddFamInfoForm","AddFamEmerForm"])?n({method:"POST",url:"/family",data:{family:t.family}}).then(function(a){console.log("Posted family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[],l.success("Family saved!")},function(){l.error("Failed to add family")}):(l.error("Unauthorized character"),console.log("Add family failed input tests"))},t.addChild=function(){t.newChild.firstName&&(console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1,l.success("Child updated!")):(t.family.children.push(t.newChild),l.success("Child added!")),t.newChild={})},t.editChild=function(a){t.editingChild=a,t.newChild=t.family.children[a]},t.removeChild=function(a){console.log("in remove child index",a," edit ",t.editingChild),t.family.children.splice(a,1),a==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){/^[0-9]+(.[0-9]{0,2})?$/.test(t.newDonation.amount)&&(console.log("add donation",t.newDonation),t.family.donations.push(t.newDonation),t.newDonation={},console.log("added donation",t.family.donations))}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope","toastr",function(t,a,e,o,n,i){t.submit=function(){a.post("/login",t.form).then(function(t){e.saveToken(t.data),n.user=e.getUser(),o.path("/search")},function(){i.error("incorrect username or password")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,a,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var a=[],e=[],o=[],n=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){a=t.data,l(a),c(a),r(a)})},l=function(t){var a=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return a(t),console.log("this is getElement1",o),o},r=function(t){var a=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return a(t),console.log("this is in getElement2",e),e},c=function(t){var a=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return a(t),console.log("this is getElements3",n),n},s={getKids:c,getAdults:r,getCompanies:l,makeDataCall:i,results:a,companies:o,adults:e,kids:n};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,a){t.ok=function(){a.close(t.selected.item)},t.cancel=function(){a.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,a,e,o){e.user=t.getUser(),e.user&&e.user.username&&o.path("/home"),a.logout=function(){t.logout(),e.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$rootScope","toastr",function(t,a,e,o){a.hide=function(){console.log("hide"),e.hide=!0},a.listname={},a.createList=function(){console.log("create list: "+a.listname.input),t.postList(a.listname.input,function(t){t===!0?(a.listname={},o.success("Successfully created list"),a.hide()):(console.log("failed to create list"),o.error("Failed to create list"))})}}]),app.service("newContactListData",["ContactListDataService","$http","$timeout",function(t,a,e){var o="",n=[];this.postList=function(t,e){console.log("did the name make it to the service? "+t),a.post("/newContactList",{name:t}).then(function(t){console.log(t.data),o=t.data,console.log("Id? ",o),e(!0)},function(t){console.log("failed to create",t),e(!1)})},this.popList=function(t){this.dataObject={importDataArray:n,listNum:o},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),i(t),a.post("/populateContactList",this.dataObject).then(function(t,a,e,o){return console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),!0},function(){return!1})};var i=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email||""],first_name:t.firstName||"",last_name:t.lastName||"",company_name:t.company||"",addresses:[{city:t.city||""}]},console.log(this.contactObject),n.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,a,e){a.listName={},a.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),a.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location","toastr","validService",function(t,a,e,o,n){t.validateInput=n.validateInput,t.submit=function(){a.post("/register",t.form).then(function(t){e.path("/index"),o.success("admin created")},function(){o.error("failed to add admin")})}}]),app.controller("resetCtrl",["$scope","$http","$location","authService","toastr",function(t,a,e,o,n){t.submit=function(){console.log("edit password:",t.form);var i=o.getUser();console.log("auth user",i);var l=t.form;l.id=i.id,l.username=i.username,console.log("prepared",l),a.put("/admin",l).then(function(t){console.log(t),n.success("password changed"),e.path("/index")},function(){n.error("failed to update password")})}}]),app.service("validService",[function(){var t=function(t,a){var e,o=a?$("#"+a):!1;switch(t){case"name":case"city":case"state":e=/^[a-zA-z\s,.'-]{0,28}/;break;case"corpName":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}/;break;case"address":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]{0,50}/;break;case"zip":e=/^[0-9]{5}$/;break;case"phone":e=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]{0,250}/;break;case"ext":e=/^[a-zA-Z0-9\s:-]{0,15}$/;break;case"date":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/20[0-9]{2}$/;break;case"birthdate":e=/^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[01])\/((199[0-9]|20)[0-9]{2})$/;break;case"amount":e=/^([\$]?[\d]+([.][\d]{2})?){1,10}$/;break;case"username":e=/^(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d_\-]{8,20}$/;break;case"password":e=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,20}$/;break;case"search":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]{0,75}$/;break;case"age":e=/^[0-9]{1,2}$/;break;default:return!1}return o.attr("required")||o.val()?!e.test(o.val().trim())||0==o.val().trim().length&&o.attr("required")?(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),!1):(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),!0):void 0},a=function(a){var e=!0;return a.forEach(function(a,o,n){$("#"+a+" .js-validate").each(function(){0==t($(this).data("type"),$(this).attr("id"))&&(e=!1)})}),e};return{validateInput:t,validateForm:a}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udHJvbGxlci5qcyIsImNyZWF0ZUxpc3RTZXJ2aWNlLmpzIiwiZGF0ZVNlcnZpY2UuanMiLCJmYW1pbHlDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwibWFpblNlYXJjaENvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoU2VydmljZS5qcyIsIm1vZGFsSW5zdGFuY2VDb250cm9sbGVyLmpzIiwibmF2Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0U2VydmljZS5qcyIsInBvcExpc3RDb250cm9sbGVyLmpzIiwicmVnaXN0ZXJDb250cm9sbGVyLmpzIiwicmVzZXRDb250cm9sbGVyLmpzIiwidmFsaWRTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsIiRzY29wZSIsIiR1aWJNb2RhbCIsIiRsb2ciLCJSZXN1bHRTZXJ2aWNlIiwiJGh0dHAiLCJ2YWxpZFNlcnZpY2UiLCJkYXRlU2VydmljZSIsInRvYXN0ciIsInZhbGlkYXRlSW5wdXQiLCJjb21wYW5pZXMiLCJjb3JwIiwiaW5mbyIsImNvbnRhY3QiLCJkb25hdGlvbnMiLCJuZXdEb25hdGlvbiIsImFuaW1hdGlvbnNFbmFibGVkIiwiY2xlYXJDb3JwIiwiZm9ybXNBcnJheSIsImVycm9yIiwiZm9yRWFjaCIsInYiLCIkIiwiZWFjaCIsInJlbW92ZUNsYXNzIiwiYXR0ciIsImRhdGEiLCJvcGVuIiwic2l6ZSIsImlkIiwibWV0aG9kIiwidXJsIiwidGhlbiIsImkiLCJhIiwiZGF0ZSIsImZyb21EQiIsIm1vZGFsSW5zdGFuY2UiLCJhbmltYXRpb24iLCJzY29wZSIsInJlc29sdmUiLCJpdGVtcyIsInJlc3VsdCIsInNlbGVjdGVkSXRlbSIsInNlbGVjdGVkIiwidG9nZ2xlQW5pbWF0aW9uIiwic2F2ZSIsImxlbmd0aCIsInRvREIiLCJ2YWxpZGF0ZUZvcm0iLCJyZXMiLCJzdWNjZXNzIiwiYWRkRG9uYXRpb24iLCJ0ZXN0IiwiYW1vdW50IiwicHVzaCIsIkNvbnRhY3RMaXN0RGF0YVNlcnZpY2UiLCJuZXdDb250YWN0TGlzdERhdGEiLCIkcm9vdFNjb3BlIiwidHlwZSIsImFnZSIsInppcCIsImVtYWlscyIsImluY2x1ZGVkRW1haWxzIiwidG90YWxEaXNwbGF5ZWQiLCJ0b3RhbFJlc3VsdHMiLCJlbWFpbExpc3QiLCJzZWFyY2hMaXN0QnRuIiwibWFrZURhdGFDYWxsIiwiZmFtIiwiY29tcCIsInBvcHVsYXRlTGlzdCIsInBvcExpc3QiLCJsb2FkTW9yZSIsInNob3dBbGwiLCJjaGVja0FsbCIsImV2ZW50IiwiJGJ1dHRvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJ2YWwiLCJjb3B5IiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwibW9tZW50IiwiZGJGb3JtYXQiLCJ1aUZvcm1hdCIsInRvRGJGb3JtYXQiLCJmb3JtYXQiLCJmcm9tRGJGb3JtYXQiLCJhZHVsdHMiLCJraWRzIiwiZmFtaWx5IiwiYWR1bHRPbmUiLCJhZHVsdFR3byIsImVtZXJnZW5jeSIsImNoaWxkcmVuIiwibmV3Q2hpbGQiLCJjbGVhckZhbWlseSIsImJpcnRoZGF0ZSIsImFkZENoaWxkIiwiZmlyc3ROYW1lIiwiZWRpdGluZ0NoaWxkIiwiZWRpdENoaWxkIiwiaW5kZXgiLCJyZW1vdmVDaGlsZCIsInNwbGljZSIsImNsZWFyQ2hpbGQiLCJsYXN0TmFtZSIsInNjaG9vbCIsIm5vdGVzIiwic3VibWl0IiwicG9zdCIsImZvcm0iLCJ1c2VyIiwiZm9ybUlucHV0Iiwic2VhcmNoQnRuIiwicmVzdWx0cyIsImdldENvbXBhbmllcyIsImdldEtpZHMiLCJnZXRBZHVsdHMiLCJhcnJheSIsImdldEVsZW1lbnQxIiwiZ2V0RWxlbWVudDIiLCJnZXRFbGVtZW50MyIsInB1YmxpY0FwaSIsIiRtb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsIml0ZW0iLCJjYW5jZWwiLCJkaXNtaXNzIiwidXNlcm5hbWUiLCJoaWRlIiwibGlzdG5hbWUiLCJjcmVhdGVMaXN0IiwiaW5wdXQiLCJwb3N0TGlzdCIsIiR0aW1lb3V0IiwibGlzdE51bSIsImltcG9ydERhdGFBcnJheSIsIm5hbWUiLCJjYiIsImxpc3QiLCJkYXRhT2JqZWN0IiwiZ2V0Q2hlY2tlZCIsImwiLCJvYmplY3QiLCJjb250YWN0T2JqZWN0IiwiZW1haWxfYWRkcmVzc2VzIiwiZW1haWwiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiY29tcGFueV9uYW1lIiwiY29tcGFueSIsImFkZHJlc3NlcyIsImNpdHkiLCJsaXN0TmFtZSIsInRlbXBVc2VyIiwicHV0IiwicGF0dGVybiIsIiRvYmoiLCJ0cmltIiwiYWRkQ2xhc3MiLCJmb3JtcyIsInBhc3Mi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QUFBcUYsU0FBQSxHQUFBRCxFQUFBcEYsTUFBQXFGLE9BQUF0SCxRQUFBcUgsRUFBQTNJLEtBQUEsYUFFQTJJLEVBQUFFLFNBQUEsV0FBQTdJLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLFlBQUFzRCxJQUFBLEtBRUEsSUFHQW9GLEVBQUE1SSxZQUFBLFdBQUFDLEtBQUEsY0FBQTJJLEVBQUExSSxLQUFBLGlCQUVBLEdBWEEsUUFnQkF1QixFQUFBLFNBQUFzSCxHQUNBLEdBQUFDLElBQUEsQ0FTQSxPQVJBRCxHQUFBbkosUUFBQSxTQUFBQyxFQUFBWSxFQUFBQyxHQUNBWixFQUFBLElBQUFELEVBQUEsaUJBQUFFLEtBQUEsV0FDQSxHQUFBZCxFQUFBYSxFQUFBM0MsTUFBQStDLEtBQUEsUUFBQUosRUFBQTNDLE1BQUE4QyxLQUFBLFNBRUErSSxHQUFBLE9BSUFBLEVBR0EsUUFDQS9KLGNBQUFBLEVBQ0F3QyxhQUFBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdsZW8nLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCcsICdjaGVja2xpc3QtbW9kZWwnLCAndG9hc3RyJywgJ2FuZ3VsYXItbW9tZW50anMnXSk7XHJcblxyXG5cclxuYXBwLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJyxcclxuICAgIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIuXHJcbiAgICAgICAgICAgIHdoZW4oJy8nLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9sb2dpbi5odG1sJ1xyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgd2hlbignL3NlYXJjaCcsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9zZWFyY2guaHRtbCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9yZWdpc3RlcicsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL3JlZ2lzdGVyLmh0bWwnXHJcbiAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICB3aGVuKCcvY29udGFjdExpc3QnLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvY29udGFjdExpc3QuaHRtbCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9hZGRmYW1pbHknLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvYWRkZmFtaWx5Lmh0bWwnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdlZGl0RmFtaWx5Q3RybCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9hZGRjb3JwJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2FkZGNvcnAuaHRtbCcsXHJcblx0XHRcdFx0Y29udHJvbGxlcjogJ2VkaXRDb3JwQ3RybCdcclxuICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgIHdoZW4oJy9jb250YWN0bGlzdCcsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9jb250YWN0bGlzdC5odG1sJ1xyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgb3RoZXJ3aXNlKHtcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvc2VhcmNoJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuXHJcblxyXG5cclxuXHJcbiIsImFwcC5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLCBbJyRxJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XHJcbiAgICAgICAgICAgIGlmIChhdXRoU2VydmljZS5pc0F1dGhlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgYXV0aFNlcnZpY2UuZ2V0VG9rZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSB1c2VyIGlzIG5vdCBhdXRoZW50aWNhdGVkXHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xyXG4gICAgICAgIH0sIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5zdGF0dXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKSIsImFwcC5zZXJ2aWNlKCdhdXRoU2VydmljZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uICgkd2luZG93KSB7XHJcblxyXG4gICAgdGhpcy5wYXJzZUp3dCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICB2YXIgYmFzZTY0VXJsID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcclxuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKCctJywgJysnKS5yZXBsYWNlKCdfJywgJy8nKTtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xyXG4gICAgICAgIH0gZWxzZSByZXR1cm4ge307XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2F2ZVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW4gPSB0b2tlbjtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdTYXZlZCB0b2tlbjonLCR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaXNBdXRoZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5nZXRUb2tlbigpO1xyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJzZUp3dCh0b2tlbik7XHJcbiAgICAgICAgICAgIHZhciBub3RFeHBpcmVkID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApIDw9IHBhcmFtcy5leHA7XHJcbiAgICAgICAgICAgIGlmICghbm90RXhwaXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dvdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbm90RXhwaXJlZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBkZWxldGUgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0VG9rZW47XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGV4cG9zZSB1c2VyIGFzIGFuIG9iamVjdFxyXG4gICAgdGhpcy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnd0KHRoaXMuZ2V0VG9rZW4oKSlcclxuICAgIH07XHJcbn1dKTsiLCIvL2VkaXQgY29ycG9yYXRpb24gbW9kYWwgdGVtcGxhdGVcclxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRDb3JwQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCAndmFsaWRTZXJ2aWNlJywgJ2RhdGVTZXJ2aWNlJywgJ3RvYXN0cicsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbCwgJGxvZywgUmVzdWx0U2VydmljZSwgJGh0dHAsIHZhbGlkU2VydmljZSwgZGF0ZVNlcnZpY2UsIHRvYXN0cikge1xyXG5cclxuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcclxuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xyXG5cdC8vc2VuZHMgdGhlIGNvbXBhbmllcyBhZnRlciB0aGUgcmVzdWx0cyBoYXZlIGJlZW4gb3JnYW5pemVkXHJcblx0JHNjb3BlLmNvbXBhbmllcyA9IFJlc3VsdFNlcnZpY2UuY29tcGFuaWVzO1xyXG5cdCRzY29wZS5jb3JwID0ge1xyXG5cdFx0aW5mbzoge30sXHJcblx0XHRjb250YWN0OiB7fSxcclxuXHRcdGRvbmF0aW9uczogW11cclxuXHR9O1xyXG5cdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xyXG5cdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9IHRydWU7XHJcblxyXG5cdCRzY29wZS5jbGVhckNvcnAgPSBmdW5jdGlvbiAoZm9ybXNBcnJheSkge1xyXG5cdFx0dG9hc3RyLmVycm9yKCdDYW5jZWxsZWQnKTtcclxuXHRcdCRzY29wZS5jb3JwID0ge1xyXG5cdFx0XHRpbmZvOnt9LFxyXG5cdFx0XHRjb250YWN0Ont9LFxyXG5cdFx0XHRkb25hdGlvbnM6W11cclxuXHRcdH07XHJcblx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcclxuXHRcdGZvcm1zQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodikge1xyXG5cdFx0XHQkKCcjJysgdiArJyAuanMtdmFsaWRhdGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbnZhbGlkJykuYXR0cigncGxhY2Vob2xkZXInLCAkKHRoaXMpLmRhdGEoJ3BsYWNlaG9sZGVyJykpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdCRzY29wZS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIGlkKSB7XHJcblx0XHRjb25zb2xlLmxvZygnY29ycCBjYWxsJywgaWQpO1xyXG5cdFx0cmV0dXJuICRodHRwKHtcclxuXHRcdFx0bWV0aG9kOiAnR0VUJyxcclxuXHRcdFx0dXJsOiAnLi4vY29ycG9yYXRpb24nLFxyXG5cdFx0XHRwYXJhbXM6IHtpZDogaWR9XHJcblx0XHR9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cclxuXHRcdFx0cmVzcG9uc2UuZGF0YS5kb25hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xyXG5cdFx0XHRcdGFbaV0uZGF0ZSA9IGRhdGVTZXJ2aWNlLmZyb21EQih2LmRhdGUpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdCRzY29wZS5jb3JwID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0dmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcblx0XHRcdFx0YW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICdwcml2YXRlL2VkaXRjb3JwLmh0bWwnLFxyXG5cdFx0XHRcdGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXHJcblx0XHRcdFx0c2l6ZTogc2l6ZSxcclxuXHRcdFx0XHRzY29wZTogJHNjb3BlLFxyXG5cdFx0XHRcdHJlc29sdmU6IHtcclxuXHRcdFx0XHRcdGl0ZW1zOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiAkc2NvcGUuY29ycDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XHJcblx0XHRcdFx0JHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xyXG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQkc2NvcGUudG9nZ2xlQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0JHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gISRzY29wZS5hbmltYXRpb25zRW5hYmxlZDtcclxuXHR9O1xyXG5cclxuXHQvLyBzYXZlIGNvcnBcclxuXHQkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiU2F2ZSBzdWJtaXR0ZWRcIiwgJHNjb3BlLmNvcnApO1xyXG5cdFx0Ly9hbGVydChcIlN1Ym1pdHRlZFwiKTtcclxuXHJcblx0XHQvLyBjaGVjayBmb3IgZG9uYXRpb24sIHJ1biB0b0RCIGZvcm1hdHRpbmcgYmVmb3JlIHNlbmRpbmdcclxuXHRcdGlmKCRzY29wZS5jb3JwLmRvbmF0aW9ucy5sZW5ndGgpIHtcclxuXHRcdFx0JHNjb3BlLmNvcnAuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS50b0RCKHYuZGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGlmIGhhcyBpZCwgdGhlbiBwdXRcclxuXHRcdGlmKCEkc2NvcGUuY29ycC5pZCkge1xyXG5cdFx0XHRpZih2YWxpZFNlcnZpY2UudmFsaWRhdGVGb3JtKFtcIkFkZENvcnBJbmZvRm9ybVwiLCBcIkFkZENvcnBDb250YWN0Rm9ybVwiXSkpIHtcclxuXHRcdFx0XHQkaHR0cCh7XHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0XHRcdHVybDogJy9jb3Jwb3JhdGlvbicsXHJcblx0XHRcdFx0XHRkYXRhOiB7Y29ycDogJHNjb3BlLmNvcnB9XHJcblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlBvc3RlZCBjb3JwLCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcclxuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmlkID0gcmVzLmRhdGEuaWQ7XHJcblx0XHRcdFx0XHQkc2NvcGUuY29ycC5pbmZvID0gKHJlcy5kYXRhLmluZm8pID8gcmVzLmRhdGEuaW5mbyA6IHt9O1xyXG5cdFx0XHRcdFx0JHNjb3BlLmNvbnRhY3QgPSAocmVzLmRhdGEuY29udGFjdCkgPyByZXMuZGF0YS5jb250YWN0IDoge307XHJcblx0XHRcdFx0XHQvLyBpbml0aWFsaXplIGRvbmF0aW9ucyBpZiB0aGVyZSBhcmUgYW55XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmNvcnAuZG9uYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuY29ycC5kb25hdGlvbnMgPSBbXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdCRzY29wZS5kb25hdGlvbnMgPSAocmVzLmRhdGEuZG9uYXRpb25zKSA/IHJlcy5kYXRhLmRvbmF0aW9ucyA6IHt9O1xyXG5cdFx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NvcnBvcmF0aW9uIGFkZGVkIScpO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGFkZCBjb3Jwb3JhdGlvbicpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdVbmF1dGhvcml6ZWQgY2hhcmFjdGVyJyk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJBZGQgY29ycCBpbnB1dCB0ZXN0cyBmYWlsZWRcIik7XHJcblx0XHRcdH1cclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJFZGl0Q29ycEluZm9Gb3JtXCIsIFwiRWRpdENvcnBDb250YWN0Rm9ybVwiXSkpIHtcclxuXHRcdFx0XHQvLyBpbnNlcnQgY29ycCAtIGhhcyBubyBpZFxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwidXBkYXRlIGNvcnBcIiwgJHNjb3BlLmNvcnApO1xyXG5cdFx0XHRcdCRodHRwKHtcclxuXHRcdFx0XHRcdG1ldGhvZDogJ1BVVCcsXHJcblx0XHRcdFx0XHR1cmw6ICcvY29ycG9yYXRpb24nLFxyXG5cdFx0XHRcdFx0ZGF0YToge2NvcnA6ICRzY29wZS5jb3JwfVxyXG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQdXQgY29ycCwgZ290IGlkIFwiLCByZXMuZGF0YSk7XHJcblxyXG5cdFx0XHRcdFx0JHNjb3BlLmNvcnAuaWQgPSByZXMuZGF0YS5pZDtcclxuXHRcdFx0XHRcdCRzY29wZS5jb3JwLmluZm8gPSAocmVzLmRhdGEuaW5mbykgPyByZXMuZGF0YS5pbmZvIDoge307XHJcblx0XHRcdFx0XHQkc2NvcGUuY29udGFjdCA9IChyZXMuZGF0YS5jb250YWN0KSA/IHJlcy5kYXRhLmNvbnRhY3QgOiB7fTtcclxuXHRcdFx0XHRcdC8vIGluaXRpYWxpemUgZG9uYXRpb25zIGlmIHRoZXJlIGFyZSBhbnlcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUuY29ycC5kb25hdGlvbnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucyA9IFtdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JHNjb3BlLmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDoge307XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVkaXQgY29ycCBpbnB1dCB0ZXN0cyBmYWlsZWRcIik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvLyBhZGRzIGRvbmF0aW9uIHRvIGZhbWlseSBvYmplY3RcclxuXHQkc2NvcGUuYWRkRG9uYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHQvLyByZWdleCBjaGVjayBuZWVkZWQgZm9yIGF1dG8gYWRkIGlmIGNsaWNrIHNhdmUgaW5zdGVhZCBvZiBhZGQgZmlyc3RcclxuXHRcdGlmKC9eWzAtOV0rKC5bMC05XXswLDJ9KT8kLy50ZXN0KCRzY29wZS5uZXdEb25hdGlvbi5hbW91bnQpKSB7XHJcblx0XHRcdC8vdmFyIHRlbXAgPSAkc2NvcGUubmV3RG9uYXRpb247XHJcblx0XHRcdC8vdGVtcC5kYXRlID0gZGF0ZVNlcnZpY2UudG9EQih0ZW1wLmRhdGUpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcImRvbmF0aW9uXCIsICRzY29wZS5uZXdEb25hdGlvbik7XHJcblx0XHRcdCRzY29wZS5jb3JwLmRvbmF0aW9ucy5wdXNoKCRzY29wZS5uZXdEb25hdGlvbik7XHJcblx0XHRcdCRzY29wZS5uZXdEb25hdGlvbiA9IHt9O1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcImFkZGVkIGRvbmF0aW9uXCIsICRzY29wZS5jb3JwLmRvbmF0aW9ucyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcbn1dKTsiLCJhcHAuY29udHJvbGxlcignY3JlYXRlTGlzdFNlYXJjaCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCAnbmV3Q29udGFjdExpc3REYXRhJywgJ3RvYXN0cicsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsbmV3Q29udGFjdExpc3REYXRhLCB0b2FzdHIsICRyb290U2NvcGUpIHtcclxuICAgICRzY29wZS50eXBlID17fTtcclxuICAgICRzY29wZS5hZ2U9e307XHJcbiAgICAkc2NvcGUuemlwPXt9O1xyXG5cdC8vIGluY2x1ZGUgbGlzdCBuZWVkcyB0byBiZSB3aXRoaW4gYW4gb2JqZWN0IGR1ZSB0byB0aGUgY2hlY2tib3hlcyBiZWluZyBpbiBhIHRhYmxlXHJcblx0JHNjb3BlLmVtYWlscyA9IHt9O1xyXG4gICAgJHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyA9IFtdO1xyXG5cdCRzY29wZS5pbmNsdWRlZEVtYWlscyA9IFtdO1xyXG5cdCRzY29wZS50b3RhbERpc3BsYXllZCA9IDUwO1xyXG5cdCRzY29wZS50b3RhbFJlc3VsdHMgPSAwO1xyXG4gICAgLy8kcm9vdFNjb3BlLmhpZGUgPSB0cnVlO1xyXG5cclxuXHJcblxyXG4gICAgJHNjb3BlLmVtYWlsTGlzdCA9IFsgXTtcclxuICAgICRzY29wZS5zZWFyY2hMaXN0QnRuID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0JHNjb3BlLmVtYWlsTGlzdCA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgLy9USElTIFdPUktTICAtLSB3aWxsIHNlYXJjaCBieSB6aXBcclxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ3ppcENrJykge1xyXG5cclxuICAgICAgICAgICAgQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ3ppcCcsICRzY29wZS56aXAuZGF0YSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XHJcblx0XHRcdFx0XHQkc2NvcGUudG90YWxSZXN1bHRzID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuZW1haWxMaXN0KTtcclxuXHRcdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcclxuXHRcdFx0XHR9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvL1RISVMgV09SS1MgLSB3aWxsIHNlYXJjaCBieSBhZ2VcclxuICAgICAgICBpZiAoJHNjb3BlLnR5cGUgPT0gJ2FnZUNrJykge1xyXG4gICAgICAgICAgICB2YXIgYWdlID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2FnZScsICRzY29wZS5hZ2UuZGF0YSk7XHJcbiAgICAgICAgICAgIGFnZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XHJcblx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdMb2FkZWQgJysgJHNjb3BlLnRvdGFsUmVzdWx0cyArJyByZXN1bHRzJyk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHJlc3VsdHMnKTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL1RISVMgV09SS1MgLS1nZXQgYWxsIGZhbWlsaWVzIGlmIGZhbSBpcyB0cnVlXHJcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdmYW0nKSB7XHJcbiAgICAgICAgICAgIHZhciBmYW0gPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnZmFtaWx5JywgJycpO1xyXG4gICAgICAgICAgICBmYW0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XHJcblx0XHRcdFx0JHNjb3BlLnRvdGFsUmVzdWx0cyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcclxuXHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnTG9hZGVkICcrICRzY29wZS50b3RhbFJlc3VsdHMgKycgcmVzdWx0cycpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gbG9hZCByZXN1bHRzJyk7XHJcblx0XHRcdH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9nZXQgYWxsIGNvcnAgaWYgY29ycCBpcyB0cnVlXHJcbiAgICAgICAgaWYgKCRzY29wZS50eXBlID09ICdjb3JwJykge1xyXG4gICAgICAgICAgICB2YXIgY29tcCA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdjb21wYW55JywgJycpO1xyXG4gICAgICAgICAgICBjb21wLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xyXG5cdFx0XHRcdCRzY29wZS50b3RhbFJlc3VsdHMgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCAnKyAkc2NvcGUudG90YWxSZXN1bHRzICsnIHJlc3VsdHMnKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGxvYWQgcmVzdWx0cycpO1xyXG5cdFx0XHR9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZW1wdHkgdGhlIHNlYXJjaCBib3hcclxuICAgICAgICRzY29wZS50eXBlPXt9O1xyXG4gICAgICAgICRzY29wZS5hZ2U9e307XHJcbiAgICAgICAgJHNjb3BlLnppcD17fTtcclxuXHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLnBvcHVsYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9hbGVydCgnd29ya2luZycpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMpO1xyXG4gICAgICAgIGlmKG5ld0NvbnRhY3RMaXN0RGF0YS5wb3BMaXN0KCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMpKSB7XHJcblx0XHRcdHRvYXN0ci5zdWNjZXNzKCdTdWNjZXNzZnVsbHkgZGVwbG95ZWQgY29udGFjdCBsaXN0LicpO1xyXG5cdFx0fWVsc2Uge1xyXG5cdFx0XHR0b2FzdHIuZXJyb3IoJ0ZhaWxlZCB0byBkZXBsb3kgY29udGFjdCBsaXN0LicpO1xyXG5cdFx0fVxyXG4gIH07XHJcblxyXG5cdCRzY29wZS5sb2FkTW9yZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdCRzY29wZS50b3RhbERpc3BsYXllZCArPSA1MDtcclxuXHR9O1xyXG5cclxuXHQkc2NvcGUuc2hvd0FsbCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdCRzY29wZS50b3RhbERpc3BsYXllZCA9ICRzY29wZS50b3RhbFJlc3VsdHM7XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLmNoZWNrQWxsID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciAkYnV0dG9uID0gYW5ndWxhci5lbGVtZW50KGV2ZW50LnRhcmdldCk7XHJcblx0XHRpZigkc2NvcGUuZW1haWxzLmluY2x1ZGVkRW1haWxzLmxlbmd0aCA9PSAkc2NvcGUudG90YWxSZXN1bHRzKSB7XHJcblx0XHRcdCRzY29wZS5lbWFpbHMuaW5jbHVkZWRFbWFpbHMgPSBbXTtcclxuXHRcdFx0JGJ1dHRvbi52YWwoXCJDaGVjayBBbGxcIik7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0JHNjb3BlLmVtYWlscy5pbmNsdWRlZEVtYWlscyA9IGFuZ3VsYXIuY29weSgkc2NvcGUuZW1haWxMaXN0KTtcclxuXHRcdFx0JGJ1dHRvbi52YWwoXCJVbmNoZWNrIEFsbFwiKTtcclxuXHRcdH1cclxuXHR9O1xyXG59XSk7XHJcblxyXG5cclxuIiwiYXBwLmZhY3RvcnkoJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24gKCRodHRwLCAkcSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VEYXRhQ2FsbCh0eXBlLCBwYXNzZWREYXRhKSB7XHJcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyBpbiB0aGUgbWFrZSBkYXRhIGNhbGwnLCB0eXBlLCBwYXNzZWREYXRhKTtcclxuICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHVybDogJy4uL2NyZWF0ZU1haWxMaXN0JyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7dHlwZTogdHlwZSwgc2VhcmNoOiBwYXNzZWREYXRhfVxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgbWFrZURhdGFDYWxsOiBtYWtlRGF0YUNhbGxcclxuICAgIH07XHJcblxyXG5cclxufV0pOyIsImFwcC5zZXJ2aWNlKCdkYXRlU2VydmljZScsIFsnTW9tZW50SlMnLCBmdW5jdGlvbiAobW9tZW50KSB7XHJcblx0dmFyIGRiRm9ybWF0ID0gXCJZWVlZLU1NLUREXCI7XHJcblx0dmFyIHVpRm9ybWF0ID0gXCJNL0QvWVlZWVwiO1xyXG5cclxuXHR2YXIgdG9EYkZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcblx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdChkYkZvcm1hdCk7XHJcblx0fTtcclxuXHJcblx0dmFyIGZyb21EYkZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlKSB7XHJcblx0XHRyZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdCh1aUZvcm1hdCk7XHJcblx0fTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvREI6IHRvRGJGb3JtYXQsXHJcblx0XHRmcm9tREI6IGZyb21EYkZvcm1hdFxyXG4gICAgfTtcclxufV0pOyIsIi8vZWRpdCBmYW1pbHkgbW9kYWwgdGVtcGxhdGVcclxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRGYW1pbHlDdHJsJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsJywgJyRsb2cnLCAnUmVzdWx0U2VydmljZScsICckaHR0cCcsICd2YWxpZFNlcnZpY2UnLCAndG9hc3RyJywnZGF0ZVNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwLCB2YWxpZFNlcnZpY2UsIHRvYXN0ciwgZGF0ZVNlcnZpY2UpIHtcclxuXHQvLyBzZXRzIHZhbGlkYXRpb24gZnJvbSBzZXJ2aWNlIGZvciBkb20gY2FsbHNcclxuXHQkc2NvcGUudmFsaWRhdGVJbnB1dCA9IHZhbGlkU2VydmljZS52YWxpZGF0ZUlucHV0O1xyXG5cdC8vc2VuZHMgdGhlIGFkdWx0cyBhbmQga2lkcyBhZnRlciB0aGUgcmVzdWx0cyBoYXZlIGJlZW4gb3JnYW5pemVkXHJcblx0JHNjb3BlLmFkdWx0cyA9IFJlc3VsdFNlcnZpY2UuYWR1bHRzO1xyXG5cdCRzY29wZS5raWRzID0gUmVzdWx0U2VydmljZS5raWRzO1xyXG5cdCRzY29wZS5mYW1pbHkgPSB7XHJcblx0XHRhZHVsdE9uZToge30sXHJcblx0XHRhZHVsdFR3bzoge30sXHJcblx0XHRlbWVyZ2VuY3k6IHt9LFxyXG5cdFx0Y2hpbGRyZW46IFtdLFxyXG5cdFx0ZG9uYXRpb25zOiBbXVxyXG5cdH07XHJcblx0JHNjb3BlLm5ld0NoaWxkID0ge307XHJcblx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XHJcblxyXG5cdCRzY29wZS5jbGVhckZhbWlseSA9IGZ1bmN0aW9uIChmb3Jtc0FycmF5KSB7XHJcblx0XHR0b2FzdHIuZXJyb3IoJ0NhbmNlbGxlZCcpO1xyXG5cdFx0JHNjb3BlLmZhbWlseSA9IHtcclxuXHRcdFx0YWR1bHRPbmU6IHt9LFxyXG5cdFx0XHRhZHVsdFR3bzoge30sXHJcblx0XHRcdGVtZXJnZW5jeToge30sXHJcblx0XHRcdGNoaWxkcmVuOiBbXSxcclxuXHRcdFx0ZG9uYXRpb25zOiBbXVxyXG5cdFx0fTtcclxuXHRcdCRzY29wZS5uZXdDaGlsZCA9IHt9O1xyXG5cdFx0JHNjb3BlLm5ld0RvbmF0aW9uID0ge307XHJcblx0XHRmb3Jtc0FycmF5LmZvckVhY2goZnVuY3Rpb24gKHYpIHtcclxuXHRcdFx0JCgnIycrIHYgKycgLmpzLXZhbGlkYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0JCh0aGlzKS5yZW1vdmVDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJCh0aGlzKS5kYXRhKCdwbGFjZWhvbGRlcicpKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdCRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9IHRydWU7XHJcblx0JHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2l6ZSwgaWQpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdmYW1pbHkgY2FsbCcsIGlkKTtcclxuXHRcdHJldHVybiAkaHR0cCh7XHJcblx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdHVybDogJy4uL2ZhbWlseScsXHJcblx0XHRcdHBhcmFtczoge2lkOiBpZH1cclxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xyXG5cdFx0XHRyZXNwb25zZS5kYXRhLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcInJlZm9ybWF0dGVkXCIsIGRhdGVTZXJ2aWNlLmZyb21EQihhW2ldLmJpcnRoZGF0ZSkpO1xyXG5cdFx0XHRcdGFbaV0uYmlydGhkYXRlID0gZGF0ZVNlcnZpY2UuZnJvbURCKHYuYmlydGhkYXRlKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJlc3BvbnNlLmRhdGEuZG9uYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0XHRhW2ldLmRhdGUgPSBkYXRlU2VydmljZS5mcm9tREIodi5kYXRlKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdCRzY29wZS5mYW1pbHkgPSByZXNwb25zZS5kYXRhO1xyXG5cdFx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuXHRcdFx0XHRhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcclxuXHRcdFx0XHR0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvZWRpdGZhbWlseS5odG1sJyxcclxuXHRcdFx0XHRjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxyXG5cdFx0XHRcdHNpemU6IHNpemUsXHJcblx0XHRcdFx0c2NvcGU6ICRzY29wZSxcclxuXHRcdFx0XHRyZXNvbHZlOiB7XHJcblx0XHRcdFx0XHRpdGVtczogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJHNjb3BlLmZhbWlseTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZWxlY3RlZEl0ZW0pIHtcclxuXHRcdFx0XHQkc2NvcGUuc2VsZWN0ZWQgPSBzZWxlY3RlZEl0ZW07XHJcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHQkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdCRzY29wZS50b2dnbGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHQkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSAhJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkO1xyXG5cdH07XHJcblxyXG5cdC8vIHNhdmUgZmFtaWx5XHJcblx0JHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcIlNhdmUgc3VibWl0dGVkXCIsICRzY29wZS5mYW1pbHkpO1xyXG5cclxuXHRcdC8vIGNoZWNrIGZvciBjaGlsZHJlbiwgcnVuIHRvREIgZm9ybWF0dGluZyBiZWZvcmUgc2VuZGluZ1xyXG5cdFx0aWYoJHNjb3BlLmZhbWlseS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcblx0XHRcdFx0YVtpXS5iaXJ0aGRhdGUgPSBkYXRlU2VydmljZS50b0RCKHYuYmlydGhkYXRlKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY2hlY2sgZm9yIGRvbmF0aW9uLCBydW4gdG9EQiBmb3JtYXR0aW5nIGJlZm9yZSBzZW5kaW5nXHJcblx0XHRpZigkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucy5sZW5ndGgpIHtcclxuXHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSwgYSkge1xyXG5cdFx0XHRcdGFbaV0uZGF0ZSA9IGRhdGVTZXJ2aWNlLnRvREIodi5kYXRlKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc29sZS5sb2coXCJTYXZpbmcgZmFtaWx5LCBhZnRlciB0b0RCIGJpcnRoZGF0ZXNcIiwgJHNjb3BlLmZhbWlseSk7XHJcblxyXG5cdFx0Ly8gaWYgaGFzIGlkLCB0aGVuIHBvc3RcclxuXHJcblx0XHRpZighJHNjb3BlLmZhbWlseS5pZCkge1xyXG5cclxuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJBZGRGYW1JbmZvRm9ybVwiLCBcIkFkZEZhbUVtZXJGb3JtXCJdKSkge1xyXG5cdFx0XHRcdCRodHRwKHtcclxuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHRcdFx0dXJsOiAnL2ZhbWlseScsXHJcblx0XHRcdFx0XHRkYXRhOiB7ZmFtaWx5OiAkc2NvcGUuZmFtaWx5fVxyXG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQb3N0ZWQgZmFtaWx5LCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuaWQgPSByZXMuZGF0YS5pZDtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRUd28gPSAocmVzLmRhdGEuYWR1bHRUd28pID8gcmVzLmRhdGEuYWR1bHRUd28gOiB7fTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuZW1lcmdlbmN5ID0gKHJlcy5kYXRhLmVtZXJnZW5jeSkgPyByZXMuZGF0YS5lbWVyZ2VuY3kgOiB7fTtcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gW107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zID0gW107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDogW107XHJcblx0XHRcdFx0XHR0b2FzdHIuc3VjY2VzcygnRmFtaWx5IHNhdmVkIScpO1xyXG5cdFx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHRvYXN0ci5lcnJvcignRmFpbGVkIHRvIGFkZCBmYW1pbHknKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fWVsc2Uge1xyXG5cdFx0XHRcdHRvYXN0ci5lcnJvcignVW5hdXRob3JpemVkIGNoYXJhY3RlcicpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQWRkIGZhbWlseSBmYWlsZWQgaW5wdXQgdGVzdHNcIik7XHJcblx0XHRcdH1cclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0aWYodmFsaWRTZXJ2aWNlLnZhbGlkYXRlRm9ybShbXCJFZGl0RmFtSW5mb0Zvcm1cIiwgXCJFZGl0RmFtRW1lckZvcm1cIl0pKSB7XHJcblx0XHRcdFx0Ly8gdXBkYXRlIGZhbWlseSAtIGhhcyBubyBpZFxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwidXBkYXRlIGZhbWlseVwiLCAkc2NvcGUuZmFtaWx5KTtcclxuXHRcdFx0XHQkaHR0cCh7XHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQVVQnLFxyXG5cdFx0XHRcdFx0dXJsOiAnL2ZhbWlseScsXHJcblx0XHRcdFx0XHRkYXRhOiB7ZmFtaWx5OiAkc2NvcGUuZmFtaWx5fVxyXG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJQdXQgZmFtaWx5LCBnb3QgaWQgXCIsIHJlcy5kYXRhKTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuaWQgPSByZXMuZGF0YS5pZDtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRPbmUgPSAocmVzLmRhdGEuYWR1bHRPbmUpID8gcmVzLmRhdGEuYWR1bHRPbmUgOiB7fTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuYWR1bHRUd28gPSAocmVzLmRhdGEuYWR1bHRUd28pID8gcmVzLmRhdGEuYWR1bHRUd28gOiB7fTtcclxuXHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuZW1lcmdlbmN5ID0gKHJlcy5kYXRhLmVtZXJnZW5jeSkgPyByZXMuZGF0YS5lbWVyZ2VuY3kgOiB7fTtcclxuXHRcdFx0XHRcdGlmICgkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gW107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuID0gKHJlcy5kYXRhLmNoaWxkcmVuKSA/IHJlcy5kYXRhLmNoaWxkcmVuIDogW107XHJcblx0XHRcdFx0XHRpZiAoJHNjb3BlLmZhbWlseS5kb25hdGlvbnMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdCRzY29wZS5mYW1pbHkuZG9uYXRpb25zID0gW107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyA9IChyZXMuZGF0YS5kb25hdGlvbnMpID8gcmVzLmRhdGEuZG9uYXRpb25zIDogW107XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1lbHNlIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVkaXQgZmFtaWx5IGZhaWxlZCBpbnB1dCB0ZXN0c1wiKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIGZvciBhcHBlbmRpbmcgY2hpbGRyZW4gdG8gbW9kZWwgYmVmb3JlIHNhdmluZyBuZXcgZmFtaWx5XHJcblx0JHNjb3BlLmFkZENoaWxkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Ly8gZXhpc3RzIGNoZWNrIG5lZWRlZCBmb3IgYXV0byBhZGQgaWYgY2xpY2sgc2F2ZSBpbnN0ZWFkIG9mIGFkZCBmaXJzdFxyXG5cdFx0aWYoJHNjb3BlLm5ld0NoaWxkLmZpcnN0TmFtZSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcImNoaWxkIGFkZGVkXCIsICRzY29wZS5uZXdDaGlsZCwgJHNjb3BlLmZhbWlseS5jaGlsZHJlbik7XHJcblx0XHRcdC8vIGlmIHRydWUsIHRoZW4gdXBkYXRlIHRoYXQgaW5kZXhcclxuXHRcdFx0aWYoJHNjb3BlLmVkaXRpbmdDaGlsZCkge1xyXG5cdFx0XHRcdCRzY29wZS5mYW1pbHkuY2hpbGRyZW5bJHNjb3BlLmVkaXRpbmdDaGlsZF0gPSAkc2NvcGUubmV3Q2hpbGQ7XHJcblx0XHRcdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGZhbHNlO1xyXG5cdFx0XHRcdHRvYXN0ci5zdWNjZXNzKCdDaGlsZCB1cGRhdGVkIScpO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0Ly8gZWxzZSBwdXNoIHRvIGFycmF5XHJcblx0XHRcdFx0JHNjb3BlLmZhbWlseS5jaGlsZHJlbi5wdXNoKCRzY29wZS5uZXdDaGlsZCk7XHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ0NoaWxkIGFkZGVkIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdCRzY29wZS5uZXdDaGlsZCA9IHt9O1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIGVkaXQgY2hpbGQgb24gdGhlIGFkZCBjaGlsZHJlbiB0YWIgb2YgYWRkIGZhbWlseVxyXG5cdCRzY29wZS5lZGl0Q2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuXHRcdC8vIHNhdmUgaW5kZXggb2YgY2hpbGQgZWRpdGluZ1xyXG5cdFx0JHNjb3BlLmVkaXRpbmdDaGlsZCA9IGluZGV4O1xyXG5cdFx0JHNjb3BlLm5ld0NoaWxkID0gJHNjb3BlLmZhbWlseS5jaGlsZHJlbltpbmRleF07XHJcblx0fTtcclxuXHJcblx0JHNjb3BlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcblx0XHRjb25zb2xlLmxvZyhcImluIHJlbW92ZSBjaGlsZCBpbmRleFwiLCBpbmRleCwgXCIgZWRpdCBcIiwgJHNjb3BlLmVkaXRpbmdDaGlsZCk7XHJcblx0XHQkc2NvcGUuZmFtaWx5LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XHJcblx0XHRpZihpbmRleCA9PSAkc2NvcGUuZWRpdGluZ0NoaWxkKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiZWRpdCBtYXRjaFwiKTtcclxuXHRcdFx0JHNjb3BlLmNsZWFyQ2hpbGQoKTtcclxuXHRcdH1lbHNlIHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJubyBlZGl0IG1hdGNoXCIpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIGNsZWFycyB0ZXh0IGJveGVzIGluIGFkZCBmYW1pbHktPmNoaWxkcmVuIHRhYlxyXG5cdCRzY29wZS5jbGVhckNoaWxkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJpbiBjbGVhciBjaGlsZFwiKTtcclxuXHRcdCRzY29wZS5uZXdDaGlsZCA9IHtcclxuXHRcdFx0Zmlyc3ROYW1lOiAnJyxcclxuXHRcdFx0bGFzdE5hbWU6ICcnLFxyXG5cdFx0XHRiaXJ0aGRhdGU6ICcnLFxyXG5cdFx0XHRzY2hvb2w6ICcnLFxyXG5cdFx0XHRub3RlczogJydcclxuXHRcdH07XHJcblx0XHQkc2NvcGUuZWRpdGluZ0NoaWxkID0gZmFsc2U7XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIGFkZHMgZG9uYXRpb24gdG8gZmFtaWx5IG9iamVjdFxyXG5cclxuLy8gYWRkcyBkb25hdGlvbiB0byBmYW1pbHkgb2JqZWN0XHJcblx0JHNjb3BlLmFkZERvbmF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0Ly9jb25zb2xlLmxvZyhcImFkZCBkb25hdGlvblwiLCAkc2NvcGUubmV3RG9uYXRpb24pO1xyXG5cdFx0Ly8gcmVnZXggY2hlY2sgbmVlZGVkIGZvciBhdXRvIGFkZCBpZiBjbGljayBzYXZlIGluc3RlYWQgb2YgYWRkIGZpcnN0XHJcblx0XHRpZigvXlswLTldKyguWzAtOV17MCwyfSk/JC8udGVzdCgkc2NvcGUubmV3RG9uYXRpb24uYW1vdW50KSkge1xyXG5cdFx0XHQvL3ZhciB0ZW1wID0gJHNjb3BlLm5ld0RvbmF0aW9uO1xyXG5cdFx0XHQvL3RlbXAuZGF0ZSA9IGRhdGVTZXJ2aWNlLnRvREIodGVtcC5kYXRlKTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJhZGQgZG9uYXRpb25cIiwgJHNjb3BlLm5ld0RvbmF0aW9uKTtcclxuXHRcdFx0JHNjb3BlLmZhbWlseS5kb25hdGlvbnMucHVzaCgkc2NvcGUubmV3RG9uYXRpb24pO1xyXG5cdFx0XHQkc2NvcGUubmV3RG9uYXRpb24gPSB7fTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJhZGRlZCBkb25hdGlvblwiLCAkc2NvcGUuZmFtaWx5LmRvbmF0aW9ucyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8vLyBwcmV2ZW50IGFjY2lkZW50YWwgYmFja3NcclxuXHQvLyRzY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiggZXZlbnQsIG9sZFVybCApIHtcclxuXHQvL1x0Y29uc29sZS5sb2coXCJvbGQgdXJsOiBcIiwgb2xkVXJsKTtcclxuXHQvL1x0aWYoLyhhZGRmYW1pbHkpLy50ZXN0KG9sZFVybCkpIHtcclxuXHQvL1x0XHR2YXIgYW5zd2VyID0gY29uZmlybShcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSB0aGlzIHBhZ2U/XCIpO1xyXG5cdC8vXHRcdGlmICghYW5zd2VyKSB7XHJcblx0Ly9cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdC8vXHRcdH1cclxuXHQvL1x0fVxyXG5cdC8vfSk7XHJcblxyXG59XSk7IiwiLy9jb250cm9sbGVycyBmb3IgbG9naW5cclxuYXBwLmNvbnRyb2xsZXIoJ2xvZ2luQ3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ2F1dGhTZXJ2aWNlJywgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJ3RvYXN0cicsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsIGF1dGhTZXJ2aWNlLCAkbG9jYXRpb24sICRyb290U2NvcGUsIHRvYXN0cil7XHJcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkaHR0cC5wb3N0KCcvbG9naW4nLCAkc2NvcGUuZm9ybSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBhdXRoU2VydmljZS5zYXZlVG9rZW4ocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBhdXRoU2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9zZWFyY2hcIik7XHJcbiAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcignaW5jb3JyZWN0IHVzZXJuYW1lIG9yIHBhc3N3b3JkJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG59XSk7XHJcbiIsIlxyXG4vL1RoaXMgc2hvdWxkIGdldCB0aGUgc2VhcmNoIGl0ZW1cclxuYXBwLmNvbnRyb2xsZXIoJ3NlYXJjaEZ1bmN0aW9uJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnUmVzdWx0U2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBSZXN1bHRTZXJ2aWNlKSB7XHJcbiAgICAkc2NvcGUuZm9ybUlucHV0PXt9O1xyXG5cclxuICAgICRzY29wZS5zZWFyY2hCdG4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9wYXNzZXMgaW4gc2VhcmNoIHRleHQgdG8gc2VydmljZVxyXG4gICAgICAgUmVzdWx0U2VydmljZS5tYWtlRGF0YUNhbGwoJHNjb3BlLmZvcm1JbnB1dC5kYXRhKTtcclxuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyB0aGUgaW5wdXQgdGV4dCcsICRzY29wZS5mb3JtSW5wdXQpO1xyXG4gICAgICAgIC8vZW1wdHlzIHRoZSBzZWFyY2ggYm94XHJcbiAgICAgICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcclxuICAgIH07XHJcblxyXG59XSk7XHJcbiIsIi8vVGhpcyBzZXJ2aWNlIHNob3VsZCBwYXNzIGRhdGEgYmV0d2VlbiBjb250cm9sbGVyc1xyXG5hcHAuZmFjdG9yeSgnUmVzdWx0U2VydmljZScsIFsnJGh0dHAnLGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIGFkdWx0cyA9IFtdO1xyXG4gICAgdmFyIGNvbXBhbmllcyA9IFtdO1xyXG4gICAgdmFyIGtpZHMgPSBbXTtcclxuXHJcbiAgICB2YXIgbWFrZURhdGFDYWxsID0gZnVuY3Rpb24ocGFzc2VkRGF0YSkge1xyXG4gICAgICAgIHJldHVybiAkaHR0cCh7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgIHVybDogJy4uL3NlYXJjaCcsXHJcbiAgICAgICAgICAgIHBhcmFtczp7c2VhcmNoOnBhc3NlZERhdGF9XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgIGdldENvbXBhbmllcyhyZXN1bHRzKTtcclxuICAgICAgICAgICAgZ2V0S2lkcyhyZXN1bHRzKTtcclxuICAgICAgICAgICAgZ2V0QWR1bHRzKHJlc3VsdHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHZhciBnZXRDb21wYW5pZXMgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgIHZhciBnZXRFbGVtZW50MSA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICAgICAgICAgIGNvbXBhbmllcy5zcGxpY2UoMCxjb21wYW5pZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NvbXBhbnknKVxyXG4gICAgICAgICAgICAgICAgY29tcGFuaWVzLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDEoYXJyYXkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnQxJyxjb21wYW5pZXMpO1xyXG4gICAgICAgIHJldHVybiBjb21wYW5pZXNcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldEFkdWx0cyA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIGdldEVsZW1lbnQyID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICAgICAgYWR1bHRzLnNwbGljZSgwLGFkdWx0cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnYWR1bHQnKVxyXG4gICAgICAgICAgICAgICAgICAgIGFkdWx0cy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZ2V0RWxlbWVudDIoYXJyYXkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGluIGdldEVsZW1lbnQyJywgYWR1bHRzKTtcclxuICAgICAgICByZXR1cm4gYWR1bHRzXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXRLaWRzID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICB2YXIgZ2V0RWxlbWVudDMgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgICAgICBraWRzLnNwbGljZSgwLGtpZHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2NoaWxkJylcclxuICAgICAgICAgICAgICAgICAgICBraWRzLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBnZXRFbGVtZW50MyhhcnJheSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgZ2V0RWxlbWVudHMzJywga2lkcyk7XHJcbiAgICAgICAgcmV0dXJuIGtpZHNcclxuICAgIH07XHJcblxyXG4gICAgLy9wdWJsaWNcclxuICAgIHZhciBwdWJsaWNBcGkgPSB7XHJcbiAgICAgICAgZ2V0S2lkczogZ2V0S2lkcyxcclxuICAgICAgICBnZXRBZHVsdHM6IGdldEFkdWx0cyxcclxuICAgICAgICBnZXRDb21wYW5pZXM6IGdldENvbXBhbmllcyxcclxuICAgICAgICBtYWtlRGF0YUNhbGw6IG1ha2VEYXRhQ2FsbCxcclxuICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxyXG4gICAgICAgIGNvbXBhbmllczogY29tcGFuaWVzLFxyXG4gICAgICAgIGFkdWx0czogYWR1bHRzLFxyXG4gICAgICAgIGtpZHM6IGtpZHNcclxuICAgIH07XHJcbiAgICByZXR1cm4gcHVibGljQXBpO1xyXG59XSk7IiwiLy8gUGxlYXNlIG5vdGUgdGhhdCAkbW9kYWxJbnN0YW5jZSByZXByZXNlbnRzIGEgbW9kYWwgd2luZG93IChpbnN0YW5jZSkgZGVwZW5kZW5jeS5cclxuLy8gSXQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSAkdWliTW9kYWwgc2VydmljZSB1c2VkIGFib3ZlLlxyXG5cclxuLy9uZWVkZWQgZm9yIG1vZGFsPz8gcHJldHR5IHN1cmVcclxuYXBwLmNvbnRyb2xsZXIoJ01vZGFsSW5zdGFuY2VDdHJsJyxbJyRzY29wZScsJyRtb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcclxuXHJcbiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLnNlbGVjdGVkLml0ZW0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgfTtcclxufV0pOyIsImFwcC5jb250cm9sbGVyKCduYXZDdHJsJywgWydhdXRoU2VydmljZScsJyRzY29wZScsJyRyb290U2NvcGUnLCckbG9jYXRpb24nLCBmdW5jdGlvbihhdXRoU2VydmljZSwgJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pe1xyXG4gICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xyXG5cclxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xyXG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvaG9tZScpO1xyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xyXG4gICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcclxuICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XHJcbiAgICB9XHJcbn1dKTtcclxuIiwiLy8gQWpheCBmb3IgY3JlYXRpbmcgdGhlIGNvbnRhY3QgbGlzdCBpbiBjb25zdGFudCBjb250YWN0XHJcbmFwcC5jb250cm9sbGVyKCduZXdDb250YWN0TGlzdENvbnRyb2xsZXInLFsnbmV3Q29udGFjdExpc3REYXRhJywnJHNjb3BlJywgJyRyb290U2NvcGUnLCAndG9hc3RyJywgZnVuY3Rpb24obmV3Q29udGFjdExpc3REYXRhLCAkc2NvcGUsICRyb290U2NvcGUsIHRvYXN0cikge1xyXG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcclxuXHJcbiAgICAkc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2hpZGUnKTtcclxuICAgICAgICAkcm9vdFNjb3BlLmhpZGUgPSB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUubGlzdG5hbWUgPSB7fTtcclxuXHJcbiAgICAkc2NvcGUuY3JlYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGUgbGlzdDogXCIgKyAkc2NvcGUubGlzdG5hbWUuaW5wdXQpO1xyXG4gICAgICAgIC8vcGFzc2VzIGxpc3QgbmFtZSBzZXJ2aWNlXHJcbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvc3RMaXN0KCRzY29wZS5saXN0bmFtZS5pbnB1dCwgZnVuY3Rpb24gKHN0YXR1cykge1xyXG5cdFx0XHRpZihzdGF0dXMgPT09IHRydWUpIHtcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdsaXN0ICMnLG5ld0NvbnRhY3RMaXN0RGF0YS5saXN0TnVtKTtcclxuXHRcdFx0XHQkc2NvcGUubGlzdG5hbWU9e307XHJcblx0XHRcdFx0dG9hc3RyLnN1Y2Nlc3MoJ1N1Y2Nlc3NmdWxseSBjcmVhdGVkIGxpc3QnKTtcclxuXHRcdFx0XHQkc2NvcGUuaGlkZSgpO1xyXG5cdFx0XHR9ZWxzZSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJmYWlsZWQgdG8gY3JlYXRlIGxpc3RcIik7XHJcblx0XHRcdFx0dG9hc3RyLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGxpc3QnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cclxuICAgIH07XHJcbn1dKTtcclxuXHJcblxyXG4iLCJcclxuYXBwLnNlcnZpY2UoJ25ld0NvbnRhY3RMaXN0RGF0YScsIFsnQ29udGFjdExpc3REYXRhU2VydmljZScsICckaHR0cCcsICckdGltZW91dCcsXHJcbiAgICBmdW5jdGlvbiAoQ29udGFjdExpc3REYXRhU2VydmljZSwgJGh0dHAsICR0aW1lb3V0KSB7XHJcbiAgICAgICAgdmFyIGxpc3ROdW0gPSBcIlwiO1xyXG4gICAgICAgIHZhciBpbXBvcnREYXRhQXJyYXkgPVtdO1xyXG5cclxuICAgICAgICB0aGlzLnBvc3RMaXN0ID0gZnVuY3Rpb24gKG5hbWUsIGNiKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlkIHRoZSBuYW1lIG1ha2UgaXQgdG8gdGhlIHNlcnZpY2U/IFwiICsgbmFtZSApO1xyXG5cclxuXHRcdFx0Ly8kdGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlO30sIDUwMDApO1xyXG5cdFx0XHQvL3JldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvbmV3Q29udGFjdExpc3QnLCB7bmFtZTogbmFtZX0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGxpc3ROdW0gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJZD8gXCIsIGxpc3ROdW0pO1xyXG5cdFx0XHRcdGNiKHRydWUpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFpbGVkIHRvIGNyZWF0ZVwiLCBkYXRhKTsgLy9lcnJvclxyXG5cdFx0XHRcdC8vcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdGNiKGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBvcExpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFPYmplY3QgPSB7XHJcbiAgICAgICAgICAgICAgICBcImltcG9ydERhdGFBcnJheVwiOiBpbXBvcnREYXRhQXJyYXksXHJcbiAgICAgICAgICAgICAgICBcImxpc3ROdW1cIjogbGlzdE51bVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ290IHRvIHBvcExpc3QnKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ltcG9ydERhdGFBcnJheTogJyx0aGlzLmltcG9ydERhdGFBcnJheSwgJ1xcbnR5cGU6ICcsIHR5cGVvZiB0aGlzLmltcG9ydERhdGFBcnJheSk7XHJcbiAgICAgICAgICAgIGdldENoZWNrZWQobGlzdCk7XHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9wb3B1bGF0ZUNvbnRhY3RMaXN0JywgdGhpcy5kYXRhT2JqZWN0KS50aGVuKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Bvc3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW1wb3J0RGF0YUFycmF5OiAnLHRoaXMuaW1wb3J0RGF0YUFycmF5LCAnXFxudHlwZTogJywgdHlwZW9mIHRoaXMuaW1wb3J0RGF0YUFycmF5KTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvL2dldCBhbGwgdGhlIGNoZWNrZWQgZWxlbWVudHMgYW5kIHN0dWZmIHRoZW0gaW4gYW4gYXJyYXlcclxuICAgICAgICB2YXIgZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uIChsKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRDaGVja2VkIGlzIHJ1bm5pbmcnKTtcclxuICAgICAgICAgICAgbC5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdE9iamVjdCA9XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuZW1haWwgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmaXJzdF9uYW1lXCI6b2JqZWN0LmZpcnN0TmFtZSB8fCAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogb2JqZWN0Lmxhc3ROYW1lIHx8ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbXBhbnlfbmFtZVwiOiBvYmplY3QuY29tcGFueSB8fCAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRyZXNzZXNcIjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpdHk6IG9iamVjdC5jaXR5IHx8ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvbnRhY3RPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydERhdGFBcnJheS5wdXNoKHRoaXMuY29udGFjdE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfV0pO1xyXG5cclxuXHJcbiIsImFwcC5jb250cm9sbGVyKCdwb3BMaXN0Q29udHJvbGxlcicsWyduZXdDb250YWN0TGlzdERhdGEnLCckc2NvcGUnLCckaHR0cCcsIGZ1bmN0aW9uKG5ld0NvbnRhY3RMaXN0RGF0YSwgJHNjb3BlLCAkaHR0cCkge1xyXG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcclxuXHJcblxyXG4gICAgJHNjb3BlLmxpc3ROYW1lID0ge307XHJcblxyXG4gICAgJHNjb3BlLnBvcHVsYXRlTGlzdCAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGUgbGlzdDogXCIgKyBzY29wZS5saXN0TmFtZS5pbnB1dCk7XHJcbiAgICAgICAgLy9wYXNzZXMgaW4gc2VhcmNoIHRleHQgdG8gc2VydmljZVxyXG4gICAgICAgIG5ld0NvbnRhY3RMaXN0RGF0YS5wb3BMaXN0KCk7XHJcbiAgICAgICAgLy92YXIgbGlzdEVuZCA9IHtcclxuICAgICAgICAvLyAgICBcImxpc3RzXCI6IFtsaXN0TnVtXSxcclxuICAgICAgICAvLyAgICBcImNvbHVtbl9uYW1lc1wiOiBbXHJcbiAgICAgICAgLy8gICAgXCJFTUFJTFwiLFxyXG4gICAgICAgIC8vICAgIFwiRklSU1QgTkFNRVwiLFxyXG4gICAgICAgIC8vICAgIFwiTEFTVCBOQU1FXCIsXHJcbiAgICAgICAgLy8gICAgXCJDSVRZXCIsXHJcbiAgICAgICAgLy8gICAgXCJDT01QQU5ZIE5BTUVcIlxyXG4gICAgICAgIC8vXX1cclxuXHJcblxyXG4gICAgICAgICRzY29wZS5saXN0TmFtZT17fTtcclxuICAgIH07XHJcbn1dKTtcclxuXHJcbiIsIlxyXG4vL3JlZ2lzdGVyIGNvbnRyb2xsZXJcclxuYXBwLmNvbnRyb2xsZXIoJ3JlZ2lzdGVyQ3RybCcsIFsgJyRzY29wZScsICckaHR0cCcsICckbG9jYXRpb24nLCAndG9hc3RyJywgJ3ZhbGlkU2VydmljZScsICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uLCB0b2FzdHIsIHZhbGlkU2VydmljZSkge1xyXG5cdC8vIHNldHMgdmFsaWRhdGlvbiBmcm9tIHNlcnZpY2UgZm9yIGRvbSBjYWxsc1xyXG5cdCRzY29wZS52YWxpZGF0ZUlucHV0ID0gdmFsaWRTZXJ2aWNlLnZhbGlkYXRlSW5wdXQ7XHJcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJyZWdpc3RlckN0cmxcIik7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygncmVnaXN0ZXJDb250cm9sbGVyIHN1Ym1pdDonLCAkc2NvcGUuZm9ybSwgJHNjb3BlLmZvcm0udXNlcm5hbWUpO1xyXG4gICAgICAgICRodHRwLnBvc3QoJy9yZWdpc3RlcicsICRzY29wZS5mb3JtKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIik7XHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcImFkbWluIGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgIHRvYXN0ci5lcnJvcignZmFpbGVkIHRvIGFkZCBhZG1pbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufV0pO1xyXG4iLCJhcHAuY29udHJvbGxlcigncmVzZXRDdHJsJywgWyAnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICdhdXRoU2VydmljZScsICd0b2FzdHInLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uLCBhdXRoU2VydmljZSwgdG9hc3RyKSB7XHJcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdlZGl0IHBhc3N3b3JkOicsICRzY29wZS5mb3JtKTtcclxuXHRcdHZhciB0ZW1wVXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcclxuXHRcdGNvbnNvbGUubG9nKFwiYXV0aCB1c2VyXCIsIHRlbXBVc2VyKTtcclxuXHRcdC8vIGFkZCBpbiBpZCwgdXNlcm5hbWVcclxuXHRcdHZhciB1c2VyID0gJHNjb3BlLmZvcm07XHJcblx0XHR1c2VyLmlkID0gdGVtcFVzZXIuaWQ7XHJcblx0XHR1c2VyLnVzZXJuYW1lID0gdGVtcFVzZXIudXNlcm5hbWU7XHJcblx0XHRjb25zb2xlLmxvZyhcInByZXBhcmVkXCIsIHVzZXIpO1xyXG4gICAgICAgICRodHRwLnB1dCgnL2FkbWluJywgdXNlcilcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcygncGFzc3dvcmQgY2hhbmdlZCcpO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIik7XHJcbiAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdG9hc3RyLmVycm9yKCdmYWlsZWQgdG8gdXBkYXRlIHBhc3N3b3JkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XSk7XHJcbiIsImFwcC5zZXJ2aWNlKCd2YWxpZFNlcnZpY2UnLCBbZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciB2YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24gKHR5cGUsIGlkKSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInZhbGlkYXRlSW5wdXQoKVwiKTtcclxuICAgICAgICAvLyBzdG9yZXMgdGhlIGZvcm0gYmVpbmcgY2FsbGVkIG9uXHJcbiAgICAgICAgdmFyIHBhdHRlcm47XHJcbiAgICAgICAgdmFyICRvYmogPSAoaWQpID8gJCgnIycrIGlkKSA6IGZhbHNlO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJvYmplY3QgaXMgXCIsICRvYmosIHR5cGUsIGlkKTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcclxuICAgICAgICAgICAgY2FzZSBcImNpdHlcIjpcclxuICAgICAgICAgICAgY2FzZSBcInN0YXRlXCI6XHJcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgYW5kIGFscGhhIGNoYXJzLCBhcyB3ZWxsIGFzIHdoaXRlIHNwYWNlIGFuZCBhIGZldyBleHRyYSBjaGFyc1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtelxccywuJy1dezAsMjh9LztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY29ycE5hbWVcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOystXXswLDc1fS87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOys6KCklJi1dezAsNTB9LztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiemlwXCI6XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL15bMC05XXs1fSQvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJwaG9uZVwiOlxyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eKFsoXVswLTldezN9WyldfFswLTldezN9KVtcXHNcXC0uXT9bMC05XXszfVtcXHNcXC0uXT9bMC05XXs0fSQvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbFwiOlxyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOS5fJSstXStAW2EtekEtWjAtOS4tXStcXC5bYS16QS1aXXsyLH0kLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibm90ZXNcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXlthLXpBLVowLTlcXHMsLj9AISMnfipfOys6KCklJjw+XFxbXFxde31cXC09XCJ8YFxcXFxcXC9dezAsMjUwfS87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImV4dFwiOlxyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eW2EtekEtWjAtOVxcczotXXswLDE1fSQvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkYXRlXCI6XHJcbiAgICAgICAgICAgICAgICAvL3BhdHRlcm4gPSAvXjIwWzAtOV17Mn1bLV0oMFsxLTldfDFbMC0yXSlbLV0oMFsxLTldfFsxLTJdWzAtOV18M1swMV0pJC87XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gL14oMD9bMS05XXwxWzAtMl0pXFwvKDA/WzEtOV18WzEtMl1bMC05XXwzWzAxXSlcXC8yMFswLTldezJ9JC87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJpcnRoZGF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IC9eKDA/WzEtOV18MVswLTJdKVxcLygwP1sxLTldfFsxLTJdWzAtOV18M1swMV0pXFwvKCgxOTlbMC05XXwyMClbMC05XXsyfSkkLztcclxuICAgICAgICAgICAgICAgIC8vcGF0dGVybiA9IC9eKDE5OVswLTldfDIwWzAtOV17Mn0pWy1dKDBbMS05XXwxWzAtMl0pWy1dKDBbMS05XXxbMS0yXVswLTldfDNbMDFdKSQvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhbW91bnRcIjpcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSAvXihbXFwkXT9bXFxkXSsoWy5dW1xcZF17Mn0pPyl7MSwxMH0kLztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwidXNlcm5hbWVcIjpcclxuXHRcdFx0XHRwYXR0ZXJuID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pW2EtekEtWlxcZF9cXC1dezgsMjB9JC87XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJwYXNzd29yZFwiOlxyXG5cdFx0XHRcdC8vcGF0dGVybiA9IC9eKFthLXpdK1tBLVpdK1swLTldK1stX10/KXs4LDIwfSQvO1xyXG5cdFx0XHRcdHBhdHRlcm4gPSAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZClbYS16QS1aXFxkXXs4LDIwfSQvO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlIFwic2VhcmNoXCI6XHJcblx0XHRcdFx0cGF0dGVybiA9IC9eW2EtekEtWjAtOVxccywuP0AhIyd+Kl87Ky1dezAsNzV9JC87XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgXCJhZ2VcIjpcclxuXHRcdFx0XHRwYXR0ZXJuID0gL15bMC05XXsxLDJ9JC87XHJcblx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiaW52YWxpZCBjbGFzcyBzZWFyY2hcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIHJlcXVpcmVkIG9yIHRyaW1tZWQgbGVuZ3RoIGlzIG5vdCAwLCB0aGVuIHZhbGlkYXRlIGluZm9cclxuICAgICAgICBpZigkb2JqLmF0dHIoJ3JlcXVpcmVkJykgfHwgJG9iai52YWwoKSkge1xyXG4gICAgICAgICAgICAvLyBjaGVja3MgaWYgdmFsdWUgbWF0Y2hlcyByZWdleCBmb3IgZmllbGQgdHlwZVxyXG4gICAgICAgICAgICBpZighcGF0dGVybi50ZXN0KCRvYmoudmFsKCkudHJpbSgpKSB8fCAkb2JqLnZhbCgpLnRyaW0oKS5sZW5ndGggPT0gMCAmJiAkb2JqLmF0dHIoJ3JlcXVpcmVkJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGZhaWxzLCBhZGRzIGludmFsaWQgY2xhc3MgKGhpZ2hsaWdodGluZyksIGNoYW5nZXMgcGxhY2Vob2xkZXIgdG8gd2hhdCBzaG91bGQgYmUgZW50ZXJlZFxyXG4gICAgICAgICAgICAgICAgJG9iai5hZGRDbGFzcygnaW52YWxpZCcpLmF0dHIoJ3BsYWNlaG9sZGVyJywgJG9iai5kYXRhKCdpbnZhbGlkJykpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHR5cGUsICcgZmFpbGVkIHRlc3QnLCBwYXR0ZXJuKTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBwYXNzZXMsIHJlbW92ZXMgaW52YWxpZCBjbGFzcywgcmVzZXRzIHBsYWNlaG9sZGVyIHRvIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICRvYmoucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICRvYmouZGF0YSgncGxhY2Vob2xkZXInKSk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHR5cGUsICcgcGFzc2VkIHRlc3QnLCBwYXR0ZXJuKTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cdHZhciB2YWxpZGF0ZUZvcm0gPSBmdW5jdGlvbiAoZm9ybXMpIHtcclxuXHRcdHZhciBwYXNzID0gdHJ1ZTtcclxuXHRcdGZvcm1zLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuXHRcdFx0JCgnIycrIHYgKycgLmpzLXZhbGlkYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0aWYodmFsaWRhdGVJbnB1dCgkKHRoaXMpLmRhdGEoJ3R5cGUnKSwgJCh0aGlzKS5hdHRyKCdpZCcpKSA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygkKHRoaXMpLmF0dHIoJ2lkJykgK1wiIGZhaWxlZCB0aGUgdGVzdCBcIisgJCh0aGlzKS5kYXRhKCd0eXBlJykgK1wiIGVudGVyZWQgaW5mbzogXCIrICQodGhpcykudmFsKCkpO1xyXG5cdFx0XHRcdFx0cGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBwYXNzO1xyXG5cdH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZGF0ZUlucHV0OiB2YWxpZGF0ZUlucHV0LFxyXG5cdFx0dmFsaWRhdGVGb3JtOiB2YWxpZGF0ZUZvcm1cclxuICAgIH07XHJcbn1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
