function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap","checklist-model"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html",controller:"editFamilyCtrl"}).when("/addcorp",{templateUrl:"private/addcorp.html",controller:"editCorpCtrl"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,a,e){return{request:function(t){return t.headers=t.headers||{},e.isAuthed()&&(t.headers.Authorization="Bearer "+e.getToken()),t},response:function(e){return 401===e.status&&a.path("/"),e||t.when(e)},responseError:function(e){return 401===e.status?a.path("/"):console.log(e.status),t.reject(e)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(a){if(a){var e=a.split(".")[1],o=e.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(a){t.localStorage.jwtToken=a},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var a=this.parseJwt(t),e=Math.round((new Date).getTime()/1e3)<=a.exp;return e||this.logout(),e}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,a,e,o,n,i){t.validateInput=i.validateInput,t.companies=o.companies,t.corp={contact:{},donations:[]},t.newDonation={},t.animationsEnabled=!0,t.open=function(o,i){return console.log("corp call",i),n({method:"GET",url:"../corporation",params:{id:i}}).then(function(n){t.company=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.corp),t.corp.id?(console.log("insert corp",t.corp),n({method:"PUT",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Put corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})):n({method:"POST",url:"/corporation",data:{corp:t.corp}}).then(function(a){console.log("Posted corp, got id ",a.data),t.corp.id=a.data.id,t.corp.info=a.data.info?a.data.info:{},t.contact=a.data.contact?a.data.contact:{},t.corp.donations.length&&(t.corp.donations=[]),t.donations=a.data.donations?a.data.donations:{}})},t.addDonation=function(){console.log("added donation",t.newDonation,t.corp.donations),t.corp.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService","newContactListData",function(t,a,e,o){t.type={},t.age={},t.zip={},t.includedEmails=[],t.emailList=[],t.searchListBtn=function(){if("zipCk"==t.type&&e.makeDataCall("zip",t.zip.data).then(function(a){t.emailList=a,console.log(t.emailList)}),"ageCk"==t.type){var a=e.makeDataCall("age",t.age.data);a.then(function(a){console.log(a),t.emailList=a})}if("fam"==t.type){var o=e.makeDataCall("family","");o.then(function(a){t.emailList=a,console.log(a)})}if("corp"==t.type){var n=e.makeDataCall("company","");n.then(function(a){t.emailList=a,console.log(a)})}t.type={},t.age={},t.zip={}},t.populateList=function(){console.log(t.includedEmails),o.popList(t.includedEmails)}}]),app.factory("ContactListDataService",["$http","$q",function(t,a){function e(e,o){var n=a.defer();return console.log("this is in the make data call",e,o),t({method:"GET",url:"../createMailList",params:{type:e,search:o}}).then(function(t){data=t.data,n.resolve(t.data)}),n.promise}return{data:[],makeDataCall:e}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http","validService",function(t,a,e,o,n,i){t.validateInput=i.validateInput,t.adults=o.adults,t.kids=o.kids,t.family={adultOne:{},adultTwo:{},emergency:{},children:[],donations:[]},t.newChild={},t.newDonation={},t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),n({method:"GET",url:"../family",params:{id:i}}).then(function(n){t.family=n.data;var i=a.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(a){t.selected=a},function(){e.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled},t.save=function(){console.log("Save submitted",t.family),t.family.id?(console.log("insert family",t.family),n({method:"PUT",url:"/family",data:{family:t.family}}).then(function(a){console.log("Put family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})):n({method:"POST",url:"/family",data:{family:t.family}}).then(function(a){console.log("Posted family, got id ",a.data),t.family.id=a.data.id,t.family.adultOne=a.data.adultOne?a.data.adultOne:{},t.family.adultTwo=a.data.adultTwo?a.data.adultTwo:{},t.family.emergency=a.data.emergency?a.data.emergency:{},t.family.children.length&&(t.family.children=[]),t.family.children=a.data.children?a.data.children:[],t.family.donations.length&&(t.family.donations=[]),t.family.donations=a.data.donations?a.data.donations:[]})},t.addChild=function(){console.log("child added",t.newChild,t.family.children),t.editingChild?(t.family.children[t.editingChild]=t.newChild,t.editingChild=!1):t.family.children.push(t.newChild),t.newChild={}},t.editChild=function(a){t.editingChild=a,t.newChild=t.family.children[a]},t.removeChild=function(a){console.log("in remove child index",a," edit ",t.editingChild),t.family.children.splice(a,1),a==t.editingChild?(console.log("edit match"),t.clearChild()):console.log("no edit match")},t.clearChild=function(){console.log("in clear child"),t.newChild={firstName:"",lastName:"",birthdate:"",school:"",notes:""},t.editingChild=!1},t.addDonation=function(){t.family.donations.push(t.newDonation),t.newDonation={}}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,a,e,o,n){t.submit=function(){a.post("/login",t.form).then(function(t){e.saveToken(t.data),n.user=e.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,a,e){t.formInput={},t.searchBtn=function(){e.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var a=[],e=[],o=[],n=[],i=function(e){return t({method:"GET",url:"../search",params:{search:e}}).then(function(t){a=t.data,l(a),r(a),c(a)})},l=function(t){var a=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return a(t),console.log("this is getElement1",o),o},c=function(t){var a=function(t){e.splice(0,e.length),t.forEach(function(t){"adult"==t.type&&e.push(t)})};return a(t),console.log("this is in getElement2",e),e},r=function(t){var a=function(t){n.splice(0,n.length),t.forEach(function(t){"child"==t.type&&n.push(t)})};return a(t),console.log("this is getElements3",n),n},s={getKids:r,getAdults:c,getCompanies:l,makeDataCall:i,results:a,companies:o,adults:e,kids:n};return s}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,a){t.ok=function(){a.close(t.selected.item)},t.cancel=function(){a.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,a,e,o){e.user=t.getUser(),e.user&&e.user.username&&o.path("/home"),a.logout=function(){t.logout(),e.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope",function(t,a){a.listname={},a.createList=function(){console.log("create list: "+a.listname.input),t.postList(a.listname.input),console.log("list #",t.listNum),a.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,a){var e="",o=[];this.postList=function(t){return console.log("did the name make it to the service? "+t),a.post("/newContactList",{name:t}).then(function(t){console.log(t.data),e=t.data,console.log("Id? ",e)},function(t){console.log(t)})},this.popList=function(t){this.dataObject={importDataArray:o,listNum:e},console.log("got to popList"),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray),n(t),a.post("/populateContactList",this.dataObject).then(function(t,a,e,o){console.log("posted"),console.log(t),console.log("importDataArray: ",this.importDataArray,"\ntype: ",typeof this.importDataArray)})};var n=function(t){console.log("getChecked is running"),t.forEach(function(t){this.contactObject={email_addresses:[t.email],first_name:t.firstName,last_name:t.lastName,company_name:t.company,addresses:[{city:t.city}]},console.log(this.contactObject),o.push(this.contactObject)})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,a,e){a.listName={},a.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),a.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,a,e){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),a.post("/register",t.form).then(function(t){console.log(t),e.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,a,e){t.submit=function(){console.log("edit password:",t.form),a.put("/admin",t.form).then(function(t){console.log(t),e.path("/index")})}}]),app.service("validService",[function(){var t=function(t,a){var e,o=a?$("#"+a):!1;switch(console.log("object is ",o,t,a),t){case"name":case"city":case"state":e=/^[a-zA-z\s,.'-]+$/;break;case"corpName":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+-]+$/;break;case"address":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&-]+$/;break;case"zip":e=/^[0-9]{5}$/;break;case"phone":e=/^([(][0-9]{3}[)]|[0-9]{3})[\s\-.]?[0-9]{3}[\s\-.]?[0-9]{4}$/;break;case"email":e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;break;case"notes":e=/^[a-zA-Z0-9\s,.?@!#'~*_;+:()%&<>\[\]{}\-="|`\\\/]+$/;break;case"ext":e=/^[a-zA-Z0-9\s:-]+$/;break;case"date":e=/^20[0-9]{2}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"birthdate":e=/^(199[0-9]|20[0-9]{2})[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[01])$/;break;case"amount":e=/^[\$]?[\d]+([.][\d]{2})?$/;break;default:return console.log("invalid class search"),!1}(o.attr("required")||o.val().trim().length>0)&&(e.test(o.val().trim())?(o.removeClass("invalid").attr("placeholder",o.data("placeholder")),console.log(t," passed test",e)):(o.addClass("invalid").attr("placeholder",o.data("invalid")).val(""),console.log(t," failed test",e)))};return{validateInput:t}}]);
//# sourceMappingURL=data:application/json;base64,
