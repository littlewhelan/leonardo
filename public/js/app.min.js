var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap"]);app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html"}).when("/addcorp",{templateUrl:"private/addcorp.html"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,n){return{request:function(t){return t.headers=t.headers||{},n.isAuthed()&&(t.headers.Authorization="Bearer "+n.getToken()),t},response:function(n){return 401===n.status&&e.path("/"),n||t.when(n)},responseError:function(n){return 401===n.status?e.path("/"):console.log(n.status),t.reject(n)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var n=e.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),n=Math.round((new Date).getTime()/1e3)<=e.exp;return n||this.logout(),n}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,e,n,o,a){t.companies=o.companies,t.animationsEnabled=!0,t.open=function(o,i){return console.log("corp call",i),a({method:"GET",url:"../corporation",params:{id:i}}).then(function(a){t.company=a.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("createListSearch",["$scope","$rootScope","ContactListDataService",function(t,e,n){e.add=!1,t.listForm={},t.searchListBtn=function(){n.makeDataCall(t.listForm.data),t.listForm={}}}]),app.factory("ContactListDataService",["$http",function(t){var e=[],n=[],o=[],a=[],i=function(t){return http({method:"GET",URL:"../createMailList",params:{search:t}}).then(function(t){e=t.data,r(e),s(e),c(e)})},s=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"adult"==t.type&&a.push(t)})};return e(t),a},r=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"company"==t.type&&n.push(t)})};return e(t),n},c=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"child"==t.type&&kids.push(t)})};return e(t),o},l={makeDataCall:i,getCompanies:r,getKids:c,getAdults:s,results:e,allKids:o,allAdults:a,allCompanies:n};return l}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,e,n,o,a){t.adults=o.adults,t.kids=o.kids,t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),a({method:"GET",url:"../family",params:{id:i}}).then(function(a){t.family=a.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,n,o,a){t.submit=function(){e.post("/login",t.form).then(function(t){n.saveToken(t.data),a.user=n.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,n){t.formInput={},t.searchBtn=function(){n.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],n=[],o=[],a=[],i=function(n){return t({method:"GET",url:"../search",params:{search:n}}).then(function(t){e=t.data,s(e),c(e),r(e)})},s=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},r=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"adult"==t.type&&n.push(t)})};return e(t),console.log("this is in getElement2",n),n},c=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"child"==t.type&&a.push(t)})};return e(t),console.log("this is getElements3",a),a},l={getKids:c,getAdults:r,getCompanies:s,makeDataCall:i,results:e,companies:o,adults:n,kids:a};return l}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,n,o){n.user=t.getUser(),n.user&&n.user.username&&o.path("/home"),e.logout=function(){t.logout(),n.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["contactListData","$scope","$http",function(t,e,n){e.listname={},e.createList=function(){console.log("create list: "+scope.listname.input),t.postList(scope.listname.input),e.listname={}}}]),app.service("contactListData",["ContactListDataService","$scope","$http",function(t,e,n){function o(){$(":checked.type-element").each(function(){if(id=createListService.results.id){var t={email_addresses:[$(this).email],first_name:$(this).firstName,last_name:$(this).lastName,company_name:$(this).company,addresses:[{city:$(this).city}]};s.push(t)}})}var a=[],i="1499523610";e.postList=function(){n.post("/newContactList").success(function(t,e,n,o){console.log(t),i=t.id}),console.log(options)};var s=[{email_addresses:["user1@example.com"],first_name:"John",last_name:"Smith",company_name:"Company X",addresses:[{city:"anytown"}]},{email_addresses:["user2@example.com"],first_name:"Jane",last_name:"Smithy",company_name:"Company Y",addresses:[{city:"sometown"}]}];return e.popList=function(){o(),n.post("/populateContactList.js",s,i).success(function(t,e,n,o){console.log(t)}),console.log(options)},{newContactList:a,listNum:i}}]),app.controller("popListController",["contactListData","$scope","$http",function(t,e,n){e.listname={},e.populateList=function(){console.log("create list: "+scope.listname.input),t.popList(),e.listname={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),n.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),n.path("/index")})}}]);
//# sourceMappingURL=data:application/json;base64,
