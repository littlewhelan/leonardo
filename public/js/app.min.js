function formatDates(t){return{full:moment(t).format(fullDate),pretty:moment(t).format(prettyDate)}}var app=angular.module("leo",["ngRoute","ngAnimate","ui.bootstrap"]),prettyDate="MM/DD/YYgYY",fullDate="MM/DD/YYYY h:mm:ss a";app.config(["$routeProvider",function(t){t.when("/",{templateUrl:"static/login.html"}).when("/search",{templateUrl:"private/search.html"}).when("/register",{templateUrl:"static/register.html"}).when("/contactList",{templateUrl:"private/contactList.html"}).when("/addfamily",{templateUrl:"private/addfamily.html"}).when("/addcorp",{templateUrl:"private/addcorp.html"}).when("/contactlist",{templateUrl:"private/contactlist.html"}).otherwise({redirectTo:"/search"})}]),app.factory("authInterceptor",["$q","$location","authService",function(t,e,n){return{request:function(t){return t.headers=t.headers||{},n.isAuthed()&&(t.headers.Authorization="Bearer "+n.getToken()),t},response:function(n){return 401===n.status&&e.path("/"),n||t.when(n)},responseError:function(n){return 401===n.status?e.path("/"):console.log(n.status),t.reject(n)}}}]),app.service("authService",["$window",function(t){this.parseJwt=function(e){if(e){var n=e.split(".")[1],o=n.replace("-","+").replace("_","/");return JSON.parse(t.atob(o))}return{}},this.saveToken=function(e){t.localStorage.jwtToken=e},this.getToken=function(){return t.localStorage.jwtToken},this.isAuthed=function(){var t=this.getToken();if(t){var e=this.parseJwt(t),n=Math.round((new Date).getTime()/1e3)<=e.exp;return n||this.logout(),n}return!1},this.logout=function(){delete t.localStorage.jwtToken},this.getUser=function(){return this.parseJwt(this.getToken())}}]),app.controller("editCorpCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,e,n,o,a){t.companies=o.companies,t.animationsEnabled=!0,t.open=function(o,i){return console.log("corp call",i),a({method:"GET",url:"../corporation",params:{id:i}}).then(function(a){t.company=a.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editcorp.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.company}}});i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("createListSearch",["$scope","$http","ContactListDataService",function(t,e,n){t.corp={},t.fam={},t.zipCk={},t.ageCk={},t.age={},t.zip={},console.log("Where is this",t.corp,t.fam,t.zipCk,t.ageCk),t.emailList=[],t.searchListBtn=function(){if(1==t.zipCk&&n.makeDataCall("zip",t.zip.data).then(function(e){t.emailList=e,console.log(t.emailList)}),1==t.ageCk){var e=n.makeDataCall("age",t.age.data);e.then(function(e){console.log(e),t.emailList=e})}if(1==t.fam){var o=n.makeDataCall("family","");o.then(function(e){t.emailList=e,console.log(e)})}if(1==t.corp){var a=n.makeDataCall("company","");a.then(function(e){t.emailList=e,console.log(e)})}t.corp={},t.fam={},t.zipCk={},t.ageCk={},t.age={},t.zip={}}}]),app.factory("ContactListDataService",["$http","$q",function(t,e){function n(n,o){var a=e.defer();return console.log("this is in the make data call",n,o),t({method:"GET",url:"../createMailList",params:{type:n,search:o}}).then(function(t){data=t.data,a.resolve(t.data)}),a.promise}return{data:[],makeDataCall:n}}]),app.controller("editFamilyCtrl",["$scope","$uibModal","$log","ResultService","$http",function(t,e,n,o,a){t.adults=o.adults,t.kids=o.kids,t.animationsEnabled=!0,t.open=function(o,i){return console.log("family call",i),a({method:"GET",url:"../family",params:{id:i}}).then(function(a){t.family=a.data;var i=e.open({animation:t.animationsEnabled,templateUrl:"private/editfamily.html",controller:"ModalInstanceCtrl",size:o,scope:t,resolve:{items:function(){return t.family}}});i.result.then(function(e){t.selected=e},function(){n.info("Modal dismissed at: "+new Date)})})},t.toggleAnimation=function(){t.animationsEnabled=!t.animationsEnabled}}]),app.controller("loginCtrl",["$scope","$http","authService","$location","$rootScope",function(t,e,n,o,a){t.submit=function(){e.post("/login",t.form).then(function(t){n.saveToken(t.data),a.user=n.getUser(),o.path("/search")})}}]),app.controller("searchFunction",["$scope","$http","ResultService",function(t,e,n){t.formInput={},t.searchBtn=function(){n.makeDataCall(t.formInput.data),console.log("this is the input text",t.formInput),t.formInput={}}}]),app.factory("ResultService",["$http",function(t){var e=[],n=[],o=[],a=[],i=function(n){return t({method:"GET",url:"../search",params:{search:n}}).then(function(t){e=t.data,s(e),l(e),r(e)})},s=function(t){var e=function(t){o.splice(0,o.length),t.forEach(function(t){"company"==t.type&&o.push(t)})};return e(t),console.log("this is getElement1",o),o},r=function(t){var e=function(t){n.splice(0,n.length),t.forEach(function(t){"adult"==t.type&&n.push(t)})};return e(t),console.log("this is in getElement2",n),n},l=function(t){var e=function(t){a.splice(0,a.length),t.forEach(function(t){"child"==t.type&&a.push(t)})};return e(t),console.log("this is getElements3",a),a},c={getKids:l,getAdults:r,getCompanies:s,makeDataCall:i,results:e,companies:o,adults:n,kids:a};return c}]),app.controller("ModalInstanceCtrl",["$scope","$modalInstance",function(t,e){t.ok=function(){e.close(t.selected.item)},t.cancel=function(){e.dismiss("cancel")}}]),app.controller("navCtrl",["authService","$scope","$rootScope","$location",function(t,e,n,o){n.user=t.getUser(),n.user&&n.user.username&&o.path("/home"),e.logout=function(){t.logout(),n.user=t.getUser(),o.path("/")}}]),app.controller("newContactListController",["newContactListData","$scope","$http",function(t,e){e.listname={},e.createList=function(){console.log("create list: "+e.listname.input),t.postList(e.listname.input),console.log("list #",t.listNum),e.listname={}}}]),app.service("newContactListData",["ContactListDataService","$http",function(t,e){this.newContactList=[],this.listNum="0",this.postList=function(t){return console.log("did the name make it to the service? "+t),e.post("/newContactList",{name:t}).then(function(t){console.log(t.data),listNum=t.data,console.log("Id? ",listNum)},function(t){console.log(t)})},this.importDataArray=[{email_addresses:["user1@example.com"],first_name:"John",last_name:"Smith",company_name:"Company X",addresses:[{city:"anytown"}]},{email_addresses:["user2@example.com"],first_name:"Jane",last_name:"Smithy",company_name:"Company Y",addresses:[{city:"sometown"}]}],this.popList=function(){n(),e.post("/populateContactList.js",importDataArray,listNum).then(function(t,e,n,o){console.log(t)}),console.log(options)};var n=function(){$(":checked.type-element").each(function(){if(id==t.results.id){var e={email_addresses:[$(this).email],first_name:$(this).firstName,last_name:$(this).lastName,company_name:$(this).company,addresses:[{city:$(this).city}]};importDataArray.push(e)}})}}]),app.controller("popListController",["newContactListData","$scope","$http",function(t,e,n){e.listName={},e.populateList=function(){console.log("create list: "+scope.listName.input),t.popList(),e.listName={}}}]),app.controller("registerCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("registerCtrl"),console.log("registerController submit:",t.form),e.post("/register",t.form).then(function(t){console.log(t),n.path("/index")})}}]),app.controller("resetCtrl",["$scope","$http","$location",function(t,e,n){t.submit=function(){console.log("edit password:",t.form),e.put("/admin",t.form).then(function(t){console.log(t),n.path("/index")})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhJbnRlcmNlcHRvci5qcyIsImF1dGhTZXJ2aWNlLmpzIiwiY29ycENvbnRyb2xsZXIuanMiLCJjcmVhdGVMaXN0Q29udG9sbGVyLmpzIiwiY3JlYXRlTGlzdFNlcnZpY2UuanMiLCJmYW1pbHlDb250cm9sbGVyLmpzIiwibG9naW5Db250cm9sbGVyLmpzIiwibWFpblNlYXJjaENvbnRyb2xsZXIuanMiLCJtYWluU2VhcmNoU2VydmljZS5qcyIsIm1vZGFsSW5zdGFuY2VDb250cm9sbGVyLmpzIiwibmF2Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0Q29udHJvbGxlci5qcyIsIm5ld0NvbnRhY3RMaXN0U2VydmljZS5qcyIsInBvcExpc3RDb250cm9sbGVyLmpzIiwicmVnaXN0ZXJDb250cm9sbGVyLmpzIiwicmVzZXRDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImZvcm1hdERhdGVzIiwiZGF0ZSIsImZ1bGwiLCJtb21lbnQiLCJmb3JtYXQiLCJmdWxsRGF0ZSIsInByZXR0eSIsInByZXR0eURhdGUiLCJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRxIiwiJGxvY2F0aW9uIiwiYXV0aFNlcnZpY2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsImlzQXV0aGVkIiwiQXV0aG9yaXphdGlvbiIsImdldFRva2VuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJwYXRoIiwicmVzcG9uc2VFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZWplY3QiLCJzZXJ2aWNlIiwiJHdpbmRvdyIsInRoaXMiLCJwYXJzZUp3dCIsInRva2VuIiwiYmFzZTY0VXJsIiwic3BsaXQiLCJiYXNlNjQiLCJyZXBsYWNlIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsInNhdmVUb2tlbiIsImxvY2FsU3RvcmFnZSIsImp3dFRva2VuIiwicGFyYW1zIiwibm90RXhwaXJlZCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwiZXhwIiwibG9nb3V0IiwiZ2V0VXNlciIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkdWliTW9kYWwiLCIkbG9nIiwiUmVzdWx0U2VydmljZSIsIiRodHRwIiwiY29tcGFuaWVzIiwiYW5pbWF0aW9uc0VuYWJsZWQiLCJvcGVuIiwic2l6ZSIsImlkIiwibWV0aG9kIiwidXJsIiwidGhlbiIsImNvbXBhbnkiLCJkYXRhIiwibW9kYWxJbnN0YW5jZSIsImFuaW1hdGlvbiIsInNjb3BlIiwicmVzb2x2ZSIsIml0ZW1zIiwicmVzdWx0Iiwic2VsZWN0ZWRJdGVtIiwic2VsZWN0ZWQiLCJpbmZvIiwidG9nZ2xlQW5pbWF0aW9uIiwiQ29udGFjdExpc3REYXRhU2VydmljZSIsImNvcnAiLCJmYW0iLCJ6aXBDayIsImFnZUNrIiwiYWdlIiwiemlwIiwiZW1haWxMaXN0Iiwic2VhcmNoTGlzdEJ0biIsIm1ha2VEYXRhQ2FsbCIsImNvbXAiLCJ0eXBlIiwicGFzc2VkRGF0YSIsImRlZmVycmVkIiwiZGVmZXIiLCJzZWFyY2giLCJwcm9taXNlIiwiYWR1bHRzIiwia2lkcyIsImZhbWlseSIsIiRyb290U2NvcGUiLCJzdWJtaXQiLCJwb3N0IiwiZm9ybSIsInVzZXIiLCJmb3JtSW5wdXQiLCJzZWFyY2hCdG4iLCJyZXN1bHRzIiwiZ2V0Q29tcGFuaWVzIiwiZ2V0S2lkcyIsImdldEFkdWx0cyIsImFycmF5IiwiZ2V0RWxlbWVudDEiLCJzcGxpY2UiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZWxlbWVudCIsInB1c2giLCJnZXRFbGVtZW50MiIsImdldEVsZW1lbnQzIiwicHVibGljQXBpIiwiJG1vZGFsSW5zdGFuY2UiLCJvayIsImNsb3NlIiwiaXRlbSIsImNhbmNlbCIsImRpc21pc3MiLCJ1c2VybmFtZSIsIm5ld0NvbnRhY3RMaXN0RGF0YSIsImxpc3RuYW1lIiwiY3JlYXRlTGlzdCIsImlucHV0IiwicG9zdExpc3QiLCJsaXN0TnVtIiwibmV3Q29udGFjdExpc3QiLCJuYW1lIiwiaW1wb3J0RGF0YUFycmF5IiwiZW1haWxfYWRkcmVzc2VzIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImNvbXBhbnlfbmFtZSIsImFkZHJlc3NlcyIsImNpdHkiLCJwb3BMaXN0IiwiZ2V0Q2hlY2tlZCIsIm9wdGlvbnMiLCIkIiwiZWFjaCIsImNvbnRhY3RPYmplY3QiLCJlbWFpbCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwibGlzdE5hbWUiLCJwb3B1bGF0ZUxpc3QiLCJwdXQiXSwibWFwcGluZ3MiOiJBQUtBLFFBQUFBLGFBQUFDLEdBQ0EsT0FDQUMsS0FBQUMsT0FBQUYsR0FBQUcsT0FBQUMsVUFDQUMsT0FBQUgsT0FBQUYsR0FBQUcsT0FBQUcsYUFSQSxHQUFBQyxLQUFBQyxRQUFBQyxPQUFBLE9BQUEsVUFBQSxZQUFBLGlCQUVBSCxXQUFBLGNBQ0FGLFNBQUEsc0JBU0FHLEtBQUFHLFFBQUEsaUJBQ0EsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUNBQyxZQUFBLHNCQUVBRCxLQUFBLFdBQ0FDLFlBQUEsd0JBRUFELEtBQUEsYUFDQUMsWUFBQSx5QkFFQUQsS0FBQSxnQkFDQUMsWUFBQSw2QkFFQUQsS0FBQSxjQUNBQyxZQUFBLDJCQUVBRCxLQUFBLFlBQ0FDLFlBQUEseUJBRUFELEtBQUEsZ0JBQ0FDLFlBQUEsNkJBRUFDLFdBQ0FDLFdBQUEsZUNyQ0FSLElBQUFTLFFBQUEsbUJBQUEsS0FBQSxZQUFBLGNBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUNBQyxRQUFBLFNBQUFWLEdBS0EsTUFKQUEsR0FBQVcsUUFBQVgsRUFBQVcsWUFDQUYsRUFBQUcsYUFDQVosRUFBQVcsUUFBQUUsY0FBQSxVQUFBSixFQUFBSyxZQUVBZCxHQUVBZSxTQUFBLFNBQUFBLEdBT0EsTUFMQSxPQUFBQSxFQUFBQyxRQUdBUixFQUFBUyxLQUFBLEtBRUFGLEdBQUFSLEVBQUFMLEtBQUFhLElBQ0FHLGNBQUEsU0FBQUgsR0FTQSxNQVJBLE9B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LE1BQUFxSCxPQUVBWCxXQUFBUSxFQUFBbEgsTUFBQXNILFVBQ0FYLFVBQUFPLEVBQUFsSCxNQUFBdUgsU0FDQVgsYUFBQU0sRUFBQWxILE1BQUFvQyxRQUNBeUUsWUFDQUMsS0FBQUksRUFBQWxILE1BQUE4RyxPQUdBTixpQkFBQW5CLEtBQUErQixVQ3pFQS9JLElBQUFpRCxXQUFBLHFCQUFBLHFCQUFBLFNBQUEsUUFBQSxTQUFBMEUsRUFBQXpFLEVBQUFJLEdBSUFKLEVBQUFpRyxZQUVBakcsRUFBQWtHLGFBQUEsV0FDQTlILFFBQUFDLElBQUEsZ0JBQUE0QyxNQUFBZ0YsU0FBQXJCLE9BRUFILEVBQUFlLFVBWUF4RixFQUFBaUcsZ0JDbkJBbkosSUFBQWlELFdBQUEsZ0JBQUEsU0FBQSxRQUFBLFlBQUEsU0FBQUMsRUFBQUksRUFBQTNDLEdBQ0F1QyxFQUFBOEMsT0FBQSxXQUNBMUUsUUFBQUMsSUFBQSxnQkFDQUQsUUFBQUMsSUFBQSw2QkFBQTJCLEVBQUFnRCxNQUNBNUMsRUFBQTJDLEtBQUEsWUFBQS9DLEVBQUFnRCxNQUNBcEMsS0FBQSxTQUFBNUMsR0FDQUksUUFBQUMsSUFBQUwsR0FDQVAsRUFBQVMsS0FBQSxnQkNUQXBCLElBQUFpRCxXQUFBLGFBQUEsU0FBQSxRQUFBLFlBQUEsU0FBQUMsRUFBQUksRUFBQTNDLEdBQ0F1QyxFQUFBOEMsT0FBQSxXQUNBMUUsUUFBQUMsSUFBQSxpQkFBQTJCLEVBQUFnRCxNQUNBNUMsRUFBQStGLElBQUEsU0FBQW5HLEVBQUFnRCxNQUNBcEMsS0FBQSxTQUFBNUMsR0FDQUksUUFBQUMsSUFBQUwsR0FDQVAsRUFBQVMsS0FBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdsZW8nLCBbJ25nUm91dGUnLCAnbmdBbmltYXRlJywgJ3VpLmJvb3RzdHJhcCddKTtcblxudmFyIHByZXR0eURhdGUgPSBcIk1NL0REL1lZZ1lZXCI7XG52YXIgZnVsbERhdGUgPSBcIk1NL0REL1lZWVkgaDptbTpzcyBhXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGVzIChkYXRlKSB7XG5cdHJldHVybiB7XG5cdFx0ZnVsbDogbW9tZW50KGRhdGUpLmZvcm1hdChmdWxsRGF0ZSksXG5cdFx0cHJldHR5OiBtb21lbnQoZGF0ZSkuZm9ybWF0KHByZXR0eURhdGUpXG5cdH07XG59XG5cbmFwcC5jb25maWcoWyckcm91dGVQcm92aWRlcicsXG4gICAgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIuXG4gICAgICAgICAgICB3aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2xvZ2luLmh0bWwnXG4gICAgICAgICAgICB9KS5cbiAgICAgICAgICAgIHdoZW4oJy9zZWFyY2gnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL3NlYXJjaC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvcmVnaXN0ZXIuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2NvbnRhY3RMaXN0Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9jb250YWN0TGlzdC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICB3aGVuKCcvYWRkZmFtaWx5Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9hZGRmYW1pbHkuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2FkZGNvcnAnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwcml2YXRlL2FkZGNvcnAuaHRtbCdcbiAgICAgICAgICAgIH0pLlxuICAgICAgICAgICAgd2hlbignL2NvbnRhY3RsaXN0Jywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9jb250YWN0bGlzdC5odG1sJ1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBvdGhlcndpc2Uoe1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvc2VhcmNoJ1xuICAgICAgICAgICAgfSk7XG4gICAgfV0pO1xuXG5cblxuXG4iLCJhcHAuZmFjdG9yeSgnYXV0aEludGVyY2VwdG9yJywgWyckcScsICckbG9jYXRpb24nLCAnYXV0aFNlcnZpY2UnLCBmdW5jdGlvbiAoJHEsICRsb2NhdGlvbiwgYXV0aFNlcnZpY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICAgICAgICAgICAgaWYgKGF1dGhTZXJ2aWNlLmlzQXV0aGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgYXV0aFNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7XG4gICAgICAgIH0sIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChcIi9cIik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKSIsImFwcC5zZXJ2aWNlKCdhdXRoU2VydmljZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uICgkd2luZG93KSB7XG5cbiAgICB0aGlzLnBhcnNlSnd0ID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIGJhc2U2NFVybCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgICAgICB2YXIgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIHt9O1xuICAgIH07XG5cbiAgICB0aGlzLnNhdmVUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3RUb2tlbiA9IHRva2VuO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdTYXZlZCB0b2tlbjonLCR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICB0aGlzLmlzQXV0aGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmdldFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VKd3QodG9rZW4pO1xuICAgICAgICAgICAgdmFyIG5vdEV4cGlyZWQgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCkgPD0gcGFyYW1zLmV4cDtcbiAgICAgICAgICAgIGlmICghbm90RXhwaXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm90RXhwaXJlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVsZXRlICR3aW5kb3cubG9jYWxTdG9yYWdlLmp3dFRva2VuO1xuICAgIH07XG5cbiAgICAvLyBleHBvc2UgdXNlciBhcyBhbiBvYmplY3RcbiAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlSnd0KHRoaXMuZ2V0VG9rZW4oKSlcbiAgICB9O1xufV0pOyIsIi8vZWRpdCBjb3Jwb3JhdGlvbiBtb2RhbCB0ZW1wbGF0ZVxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRDb3JwQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbCcsICckbG9nJywgJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwKSB7XG4gICAgLy9zZW5kcyB0aGUgY29tcGFuaWVzIGFmdGVyIHRoZSByZXN1bHRzIGhhdmUgYmVlbiBvcmdhbml6ZWRcbiAgICAgICAgJHNjb3BlLmNvbXBhbmllcyA9IFJlc3VsdFNlcnZpY2UuY29tcGFuaWVzO1xuXG4gICAgJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcblxuICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKHNpemUsIGlkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb3JwIGNhbGwnLCBpZCk7XG4gICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnLi4vY29ycG9yYXRpb24nLFxuICAgICAgICAgICAgcGFyYW1zOntpZDppZH1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wYW55ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJpdmF0ZS9lZGl0Y29ycC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ01vZGFsSW5zdGFuY2VDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNvbXBhbnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gc2VsZWN0ZWRJdGVtO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICRzY29wZS50b2dnbGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCA9ICEkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQ7XG4gICAgfTtcblxuXG59XSk7XG4iLCJhcHAuY29udHJvbGxlcignY3JlYXRlTGlzdFNlYXJjaCcsIFsnJHNjb3BlJywgJyRodHRwJywgJ0NvbnRhY3RMaXN0RGF0YVNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgQ29udGFjdExpc3REYXRhU2VydmljZSkge1xuICAgICRzY29wZS5jb3JwID0ge307XG4gICAgJHNjb3BlLmZhbSA9IHt9O1xuICAgICRzY29wZS56aXBDayA9IHt9O1xuICAgICRzY29wZS5hZ2VDayA9IHt9O1xuICAgICRzY29wZS5hZ2UgPSB7fTtcbiAgICAkc2NvcGUuemlwID0ge307XG4gICAgY29uc29sZS5sb2coJ1doZXJlIGlzIHRoaXMnLFxuICAgICAgICAkc2NvcGUuY29ycCxcbiAgICAgICAgJHNjb3BlLmZhbSxcbiAgICAgICAgJHNjb3BlLnppcENrLFxuICAgICAgICAkc2NvcGUuYWdlQ2tcbiAgICApO1xuXG4gICAgJHNjb3BlLmVtYWlsTGlzdCA9IFsgXTtcblxuICAgICRzY29wZS5zZWFyY2hMaXN0QnRuID0gZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgLy9USElTIFdPUktTICAtLSB3aWxsIHNlYXJjaCBieSB6aXBcbiAgICAgICAgaWYgKCRzY29wZS56aXBDayA9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCd6aXAnLCAkc2NvcGUuemlwLmRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5lbWFpbExpc3QpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vVEhJUyBXT1JLUyAtIHdpbGwgc2VhcmNoIGJ5IGFnZVxuICAgICAgICBpZiAoJHNjb3BlLmFnZUNrID09IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBhZ2UgPSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgnYWdlJywgJHNjb3BlLmFnZS5kYXRhKTtcbiAgICAgICAgICAgIGFnZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsTGlzdCA9IGRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vVEhJUyBXT1JLUyAtLWdldCBhbGwgZmFtaWxpZXMgaWYgZmFtIGlzIHRydWVcbiAgICAgICAgaWYgKCRzY29wZS5mYW0gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGZhbSA9IENvbnRhY3RMaXN0RGF0YVNlcnZpY2UubWFrZURhdGFDYWxsKCdmYW1pbHknLCAnJyk7XG4gICAgICAgICAgICBmYW0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5lbWFpbExpc3QgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCBhbGwgY29ycCBpZiBjb3JwIGlzIHRydWVcbiAgICAgICAgaWYgKCRzY29wZS5jb3JwID09IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBjb21wID0gQ29udGFjdExpc3REYXRhU2VydmljZS5tYWtlRGF0YUNhbGwoJ2NvbXBhbnknLCAnJyk7XG4gICAgICAgICAgICBjb21wLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW1haWxMaXN0ID0gZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9lbXB0eSB0aGUgc2VhcmNoIGJveFxuICAgICAgICAkc2NvcGUuY29ycCA9IHt9O1xuICAgICAgICAkc2NvcGUuZmFtID0ge307XG4gICAgICAgICRzY29wZS56aXBDayA9IHt9O1xuICAgICAgICAkc2NvcGUuYWdlQ2sgPSB7fTtcbiAgICAgICAgJHNjb3BlLmFnZSA9IHt9O1xuICAgICAgICAkc2NvcGUuemlwID0ge307XG5cblxuICAgIH07XG5cblxufV0pOyIsImFwcC5mYWN0b3J5KCdDb250YWN0TGlzdERhdGFTZXJ2aWNlJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkaHR0cCwgJHEpIHtcblxuICAgIGZ1bmN0aW9uIG1ha2VEYXRhQ2FsbCh0eXBlLCBwYXNzZWREYXRhKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGluIHRoZSBtYWtlIGRhdGEgY2FsbCcsIHR5cGUsIHBhc3NlZERhdGEpO1xuICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgdXJsOiAnLi4vY3JlYXRlTWFpbExpc3QnLFxuICAgICAgICAgICAgcGFyYW1zOiB7dHlwZTogdHlwZSwgc2VhcmNoOiBwYXNzZWREYXRhfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIG1ha2VEYXRhQ2FsbDogbWFrZURhdGFDYWxsXG4gICAgfTtcblxuXG59XSk7IiwiLy9lZGl0IGZhbWlseSBtb2RhbCB0ZW1wbGF0ZVxuYXBwLmNvbnRyb2xsZXIoJ2VkaXRGYW1pbHlDdHJsJyxbJyRzY29wZScsICckdWliTW9kYWwnLCAnJGxvZycsJ1Jlc3VsdFNlcnZpY2UnLCAnJGh0dHAnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWwsICRsb2csIFJlc3VsdFNlcnZpY2UsICRodHRwKSB7XG5cbiAgICAvL3NlbmRzIHRoZSBhZHVsdHMgYW5kIGtpZHMgYWZ0ZXIgdGhlIHJlc3VsdHMgaGF2ZSBiZWVuIG9yZ2FuaXplZFxuICAgICAgICAkc2NvcGUuYWR1bHRzID0gUmVzdWx0U2VydmljZS5hZHVsdHM7XG4gICAgICAgICRzY29wZS5raWRzID0gUmVzdWx0U2VydmljZS5raWRzO1xuXG4gICAgJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2l6ZSwgaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYW1pbHkgY2FsbCcsaWQpO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIHVybDogJy4uL2ZhbWlseScsXG4gICAgICAgICAgICAgICAgcGFyYW1zOntpZDppZH1cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgXHRcdFx0JHNjb3BlLmZhbWlseSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ByaXZhdGUvZWRpdGZhbWlseS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICAgICAgICBcdFx0XHRcdHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5mYW1pbHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkSXRlbSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRzY29wZS50b2dnbGVBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkID0gISRzY29wZS5hbmltYXRpb25zRW5hYmxlZDtcbiAgICAgICAgICAgIH07XG5cblxufV0pOyIsIi8vY29udHJvbGxlcnMgZm9yIGxvZ2luXG5hcHAuY29udHJvbGxlcignbG9naW5DdHJsJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnYXV0aFNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCBhdXRoU2VydmljZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKXtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgJGh0dHAucG9zdCgnL2xvZ2luJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBhdXRoU2VydmljZS5zYXZlVG9rZW4ocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gYXV0aFNlcnZpY2UuZ2V0VXNlcigpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL3NlYXJjaFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG59XSk7XG4iLCJcbi8vVGhpcyBzaG91bGQgZ2V0IHRoZSBzZWFyY2ggaXRlbVxuYXBwLmNvbnRyb2xsZXIoJ3NlYXJjaEZ1bmN0aW9uJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnUmVzdWx0U2VydmljZScsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBSZXN1bHRTZXJ2aWNlKSB7XG4gICAgJHNjb3BlLmZvcm1JbnB1dD17fTtcblxuICAgICRzY29wZS5zZWFyY2hCdG4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcbiAgICAgICBSZXN1bHRTZXJ2aWNlLm1ha2VEYXRhQ2FsbCgkc2NvcGUuZm9ybUlucHV0LmRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygndGhpcyBpcyB0aGUgaW5wdXQgdGV4dCcsICRzY29wZS5mb3JtSW5wdXQpO1xuICAgICAgICAvL2VtcHR5cyB0aGUgc2VhcmNoIGJveFxuICAgICAgICAkc2NvcGUuZm9ybUlucHV0PXt9O1xuICAgIH07XG5cbn1dKTtcbiIsIi8vVGhpcyBzZXJ2aWNlIHNob3VsZCBwYXNzIGRhdGEgYmV0d2VlbiBjb250cm9sbGVyc1xuYXBwLmZhY3RvcnkoJ1Jlc3VsdFNlcnZpY2UnLCBbJyRodHRwJyxmdW5jdGlvbigkaHR0cCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIGFkdWx0cyA9IFtdO1xuICAgIHZhciBjb21wYW5pZXMgPSBbXTtcbiAgICB2YXIga2lkcyA9IFtdO1xuXG4gICAgdmFyIG1ha2VEYXRhQ2FsbCA9IGZ1bmN0aW9uKHBhc3NlZERhdGEpIHtcbiAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB1cmw6ICcuLi9zZWFyY2gnLFxuICAgICAgICAgICAgcGFyYW1zOntzZWFyY2g6cGFzc2VkRGF0YX1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgZ2V0Q29tcGFuaWVzKHJlc3VsdHMpO1xuICAgICAgICAgICAgZ2V0S2lkcyhyZXN1bHRzKTtcbiAgICAgICAgICAgIGdldEFkdWx0cyhyZXN1bHRzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZ2V0Q29tcGFuaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgdmFyIGdldEVsZW1lbnQxID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgICAgIGNvbXBhbmllcy5zcGxpY2UoMCxjb21wYW5pZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnY29tcGFueScpXG4gICAgICAgICAgICAgICAgY29tcGFuaWVzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgIGdldEVsZW1lbnQxKGFycmF5KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgZ2V0RWxlbWVudDEnLGNvbXBhbmllcyk7XG4gICAgICAgIHJldHVybiBjb21wYW5pZXNcbiAgICB9O1xuXG4gICAgdmFyIGdldEFkdWx0cyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBhZHVsdHMuc3BsaWNlKDAsYWR1bHRzLmxlbmd0aCk7XG4gICAgICAgICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gJ2FkdWx0JylcbiAgICAgICAgICAgICAgICAgICAgYWR1bHRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBnZXRFbGVtZW50MihhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGluIGdldEVsZW1lbnQyJywgYWR1bHRzKTtcbiAgICAgICAgcmV0dXJuIGFkdWx0c1xuICAgIH07XG5cbiAgICB2YXIgZ2V0S2lkcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIHZhciBnZXRFbGVtZW50MyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICBraWRzLnNwbGljZSgwLGtpZHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSAnY2hpbGQnKVxuICAgICAgICAgICAgICAgICAgICBraWRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgICBnZXRFbGVtZW50MyhhcnJheSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIGdldEVsZW1lbnRzMycsIGtpZHMpO1xuICAgICAgICByZXR1cm4ga2lkc1xuICAgIH07XG5cbiAgICAvL3B1YmxpY1xuICAgIHZhciBwdWJsaWNBcGkgPSB7XG4gICAgICAgIGdldEtpZHM6IGdldEtpZHMsXG4gICAgICAgIGdldEFkdWx0czogZ2V0QWR1bHRzLFxuICAgICAgICBnZXRDb21wYW5pZXM6IGdldENvbXBhbmllcyxcbiAgICAgICAgbWFrZURhdGFDYWxsOiBtYWtlRGF0YUNhbGwsXG4gICAgICAgIHJlc3VsdHM6IHJlc3VsdHMsXG4gICAgICAgIGNvbXBhbmllczogY29tcGFuaWVzLFxuICAgICAgICBhZHVsdHM6IGFkdWx0cyxcbiAgICAgICAga2lkczoga2lkc1xuICAgIH07XG4gICAgcmV0dXJuIHB1YmxpY0FwaTtcbn1dKTsiLCIvLyBQbGVhc2Ugbm90ZSB0aGF0ICRtb2RhbEluc3RhbmNlIHJlcHJlc2VudHMgYSBtb2RhbCB3aW5kb3cgKGluc3RhbmNlKSBkZXBlbmRlbmN5LlxuLy8gSXQgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSAkdWliTW9kYWwgc2VydmljZSB1c2VkIGFib3ZlLlxuXG4vL25lZWRlZCBmb3IgbW9kYWw/PyBwcmV0dHkgc3VyZVxuYXBwLmNvbnRyb2xsZXIoJ01vZGFsSW5zdGFuY2VDdHJsJyxbJyRzY29wZScsJyRtb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcblxuICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLnNlbGVjdGVkLml0ZW0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICB9O1xufV0pOyIsImFwcC5jb250cm9sbGVyKCduYXZDdHJsJywgWydhdXRoU2VydmljZScsJyRzY29wZScsJyRyb290U2NvcGUnLCckbG9jYXRpb24nLCBmdW5jdGlvbihhdXRoU2VydmljZSwgJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24pe1xuICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcblxuICAgIGlmKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIudXNlcm5hbWUpe1xuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2hvbWUnKTtcbiAgICB9XG5cbiAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgYXV0aFNlcnZpY2UubG9nb3V0KCk7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IGF1dGhTZXJ2aWNlLmdldFVzZXIoKTtcbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvXCIpO1xuICAgIH1cbn1dKTtcbiIsIi8vIEFqYXggZm9yIGNyZWF0aW5nIHRoZSBjb250YWN0IGxpc3QgaW4gY29uc3RhbnQgY29udGFjdFxuXG5hcHAuY29udHJvbGxlcignbmV3Q29udGFjdExpc3RDb250cm9sbGVyJyxbJ25ld0NvbnRhY3RMaXN0RGF0YScsJyRzY29wZScsJyRodHRwJywgZnVuY3Rpb24obmV3Q29udGFjdExpc3REYXRhLCAkc2NvcGUpIHtcblxuICAgIC8vZGF0YSB0byBjcmVhdGUgYSBuZXcgY29udGFjdCBsaXN0XG5cblxuICAgICRzY29wZS5saXN0bmFtZSA9IHt9O1xuXG4gICAgJHNjb3BlLmNyZWF0ZUxpc3QgID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZSBsaXN0OiBcIiArICRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG4gICAgICAgIC8vcGFzc2VzIGxpc3QgbmFtZSBzZXJ2aWNlXG5cbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvc3RMaXN0KCRzY29wZS5saXN0bmFtZS5pbnB1dCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJsaXN0ICNcIiwgbmV3Q29udGFjdExpc3REYXRhLmxpc3ROdW0pO1xuXG4gICAgICAgICRzY29wZS5saXN0bmFtZT17fTtcbiAgICB9O1xufV0pO1xuXG5cbiIsIi8vc2VydmljZSBmb3IgYWpheCBjYWxscyB0byBjb25zdGFudCBjb250YWN0XG5cblxuYXBwLnNlcnZpY2UoJ25ld0NvbnRhY3RMaXN0RGF0YScsIFsnQ29udGFjdExpc3REYXRhU2VydmljZScsICckaHR0cCcsXG4gICAgZnVuY3Rpb24gKENvbnRhY3RMaXN0RGF0YVNlcnZpY2UsICRodHRwKSB7XG5cbiAgICB0aGlzLm5ld0NvbnRhY3RMaXN0ID0gW107XG4gICAgdGhpcy5saXN0TnVtID0gXCIwXCI7XG5cbiAgICB0aGlzLnBvc3RMaXN0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJkaWQgdGhlIG5hbWUgbWFrZSBpdCB0byB0aGUgc2VydmljZT8gXCIgKyBuYW1lICk7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvbmV3Q29udGFjdExpc3QnLCB7bmFtZTogbmFtZX0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIGxpc3ROdW0gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJZD8gXCIsIGxpc3ROdW0pO1xuXG4gICAgICAgIH0sIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7IC8vZXJyb3JcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuaW1wb3J0RGF0YUFycmF5ID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXG4gICAgICAgICAgICAgICAgXCJ1c2VyMUBleGFtcGxlLmNvbVwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJmaXJzdF9uYW1lXCI6IFwiSm9oblwiLFxuICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogXCJTbWl0aFwiLFxuICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogXCJDb21wYW55IFhcIixcbiAgICAgICAgICAgIFwiYWRkcmVzc2VzXCI6IFt7XG4gICAgICAgICAgICAgICAgY2l0eTogXCJhbnl0b3duXCJcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZW1haWxfYWRkcmVzc2VzXCI6IFtcbiAgICAgICAgICAgICAgICBcInVzZXIyQGV4YW1wbGUuY29tXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImZpcnN0X25hbWVcIjogXCJKYW5lXCIsXG4gICAgICAgICAgICBcImxhc3RfbmFtZVwiOiBcIlNtaXRoeVwiLFxuICAgICAgICAgICAgXCJjb21wYW55X25hbWVcIjogXCJDb21wYW55IFlcIixcbiAgICAgICAgICAgIFwiYWRkcmVzc2VzXCI6IFt7XG4gICAgICAgICAgICAgICAgY2l0eTogXCJzb21ldG93blwiXG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgXTtcblxuXG4gICAgdGhpcy5wb3BMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBnZXRDaGVja2VkKCk7XG4gICAgICAgICRodHRwLnBvc3QoJy9wb3B1bGF0ZUNvbnRhY3RMaXN0LmpzJywgaW1wb3J0RGF0YUFycmF5LCBsaXN0TnVtKS50aGVuKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhvcHRpb25zKTtcblxuICAgIH07XG5cbiAgICAvL2dldCBhbGwgdGhlIGNoZWNrZWQgZWxlbWVudHMgYW5kIHN0dWZmIHRoZW0gaW4gYW4gYXJyYXlcbiAgICB2YXIgZ2V0Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoXCI6Y2hlY2tlZC50eXBlLWVsZW1lbnRcIikuZWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZCA9PSBDb250YWN0TGlzdERhdGFTZXJ2aWNlLnJlc3VsdHMuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0T2JqZWN0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsX2FkZHJlc3Nlc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiAkKHRoaXMpLmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxhc3RfbmFtZVwiOiAkKHRoaXMpLmxhc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tcGFueV9uYW1lXCI6ICQodGhpcykuY29tcGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZHJlc3Nlc1wiOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiAkKHRoaXMpLmNpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydERhdGFBcnJheS5wdXNoKGNvbnRhY3RPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG59XSk7IiwiYXBwLmNvbnRyb2xsZXIoJ3BvcExpc3RDb250cm9sbGVyJyxbJ25ld0NvbnRhY3RMaXN0RGF0YScsJyRzY29wZScsJyRodHRwJywgZnVuY3Rpb24obmV3Q29udGFjdExpc3REYXRhLCAkc2NvcGUsICRodHRwKSB7XG4gICAgLy9kYXRhIHRvIGNyZWF0ZSBhIG5ldyBjb250YWN0IGxpc3RcblxuXG4gICAgJHNjb3BlLmxpc3ROYW1lID0ge307XG5cbiAgICAkc2NvcGUucG9wdWxhdGVMaXN0ICA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGUgbGlzdDogXCIgKyBzY29wZS5saXN0TmFtZS5pbnB1dCk7XG4gICAgICAgIC8vcGFzc2VzIGluIHNlYXJjaCB0ZXh0IHRvIHNlcnZpY2VcbiAgICAgICAgbmV3Q29udGFjdExpc3REYXRhLnBvcExpc3QoKTtcbiAgICAgICAgLy92YXIgbGlzdEVuZCA9IHtcbiAgICAgICAgLy8gICAgXCJsaXN0c1wiOiBbbGlzdE51bV0sXG4gICAgICAgIC8vICAgIFwiY29sdW1uX25hbWVzXCI6IFtcbiAgICAgICAgLy8gICAgXCJFTUFJTFwiLFxuICAgICAgICAvLyAgICBcIkZJUlNUIE5BTUVcIixcbiAgICAgICAgLy8gICAgXCJMQVNUIE5BTUVcIixcbiAgICAgICAgLy8gICAgXCJDSVRZXCIsXG4gICAgICAgIC8vICAgIFwiQ09NUEFOWSBOQU1FXCJcbiAgICAgICAgLy9dfVxuXG5cbiAgICAgICAgJHNjb3BlLmxpc3ROYW1lPXt9O1xuICAgIH07XG59XSk7XG5cbiIsIlxuLy9yZWdpc3RlciBjb250cm9sbGVyXG5hcHAuY29udHJvbGxlcigncmVnaXN0ZXJDdHJsJywgWyAnJHNjb3BlJywgJyRodHRwJywgJyRsb2NhdGlvbicsICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uKSB7XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWdpc3RlckN0cmxcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlckNvbnRyb2xsZXIgc3VibWl0OicsICRzY29wZS5mb3JtKTtcbiAgICAgICAgJGh0dHAucG9zdCgnL3JlZ2lzdGVyJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1dKTtcbiIsImFwcC5jb250cm9sbGVyKCdyZXNldEN0cmwnLCBbICckc2NvcGUnLCAnJGh0dHAnLCAnJGxvY2F0aW9uJywgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9jYXRpb24pIHtcbiAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZWRpdCBwYXNzd29yZDonLCAkc2NvcGUuZm9ybSk7XG4gICAgICAgICRodHRwLnB1dCgnL2FkbWluJywgJHNjb3BlLmZvcm0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoXCIvaW5kZXhcIilcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
